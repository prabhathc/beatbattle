"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/wavesurfer.js";
exports.ids = ["vendor-chunks/wavesurfer.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/wavesurfer.js/dist/wavesurfer.esm.js":
/*!***********************************************************!*\
  !*** ./node_modules/wavesurfer.js/dist/wavesurfer.esm.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ u)\n/* harmony export */ });\nfunction t(t, e, i, s) {\n    return new (i || (i = Promise))(function(n, r) {\n        function o(t) {\n            try {\n                h(s.next(t));\n            } catch (t) {\n                r(t);\n            }\n        }\n        function a(t) {\n            try {\n                h(s.throw(t));\n            } catch (t) {\n                r(t);\n            }\n        }\n        function h(t) {\n            var e;\n            t.done ? n(t.value) : (e = t.value, e instanceof i ? e : new i(function(t) {\n                t(e);\n            })).then(o, a);\n        }\n        h((s = s.apply(t, e || [])).next());\n    });\n}\n\"function\" == typeof SuppressedError && SuppressedError;\nclass e {\n    constructor(){\n        this.listeners = {};\n    }\n    on(t, e, i) {\n        if (this.listeners[t] || (this.listeners[t] = new Set), this.listeners[t].add(e), null == i ? void 0 : i.once) {\n            const i = ()=>{\n                this.un(t, i), this.un(t, e);\n            };\n            return this.on(t, i), i;\n        }\n        return ()=>this.un(t, e);\n    }\n    un(t, e) {\n        var i;\n        null === (i = this.listeners[t]) || void 0 === i || i.delete(e);\n    }\n    once(t, e) {\n        return this.on(t, e, {\n            once: !0\n        });\n    }\n    unAll() {\n        this.listeners = {};\n    }\n    emit(t, ...e) {\n        this.listeners[t] && this.listeners[t].forEach((t)=>t(...e));\n    }\n}\nconst i = {\n    decode: function(e, i) {\n        return t(this, void 0, void 0, function*() {\n            const t = new AudioContext({\n                sampleRate: i\n            });\n            return t.decodeAudioData(e).finally(()=>t.close());\n        });\n    },\n    createBuffer: function(t, e) {\n        return \"number\" == typeof t[0] && (t = [\n            t\n        ]), function(t) {\n            const e = t[0];\n            if (e.some((t)=>t > 1 || t < -1)) {\n                const i = e.length;\n                let s = 0;\n                for(let t = 0; t < i; t++){\n                    const i = Math.abs(e[t]);\n                    i > s && (s = i);\n                }\n                for (const e of t)for(let t = 0; t < i; t++)e[t] /= s;\n            }\n        }(t), {\n            duration: e,\n            length: t[0].length,\n            sampleRate: t[0].length / e,\n            numberOfChannels: t.length,\n            getChannelData: (e)=>null == t ? void 0 : t[e],\n            copyFromChannel: AudioBuffer.prototype.copyFromChannel,\n            copyToChannel: AudioBuffer.prototype.copyToChannel\n        };\n    }\n};\nfunction s(t, e) {\n    const i = e.xmlns ? document.createElementNS(e.xmlns, t) : document.createElement(t);\n    for (const [t, n] of Object.entries(e))if (\"children\" === t) for (const [t, n] of Object.entries(e))\"string\" == typeof n ? i.appendChild(document.createTextNode(n)) : i.appendChild(s(t, n));\n    else \"style\" === t ? Object.assign(i.style, n) : \"textContent\" === t ? i.textContent = n : i.setAttribute(t, n.toString());\n    return i;\n}\nfunction n(t, e, i) {\n    const n = s(t, e || {});\n    return null == i || i.appendChild(n), n;\n}\nvar r = Object.freeze({\n    __proto__: null,\n    createElement: n,\n    default: n\n});\nconst o = {\n    fetchBlob: function(e, i, s) {\n        return t(this, void 0, void 0, function*() {\n            const n = yield fetch(e, s);\n            if (n.status >= 400) throw new Error(`Failed to fetch ${e}: ${n.status} (${n.statusText})`);\n            return function(e, i) {\n                t(this, void 0, void 0, function*() {\n                    if (!e.body || !e.headers) return;\n                    const s = e.body.getReader(), n = Number(e.headers.get(\"Content-Length\")) || 0;\n                    let r = 0;\n                    const o = (e)=>t(this, void 0, void 0, function*() {\n                            r += (null == e ? void 0 : e.length) || 0;\n                            const t = Math.round(r / n * 100);\n                            i(t);\n                        }), a = ()=>t(this, void 0, void 0, function*() {\n                            let t;\n                            try {\n                                t = yield s.read();\n                            } catch (t) {\n                                return;\n                            }\n                            t.done || (o(t.value), yield a());\n                        });\n                    a();\n                });\n            }(n.clone(), i), n.blob();\n        });\n    }\n};\nclass a extends e {\n    constructor(t){\n        super(), this.isExternalMedia = !1, t.media ? (this.media = t.media, this.isExternalMedia = !0) : this.media = document.createElement(\"audio\"), t.mediaControls && (this.media.controls = !0), t.autoplay && (this.media.autoplay = !0), null != t.playbackRate && this.onMediaEvent(\"canplay\", ()=>{\n            null != t.playbackRate && (this.media.playbackRate = t.playbackRate);\n        }, {\n            once: !0\n        });\n    }\n    onMediaEvent(t, e, i) {\n        return this.media.addEventListener(t, e, i), ()=>this.media.removeEventListener(t, e, i);\n    }\n    getSrc() {\n        return this.media.currentSrc || this.media.src || \"\";\n    }\n    revokeSrc() {\n        const t = this.getSrc();\n        t.startsWith(\"blob:\") && URL.revokeObjectURL(t);\n    }\n    canPlayType(t) {\n        return \"\" !== this.media.canPlayType(t);\n    }\n    setSrc(t, e) {\n        const i = this.getSrc();\n        if (t && i === t) return;\n        this.revokeSrc();\n        const s = e instanceof Blob && (this.canPlayType(e.type) || !t) ? URL.createObjectURL(e) : t;\n        try {\n            this.media.src = s;\n        } catch (e) {\n            this.media.src = t;\n        }\n    }\n    destroy() {\n        this.media.pause(), this.isExternalMedia || (this.media.remove(), this.revokeSrc(), this.media.src = \"\", this.media.load());\n    }\n    setMediaElement(t) {\n        this.media = t;\n    }\n    play() {\n        return t(this, void 0, void 0, function*() {\n            return this.media.play();\n        });\n    }\n    pause() {\n        this.media.pause();\n    }\n    isPlaying() {\n        return !this.media.paused && !this.media.ended;\n    }\n    setTime(t) {\n        this.media.currentTime = t;\n    }\n    getDuration() {\n        return this.media.duration;\n    }\n    getCurrentTime() {\n        return this.media.currentTime;\n    }\n    getVolume() {\n        return this.media.volume;\n    }\n    setVolume(t) {\n        this.media.volume = t;\n    }\n    getMuted() {\n        return this.media.muted;\n    }\n    setMuted(t) {\n        this.media.muted = t;\n    }\n    getPlaybackRate() {\n        return this.media.playbackRate;\n    }\n    isSeeking() {\n        return this.media.seeking;\n    }\n    setPlaybackRate(t, e) {\n        null != e && (this.media.preservesPitch = e), this.media.playbackRate = t;\n    }\n    getMediaElement() {\n        return this.media;\n    }\n    setSinkId(t) {\n        return this.media.setSinkId(t);\n    }\n}\nclass h extends e {\n    constructor(t, e){\n        super(), this.timeouts = [], this.isScrollable = !1, this.audioData = null, this.resizeObserver = null, this.lastContainerWidth = 0, this.isDragging = !1, this.subscriptions = [], this.subscriptions = [], this.options = t;\n        const i = this.parentFromOptionsContainer(t.container);\n        this.parent = i;\n        const [s, n] = this.initHtml();\n        i.appendChild(s), this.container = s, this.scrollContainer = n.querySelector(\".scroll\"), this.wrapper = n.querySelector(\".wrapper\"), this.canvasWrapper = n.querySelector(\".canvases\"), this.progressWrapper = n.querySelector(\".progress\"), this.cursor = n.querySelector(\".cursor\"), e && n.appendChild(e), this.initEvents();\n    }\n    parentFromOptionsContainer(t) {\n        let e;\n        if (\"string\" == typeof t ? e = document.querySelector(t) : t instanceof HTMLElement && (e = t), !e) throw new Error(\"Container not found\");\n        return e;\n    }\n    initEvents() {\n        const t = (t)=>{\n            const e = this.wrapper.getBoundingClientRect(), i = t.clientX - e.left, s = t.clientY - e.top;\n            return [\n                i / e.width,\n                s / e.height\n            ];\n        };\n        if (this.wrapper.addEventListener(\"click\", (e)=>{\n            const [i, s] = t(e);\n            this.emit(\"click\", i, s);\n        }), this.wrapper.addEventListener(\"dblclick\", (e)=>{\n            const [i, s] = t(e);\n            this.emit(\"dblclick\", i, s);\n        }), !0 !== this.options.dragToSeek && \"object\" != typeof this.options.dragToSeek || this.initDrag(), this.scrollContainer.addEventListener(\"scroll\", ()=>{\n            const { scrollLeft: t, scrollWidth: e, clientWidth: i } = this.scrollContainer, s = t / e, n = (t + i) / e;\n            this.emit(\"scroll\", s, n, t, t + i);\n        }), \"function\" == typeof ResizeObserver) {\n            const t = this.createDelay(100);\n            this.resizeObserver = new ResizeObserver(()=>{\n                t().then(()=>this.onContainerResize()).catch(()=>{});\n            }), this.resizeObserver.observe(this.scrollContainer);\n        }\n    }\n    onContainerResize() {\n        const t = this.parent.clientWidth;\n        t === this.lastContainerWidth && \"auto\" !== this.options.height || (this.lastContainerWidth = t, this.reRender());\n    }\n    initDrag() {\n        this.subscriptions.push(function(t, e, i, s, n = 3, r = 0, o = 100) {\n            if (!t) return ()=>{};\n            const a = matchMedia(\"(pointer: coarse)\").matches;\n            let h = ()=>{};\n            const l = (l)=>{\n                if (l.button !== r) return;\n                l.preventDefault(), l.stopPropagation();\n                let d = l.clientX, c = l.clientY, u = !1;\n                const p = Date.now(), m = (s)=>{\n                    if (s.preventDefault(), s.stopPropagation(), a && Date.now() - p < o) return;\n                    const r = s.clientX, h = s.clientY, l = r - d, m = h - c;\n                    if (u || Math.abs(l) > n || Math.abs(m) > n) {\n                        const s = t.getBoundingClientRect(), { left: n, top: o } = s;\n                        u || (null == i || i(d - n, c - o), u = !0), e(l, m, r - n, h - o), d = r, c = h;\n                    }\n                }, g = (e)=>{\n                    if (u) {\n                        const i = e.clientX, n = e.clientY, r = t.getBoundingClientRect(), { left: o, top: a } = r;\n                        null == s || s(i - o, n - a);\n                    }\n                    h();\n                }, f = (t)=>{\n                    t.relatedTarget && t.relatedTarget !== document.documentElement || g(t);\n                }, v = (t)=>{\n                    u && (t.stopPropagation(), t.preventDefault());\n                }, b = (t)=>{\n                    u && t.preventDefault();\n                };\n                document.addEventListener(\"pointermove\", m), document.addEventListener(\"pointerup\", g), document.addEventListener(\"pointerout\", f), document.addEventListener(\"pointercancel\", f), document.addEventListener(\"touchmove\", b, {\n                    passive: !1\n                }), document.addEventListener(\"click\", v, {\n                    capture: !0\n                }), h = ()=>{\n                    document.removeEventListener(\"pointermove\", m), document.removeEventListener(\"pointerup\", g), document.removeEventListener(\"pointerout\", f), document.removeEventListener(\"pointercancel\", f), document.removeEventListener(\"touchmove\", b), setTimeout(()=>{\n                        document.removeEventListener(\"click\", v, {\n                            capture: !0\n                        });\n                    }, 10);\n                };\n            };\n            return t.addEventListener(\"pointerdown\", l), ()=>{\n                h(), t.removeEventListener(\"pointerdown\", l);\n            };\n        }(this.wrapper, (t, e, i)=>{\n            this.emit(\"drag\", Math.max(0, Math.min(1, i / this.wrapper.getBoundingClientRect().width)));\n        }, (t)=>{\n            this.isDragging = !0, this.emit(\"dragstart\", Math.max(0, Math.min(1, t / this.wrapper.getBoundingClientRect().width)));\n        }, (t)=>{\n            this.isDragging = !1, this.emit(\"dragend\", Math.max(0, Math.min(1, t / this.wrapper.getBoundingClientRect().width)));\n        }));\n    }\n    getHeight(t, e) {\n        var i;\n        const s = (null === (i = this.audioData) || void 0 === i ? void 0 : i.numberOfChannels) || 1;\n        if (null == t) return 128;\n        if (!isNaN(Number(t))) return Number(t);\n        if (\"auto\" === t) {\n            const t = this.parent.clientHeight || 128;\n            return (null == e ? void 0 : e.every((t)=>!t.overlay)) ? t / s : t;\n        }\n        return 128;\n    }\n    initHtml() {\n        const t = document.createElement(\"div\"), e = t.attachShadow({\n            mode: \"open\"\n        }), i = this.options.cspNonce && \"string\" == typeof this.options.cspNonce ? this.options.cspNonce.replace(/\"/g, \"\") : \"\";\n        return e.innerHTML = `\\n      <style${i ? ` nonce=\"${i}\"` : \"\"}>\\n        :host {\\n          user-select: none;\\n          min-width: 1px;\\n        }\\n        :host audio {\\n          display: block;\\n          width: 100%;\\n        }\\n        :host .scroll {\\n          overflow-x: auto;\\n          overflow-y: hidden;\\n          width: 100%;\\n          position: relative;\\n        }\\n        :host .noScrollbar {\\n          scrollbar-color: transparent;\\n          scrollbar-width: none;\\n        }\\n        :host .noScrollbar::-webkit-scrollbar {\\n          display: none;\\n          -webkit-appearance: none;\\n        }\\n        :host .wrapper {\\n          position: relative;\\n          overflow: visible;\\n          z-index: 2;\\n        }\\n        :host .canvases {\\n          min-height: ${this.getHeight(this.options.height, this.options.splitChannels)}px;\\n        }\\n        :host .canvases > div {\\n          position: relative;\\n        }\\n        :host canvas {\\n          display: block;\\n          position: absolute;\\n          top: 0;\\n          image-rendering: pixelated;\\n        }\\n        :host .progress {\\n          pointer-events: none;\\n          position: absolute;\\n          z-index: 2;\\n          top: 0;\\n          left: 0;\\n          width: 0;\\n          height: 100%;\\n          overflow: hidden;\\n        }\\n        :host .progress > div {\\n          position: relative;\\n        }\\n        :host .cursor {\\n          pointer-events: none;\\n          position: absolute;\\n          z-index: 5;\\n          top: 0;\\n          left: 0;\\n          height: 100%;\\n          border-radius: 2px;\\n        }\\n      </style>\\n\\n      <div class=\"scroll\" part=\"scroll\">\\n        <div class=\"wrapper\" part=\"wrapper\">\\n          <div class=\"canvases\" part=\"canvases\"></div>\\n          <div class=\"progress\" part=\"progress\"></div>\\n          <div class=\"cursor\" part=\"cursor\"></div>\\n        </div>\\n      </div>\\n    `, [\n            t,\n            e\n        ];\n    }\n    setOptions(t) {\n        if (this.options.container !== t.container) {\n            const e = this.parentFromOptionsContainer(t.container);\n            e.appendChild(this.container), this.parent = e;\n        }\n        !0 !== t.dragToSeek && \"object\" != typeof this.options.dragToSeek || this.initDrag(), this.options = t, this.reRender();\n    }\n    getWrapper() {\n        return this.wrapper;\n    }\n    getWidth() {\n        return this.scrollContainer.clientWidth;\n    }\n    getScroll() {\n        return this.scrollContainer.scrollLeft;\n    }\n    setScroll(t) {\n        this.scrollContainer.scrollLeft = t;\n    }\n    setScrollPercentage(t) {\n        const { scrollWidth: e } = this.scrollContainer, i = e * t;\n        this.setScroll(i);\n    }\n    destroy() {\n        var t, e;\n        this.subscriptions.forEach((t)=>t()), this.container.remove(), null === (t = this.resizeObserver) || void 0 === t || t.disconnect(), null === (e = this.unsubscribeOnScroll) || void 0 === e || e.call(this);\n    }\n    createDelay(t = 10) {\n        let e, i;\n        const s = ()=>{\n            e && clearTimeout(e), i && i();\n        };\n        return this.timeouts.push(s), ()=>new Promise((n, r)=>{\n                s(), i = r, e = setTimeout(()=>{\n                    e = void 0, i = void 0, n();\n                }, t);\n            });\n    }\n    convertColorValues(t) {\n        if (!Array.isArray(t)) return t || \"\";\n        if (t.length < 2) return t[0] || \"\";\n        const e = document.createElement(\"canvas\"), i = e.getContext(\"2d\"), s = e.height * (window.devicePixelRatio || 1), n = i.createLinearGradient(0, 0, 0, s), r = 1 / (t.length - 1);\n        return t.forEach((t, e)=>{\n            const i = e * r;\n            n.addColorStop(i, t);\n        }), n;\n    }\n    getPixelRatio() {\n        return Math.max(1, window.devicePixelRatio || 1);\n    }\n    renderBarWaveform(t, e, i, s) {\n        const n = t[0], r = t[1] || t[0], o = n.length, { width: a, height: h } = i.canvas, l = h / 2, d = this.getPixelRatio(), c = e.barWidth ? e.barWidth * d : 1, u = e.barGap ? e.barGap * d : e.barWidth ? c / 2 : 0, p = e.barRadius || 0, m = a / (c + u) / o, g = p && \"roundRect\" in i ? \"roundRect\" : \"rect\";\n        i.beginPath();\n        let f = 0, v = 0, b = 0;\n        for(let t = 0; t <= o; t++){\n            const o = Math.round(t * m);\n            if (o > f) {\n                const t = Math.round(v * l * s), n = t + Math.round(b * l * s) || 1;\n                let r = l - t;\n                \"top\" === e.barAlign ? r = 0 : \"bottom\" === e.barAlign && (r = h - n), i[g](f * (c + u), r, c, n, p), f = o, v = 0, b = 0;\n            }\n            const a = Math.abs(n[t] || 0), d = Math.abs(r[t] || 0);\n            a > v && (v = a), d > b && (b = d);\n        }\n        i.fill(), i.closePath();\n    }\n    renderLineWaveform(t, e, i, s) {\n        const n = (e)=>{\n            const n = t[e] || t[0], r = n.length, { height: o } = i.canvas, a = o / 2, h = i.canvas.width / r;\n            i.moveTo(0, a);\n            let l = 0, d = 0;\n            for(let t = 0; t <= r; t++){\n                const r = Math.round(t * h);\n                if (r > l) {\n                    const t = a + (Math.round(d * a * s) || 1) * (0 === e ? -1 : 1);\n                    i.lineTo(l, t), l = r, d = 0;\n                }\n                const o = Math.abs(n[t] || 0);\n                o > d && (d = o);\n            }\n            i.lineTo(l, a);\n        };\n        i.beginPath(), n(0), n(1), i.fill(), i.closePath();\n    }\n    renderWaveform(t, e, i) {\n        if (i.fillStyle = this.convertColorValues(e.waveColor), e.renderFunction) return void e.renderFunction(t, i);\n        let s = e.barHeight || 1;\n        if (e.normalize) {\n            const e = Array.from(t[0]).reduce((t, e)=>Math.max(t, Math.abs(e)), 0);\n            s = e ? 1 / e : 1;\n        }\n        e.barWidth || e.barGap || e.barAlign ? this.renderBarWaveform(t, e, i, s) : this.renderLineWaveform(t, e, i, s);\n    }\n    renderSingleCanvas(t, e, i, s, n, r, o) {\n        const a = this.getPixelRatio(), h = document.createElement(\"canvas\");\n        h.width = Math.round(i * a), h.height = Math.round(s * a), h.style.width = `${i}px`, h.style.height = `${s}px`, h.style.left = `${Math.round(n)}px`, r.appendChild(h);\n        const l = h.getContext(\"2d\");\n        if (this.renderWaveform(t, e, l), h.width > 0 && h.height > 0) {\n            const t = h.cloneNode(), i = t.getContext(\"2d\");\n            i.drawImage(h, 0, 0), i.globalCompositeOperation = \"source-in\", i.fillStyle = this.convertColorValues(e.progressColor), i.fillRect(0, 0, h.width, h.height), o.appendChild(t);\n        }\n    }\n    renderMultiCanvas(t, e, i, s, n, r) {\n        const o = this.getPixelRatio(), { clientWidth: a } = this.scrollContainer, l = i / o;\n        let d = Math.min(h.MAX_CANVAS_WIDTH, a, l), c = {};\n        if (e.barWidth || e.barGap) {\n            const t = e.barWidth || .5, i = t + (e.barGap || t / 2);\n            d % i != 0 && (d = Math.floor(d / i) * i);\n        }\n        const u = (i)=>{\n            if (i < 0 || i >= p) return;\n            if (c[i]) return;\n            c[i] = !0;\n            const o = i * d, a = Math.min(l - o, d);\n            if (a <= 0) return;\n            const h = t.map((t)=>{\n                const e = Math.floor(o / l * t.length), i = Math.floor((o + a) / l * t.length);\n                return t.slice(e, i);\n            });\n            this.renderSingleCanvas(h, e, a, s, o, n, r);\n        }, p = Math.ceil(l / d);\n        if (!this.isScrollable) {\n            for(let t = 0; t < p; t++)u(t);\n            return;\n        }\n        const m = this.scrollContainer.scrollLeft / l, g = Math.floor(m * p);\n        u(g - 1), u(g), u(g + 1), p > 1 && (this.unsubscribeOnScroll = this.on(\"scroll\", ()=>{\n            const { scrollLeft: t } = this.scrollContainer, e = Math.floor(t / l * p);\n            Object.keys(c).length > h.MAX_NODES && (n.innerHTML = \"\", r.innerHTML = \"\", c = {}), u(e - 1), u(e), u(e + 1);\n        }));\n    }\n    renderChannel(t, e, i, s) {\n        var { overlay: n } = e, r = function(t, e) {\n            var i = {};\n            for(var s in t)Object.prototype.hasOwnProperty.call(t, s) && e.indexOf(s) < 0 && (i[s] = t[s]);\n            if (null != t && \"function\" == typeof Object.getOwnPropertySymbols) {\n                var n = 0;\n                for(s = Object.getOwnPropertySymbols(t); n < s.length; n++)e.indexOf(s[n]) < 0 && Object.prototype.propertyIsEnumerable.call(t, s[n]) && (i[s[n]] = t[s[n]]);\n            }\n            return i;\n        }(e, [\n            \"overlay\"\n        ]);\n        const o = document.createElement(\"div\"), a = this.getHeight(r.height, r.splitChannels);\n        o.style.height = `${a}px`, n && s > 0 && (o.style.marginTop = `-${a}px`), this.canvasWrapper.style.minHeight = `${a}px`, this.canvasWrapper.appendChild(o);\n        const h = o.cloneNode();\n        this.progressWrapper.appendChild(h), this.renderMultiCanvas(t, r, i, a, o, h);\n    }\n    render(e) {\n        return t(this, void 0, void 0, function*() {\n            var t;\n            this.timeouts.forEach((t)=>t()), this.timeouts = [], this.canvasWrapper.innerHTML = \"\", this.progressWrapper.innerHTML = \"\", null != this.options.width && (this.scrollContainer.style.width = \"number\" == typeof this.options.width ? `${this.options.width}px` : this.options.width);\n            const i = this.getPixelRatio(), s = this.scrollContainer.clientWidth, n = Math.ceil(e.duration * (this.options.minPxPerSec || 0));\n            this.isScrollable = n > s;\n            const r = this.options.fillParent && !this.isScrollable, o = (r ? s : n) * i;\n            if (this.wrapper.style.width = r ? \"100%\" : `${n}px`, this.scrollContainer.style.overflowX = this.isScrollable ? \"auto\" : \"hidden\", this.scrollContainer.classList.toggle(\"noScrollbar\", !!this.options.hideScrollbar), this.cursor.style.backgroundColor = `${this.options.cursorColor || this.options.progressColor}`, this.cursor.style.width = `${this.options.cursorWidth}px`, this.audioData = e, this.emit(\"render\"), this.options.splitChannels) for(let i = 0; i < e.numberOfChannels; i++){\n                const s = Object.assign(Object.assign({}, this.options), null === (t = this.options.splitChannels) || void 0 === t ? void 0 : t[i]);\n                this.renderChannel([\n                    e.getChannelData(i)\n                ], s, o, i);\n            }\n            else {\n                const t = [\n                    e.getChannelData(0)\n                ];\n                e.numberOfChannels > 1 && t.push(e.getChannelData(1)), this.renderChannel(t, this.options, o, 0);\n            }\n            Promise.resolve().then(()=>this.emit(\"rendered\"));\n        });\n    }\n    reRender() {\n        var t;\n        if (null === (t = this.unsubscribeOnScroll) || void 0 === t || t.call(this), delete this.unsubscribeOnScroll, !this.audioData) return;\n        const { scrollWidth: e } = this.scrollContainer, { right: i } = this.progressWrapper.getBoundingClientRect();\n        if (this.render(this.audioData), this.isScrollable && e !== this.scrollContainer.scrollWidth) {\n            const { right: t } = this.progressWrapper.getBoundingClientRect();\n            let e = t - i;\n            e *= 2, e = e < 0 ? Math.floor(e) : Math.ceil(e), e /= 2, this.scrollContainer.scrollLeft += e;\n        }\n    }\n    zoom(t) {\n        this.options.minPxPerSec = t, this.reRender();\n    }\n    scrollIntoView(t, e = !1) {\n        const { scrollLeft: i, scrollWidth: s, clientWidth: n } = this.scrollContainer, r = t * s, o = i, a = i + n, h = n / 2;\n        if (this.isDragging) {\n            const t = 30;\n            r + t > a ? this.scrollContainer.scrollLeft += t : r - t < o && (this.scrollContainer.scrollLeft -= t);\n        } else {\n            (r < o || r > a) && (this.scrollContainer.scrollLeft = r - (this.options.autoCenter ? h : 0));\n            const t = r - i - h;\n            e && this.options.autoCenter && t > 0 && (this.scrollContainer.scrollLeft += Math.min(t, 10));\n        }\n        {\n            const t = this.scrollContainer.scrollLeft, e = t / s, i = (t + n) / s;\n            this.emit(\"scroll\", e, i, t, t + n);\n        }\n    }\n    renderProgress(t, e) {\n        if (isNaN(t)) return;\n        const i = 100 * t;\n        this.canvasWrapper.style.clipPath = `polygon(${i}% 0, 100% 0, 100% 100%, ${i}% 100%)`, this.progressWrapper.style.width = `${i}%`, this.cursor.style.left = `${i}%`, this.cursor.style.transform = `translateX(-${100 === Math.round(i) ? this.options.cursorWidth : 0}px)`, this.isScrollable && this.options.autoScroll && this.scrollIntoView(t, e);\n    }\n    exportImage(e, i, s) {\n        return t(this, void 0, void 0, function*() {\n            const t = this.canvasWrapper.querySelectorAll(\"canvas\");\n            if (!t.length) throw new Error(\"No waveform data\");\n            if (\"dataURL\" === s) {\n                const s = Array.from(t).map((t)=>t.toDataURL(e, i));\n                return Promise.resolve(s);\n            }\n            return Promise.all(Array.from(t).map((t)=>new Promise((s, n)=>{\n                    t.toBlob((t)=>{\n                        t ? s(t) : n(new Error(\"Could not export image\"));\n                    }, e, i);\n                })));\n        });\n    }\n}\nh.MAX_CANVAS_WIDTH = 8e3, h.MAX_NODES = 10;\nclass l extends e {\n    constructor(){\n        super(...arguments), this.unsubscribe = ()=>{};\n    }\n    start() {\n        this.unsubscribe = this.on(\"tick\", ()=>{\n            requestAnimationFrame(()=>{\n                this.emit(\"tick\");\n            });\n        }), this.emit(\"tick\");\n    }\n    stop() {\n        this.unsubscribe();\n    }\n    destroy() {\n        this.unsubscribe();\n    }\n}\nclass d extends e {\n    constructor(t = new AudioContext){\n        super(), this.bufferNode = null, this.playStartTime = 0, this.playedDuration = 0, this._muted = !1, this._playbackRate = 1, this._duration = void 0, this.buffer = null, this.currentSrc = \"\", this.paused = !0, this.crossOrigin = null, this.seeking = !1, this.autoplay = !1, this.addEventListener = this.on, this.removeEventListener = this.un, this.audioContext = t, this.gainNode = this.audioContext.createGain(), this.gainNode.connect(this.audioContext.destination);\n    }\n    load() {\n        return t(this, void 0, void 0, function*() {});\n    }\n    get src() {\n        return this.currentSrc;\n    }\n    set src(t) {\n        if (this.currentSrc = t, this._duration = void 0, !t) return this.buffer = null, void this.emit(\"emptied\");\n        fetch(t).then((e)=>{\n            if (e.status >= 400) throw new Error(`Failed to fetch ${t}: ${e.status} (${e.statusText})`);\n            return e.arrayBuffer();\n        }).then((e)=>this.currentSrc !== t ? null : this.audioContext.decodeAudioData(e)).then((e)=>{\n            this.currentSrc === t && (this.buffer = e, this.emit(\"loadedmetadata\"), this.emit(\"canplay\"), this.autoplay && this.play());\n        });\n    }\n    _play() {\n        var t;\n        if (!this.paused) return;\n        this.paused = !1, null === (t = this.bufferNode) || void 0 === t || t.disconnect(), this.bufferNode = this.audioContext.createBufferSource(), this.buffer && (this.bufferNode.buffer = this.buffer), this.bufferNode.playbackRate.value = this._playbackRate, this.bufferNode.connect(this.gainNode);\n        let e = this.playedDuration * this._playbackRate;\n        e >= this.duration && (e = 0, this.playedDuration = 0), this.bufferNode.start(this.audioContext.currentTime, e), this.playStartTime = this.audioContext.currentTime, this.bufferNode.onended = ()=>{\n            this.currentTime >= this.duration && (this.pause(), this.emit(\"ended\"));\n        };\n    }\n    _pause() {\n        var t;\n        this.paused = !0, null === (t = this.bufferNode) || void 0 === t || t.stop(), this.playedDuration += this.audioContext.currentTime - this.playStartTime;\n    }\n    play() {\n        return t(this, void 0, void 0, function*() {\n            this.paused && (this._play(), this.emit(\"play\"));\n        });\n    }\n    pause() {\n        this.paused || (this._pause(), this.emit(\"pause\"));\n    }\n    stopAt(t) {\n        var e, i;\n        const s = t - this.currentTime;\n        null === (e = this.bufferNode) || void 0 === e || e.stop(this.audioContext.currentTime + s), null === (i = this.bufferNode) || void 0 === i || i.addEventListener(\"ended\", ()=>{\n            this.bufferNode = null, this.pause();\n        }, {\n            once: !0\n        });\n    }\n    setSinkId(e) {\n        return t(this, void 0, void 0, function*() {\n            return this.audioContext.setSinkId(e);\n        });\n    }\n    get playbackRate() {\n        return this._playbackRate;\n    }\n    set playbackRate(t) {\n        this._playbackRate = t, this.bufferNode && (this.bufferNode.playbackRate.value = t);\n    }\n    get currentTime() {\n        return (this.paused ? this.playedDuration : this.playedDuration + (this.audioContext.currentTime - this.playStartTime)) * this._playbackRate;\n    }\n    set currentTime(t) {\n        const e = !this.paused;\n        e && this._pause(), this.playedDuration = t / this._playbackRate, e && this._play(), this.emit(\"seeking\"), this.emit(\"timeupdate\");\n    }\n    get duration() {\n        var t, e;\n        return null !== (t = this._duration) && void 0 !== t ? t : (null === (e = this.buffer) || void 0 === e ? void 0 : e.duration) || 0;\n    }\n    set duration(t) {\n        this._duration = t;\n    }\n    get volume() {\n        return this.gainNode.gain.value;\n    }\n    set volume(t) {\n        this.gainNode.gain.value = t, this.emit(\"volumechange\");\n    }\n    get muted() {\n        return this._muted;\n    }\n    set muted(t) {\n        this._muted !== t && (this._muted = t, this._muted ? this.gainNode.disconnect() : this.gainNode.connect(this.audioContext.destination));\n    }\n    canPlayType(t) {\n        return /^(audio|video)\\//.test(t);\n    }\n    getGainNode() {\n        return this.gainNode;\n    }\n    getChannelData() {\n        const t = [];\n        if (!this.buffer) return t;\n        const e = this.buffer.numberOfChannels;\n        for(let i = 0; i < e; i++)t.push(this.buffer.getChannelData(i));\n        return t;\n    }\n}\nconst c = {\n    waveColor: \"#999\",\n    progressColor: \"#555\",\n    cursorWidth: 1,\n    minPxPerSec: 0,\n    fillParent: !0,\n    interact: !0,\n    dragToSeek: !1,\n    autoScroll: !0,\n    autoCenter: !0,\n    sampleRate: 8e3\n};\nclass u extends a {\n    static create(t) {\n        return new u(t);\n    }\n    constructor(t){\n        const e = t.media || (\"WebAudio\" === t.backend ? new d : void 0);\n        super({\n            media: e,\n            mediaControls: t.mediaControls,\n            autoplay: t.autoplay,\n            playbackRate: t.audioRate\n        }), this.plugins = [], this.decodedData = null, this.subscriptions = [], this.mediaSubscriptions = [], this.abortController = null, this.options = Object.assign({}, c, t), this.timer = new l;\n        const i = e ? void 0 : this.getMediaElement();\n        this.renderer = new h(this.options, i), this.initPlayerEvents(), this.initRendererEvents(), this.initTimerEvents(), this.initPlugins();\n        const s = this.options.url || this.getSrc() || \"\";\n        Promise.resolve().then(()=>{\n            this.emit(\"init\");\n            const { peaks: t, duration: e } = this.options;\n            (s || t && e) && this.load(s, t, e).catch(()=>null);\n        });\n    }\n    updateProgress(t = this.getCurrentTime()) {\n        return this.renderer.renderProgress(t / this.getDuration(), this.isPlaying()), t;\n    }\n    initTimerEvents() {\n        this.subscriptions.push(this.timer.on(\"tick\", ()=>{\n            if (!this.isSeeking()) {\n                const t = this.updateProgress();\n                this.emit(\"timeupdate\", t), this.emit(\"audioprocess\", t);\n            }\n        }));\n    }\n    initPlayerEvents() {\n        this.isPlaying() && (this.emit(\"play\"), this.timer.start()), this.mediaSubscriptions.push(this.onMediaEvent(\"timeupdate\", ()=>{\n            const t = this.updateProgress();\n            this.emit(\"timeupdate\", t);\n        }), this.onMediaEvent(\"play\", ()=>{\n            this.emit(\"play\"), this.timer.start();\n        }), this.onMediaEvent(\"pause\", ()=>{\n            this.emit(\"pause\"), this.timer.stop();\n        }), this.onMediaEvent(\"emptied\", ()=>{\n            this.timer.stop();\n        }), this.onMediaEvent(\"ended\", ()=>{\n            this.emit(\"finish\");\n        }), this.onMediaEvent(\"seeking\", ()=>{\n            this.emit(\"seeking\", this.getCurrentTime());\n        }), this.onMediaEvent(\"error\", (t)=>{\n            this.emit(\"error\", t.error);\n        }));\n    }\n    initRendererEvents() {\n        this.subscriptions.push(this.renderer.on(\"click\", (t, e)=>{\n            this.options.interact && (this.seekTo(t), this.emit(\"interaction\", t * this.getDuration()), this.emit(\"click\", t, e));\n        }), this.renderer.on(\"dblclick\", (t, e)=>{\n            this.emit(\"dblclick\", t, e);\n        }), this.renderer.on(\"scroll\", (t, e, i, s)=>{\n            const n = this.getDuration();\n            this.emit(\"scroll\", t * n, e * n, i, s);\n        }), this.renderer.on(\"render\", ()=>{\n            this.emit(\"redraw\");\n        }), this.renderer.on(\"rendered\", ()=>{\n            this.emit(\"redrawcomplete\");\n        }), this.renderer.on(\"dragstart\", (t)=>{\n            this.emit(\"dragstart\", t);\n        }), this.renderer.on(\"dragend\", (t)=>{\n            this.emit(\"dragend\", t);\n        }));\n        {\n            let t;\n            this.subscriptions.push(this.renderer.on(\"drag\", (e)=>{\n                if (!this.options.interact) return;\n                let i;\n                this.renderer.renderProgress(e), clearTimeout(t), this.isPlaying() ? i = 0 : !0 === this.options.dragToSeek ? i = 200 : \"object\" == typeof this.options.dragToSeek && void 0 !== this.options.dragToSeek && (i = this.options.dragToSeek.debounceTime), t = setTimeout(()=>{\n                    this.seekTo(e);\n                }, i), this.emit(\"interaction\", e * this.getDuration()), this.emit(\"drag\", e);\n            }));\n        }\n    }\n    initPlugins() {\n        var t;\n        (null === (t = this.options.plugins) || void 0 === t ? void 0 : t.length) && this.options.plugins.forEach((t)=>{\n            this.registerPlugin(t);\n        });\n    }\n    unsubscribePlayerEvents() {\n        this.mediaSubscriptions.forEach((t)=>t()), this.mediaSubscriptions = [];\n    }\n    setOptions(t) {\n        this.options = Object.assign({}, this.options, t), this.renderer.setOptions(this.options), t.audioRate && this.setPlaybackRate(t.audioRate), null != t.mediaControls && (this.getMediaElement().controls = t.mediaControls);\n    }\n    registerPlugin(t) {\n        return t._init(this), this.plugins.push(t), this.subscriptions.push(t.once(\"destroy\", ()=>{\n            this.plugins = this.plugins.filter((e)=>e !== t);\n        })), t;\n    }\n    getWrapper() {\n        return this.renderer.getWrapper();\n    }\n    getWidth() {\n        return this.renderer.getWidth();\n    }\n    getScroll() {\n        return this.renderer.getScroll();\n    }\n    setScroll(t) {\n        return this.renderer.setScroll(t);\n    }\n    setScrollTime(t) {\n        const e = t / this.getDuration();\n        this.renderer.setScrollPercentage(e);\n    }\n    getActivePlugins() {\n        return this.plugins;\n    }\n    loadAudio(e, s, n, r) {\n        return t(this, void 0, void 0, function*() {\n            var t;\n            if (this.emit(\"load\", e), !this.options.media && this.isPlaying() && this.pause(), this.decodedData = null, !s && !n) {\n                const i = this.options.fetchParams || {};\n                window.AbortController && !i.signal && (this.abortController = new AbortController, i.signal = null === (t = this.abortController) || void 0 === t ? void 0 : t.signal);\n                const n = (t)=>this.emit(\"loading\", t);\n                s = yield o.fetchBlob(e, n, i);\n            }\n            this.setSrc(e, s);\n            const a = yield new Promise((t)=>{\n                const e = r || this.getDuration();\n                e ? t(e) : this.mediaSubscriptions.push(this.onMediaEvent(\"loadedmetadata\", ()=>t(this.getDuration()), {\n                    once: !0\n                }));\n            });\n            if (!e && !s) {\n                const t = this.getMediaElement();\n                t instanceof d && (t.duration = a);\n            }\n            if (n) this.decodedData = i.createBuffer(n, a || 0);\n            else if (s) {\n                const t = yield s.arrayBuffer();\n                this.decodedData = yield i.decode(t, this.options.sampleRate);\n            }\n            this.decodedData && (this.emit(\"decode\", this.getDuration()), this.renderer.render(this.decodedData)), this.emit(\"ready\", this.getDuration());\n        });\n    }\n    load(e, i, s) {\n        return t(this, void 0, void 0, function*() {\n            try {\n                return yield this.loadAudio(e, void 0, i, s);\n            } catch (t) {\n                throw this.emit(\"error\", t), t;\n            }\n        });\n    }\n    loadBlob(e, i, s) {\n        return t(this, void 0, void 0, function*() {\n            try {\n                return yield this.loadAudio(\"\", e, i, s);\n            } catch (t) {\n                throw this.emit(\"error\", t), t;\n            }\n        });\n    }\n    zoom(t) {\n        if (!this.decodedData) throw new Error(\"No audio loaded\");\n        this.renderer.zoom(t), this.emit(\"zoom\", t);\n    }\n    getDecodedData() {\n        return this.decodedData;\n    }\n    exportPeaks({ channels: t = 2, maxLength: e = 8e3, precision: i = 1e4 } = {}) {\n        if (!this.decodedData) throw new Error(\"The audio has not been decoded yet\");\n        const s = Math.min(t, this.decodedData.numberOfChannels), n = [];\n        for(let t = 0; t < s; t++){\n            const s = this.decodedData.getChannelData(t), r = [], o = s.length / e;\n            for(let t = 0; t < e; t++){\n                const e = s.slice(Math.floor(t * o), Math.ceil((t + 1) * o));\n                let n = 0;\n                for(let t = 0; t < e.length; t++){\n                    const i = e[t];\n                    Math.abs(i) > Math.abs(n) && (n = i);\n                }\n                r.push(Math.round(n * i) / i);\n            }\n            n.push(r);\n        }\n        return n;\n    }\n    getDuration() {\n        let t = super.getDuration() || 0;\n        return 0 !== t && t !== 1 / 0 || !this.decodedData || (t = this.decodedData.duration), t;\n    }\n    toggleInteraction(t) {\n        this.options.interact = t;\n    }\n    setTime(t) {\n        super.setTime(t), this.updateProgress(t), this.emit(\"timeupdate\", t);\n    }\n    seekTo(t) {\n        const e = this.getDuration() * t;\n        this.setTime(e);\n    }\n    playPause() {\n        return t(this, void 0, void 0, function*() {\n            return this.isPlaying() ? this.pause() : this.play();\n        });\n    }\n    stop() {\n        this.pause(), this.setTime(0);\n    }\n    skip(t) {\n        this.setTime(this.getCurrentTime() + t);\n    }\n    empty() {\n        this.load(\"\", [\n            [\n                0\n            ]\n        ], .001);\n    }\n    setMediaElement(t) {\n        this.unsubscribePlayerEvents(), super.setMediaElement(t), this.initPlayerEvents();\n    }\n    exportImage() {\n        return t(this, arguments, void 0, function*(t = \"image/png\", e = 1, i = \"dataURL\") {\n            return this.renderer.exportImage(t, e, i);\n        });\n    }\n    destroy() {\n        var t;\n        this.emit(\"destroy\"), null === (t = this.abortController) || void 0 === t || t.abort(), this.plugins.forEach((t)=>t.destroy()), this.subscriptions.forEach((t)=>t()), this.unsubscribePlayerEvents(), this.timer.destroy(), this.renderer.destroy(), super.destroy();\n    }\n}\nu.BasePlugin = class extends e {\n    constructor(t){\n        super(), this.subscriptions = [], this.options = t;\n    }\n    onInit() {}\n    _init(t) {\n        this.wavesurfer = t, this.onInit();\n    }\n    destroy() {\n        this.emit(\"destroy\"), this.subscriptions.forEach((t)=>t());\n    }\n}, u.dom = r;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2F2ZXN1cmZlci5qcy9kaXN0L3dhdmVzdXJmZXIuZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxTQUFTQSxFQUFFQSxDQUFDLEVBQUNDLENBQUMsRUFBQ0MsQ0FBQyxFQUFDQyxDQUFDO0lBQUUsT0FBTyxJQUFJRCxDQUFBQSxLQUFJQSxDQUFBQSxJQUFFRSxPQUFNLENBQUMsRUFBSSxTQUFTQyxDQUFDLEVBQUNDLENBQUM7UUFBRSxTQUFTQyxFQUFFUCxDQUFDO1lBQUUsSUFBRztnQkFBQ1EsRUFBRUwsRUFBRU0sSUFBSSxDQUFDVDtZQUFHLEVBQUMsT0FBTUEsR0FBRTtnQkFBQ00sRUFBRU47WUFBRTtRQUFDO1FBQUMsU0FBU1UsRUFBRVYsQ0FBQztZQUFFLElBQUc7Z0JBQUNRLEVBQUVMLEVBQUVRLEtBQUssQ0FBQ1g7WUFBRyxFQUFDLE9BQU1BLEdBQUU7Z0JBQUNNLEVBQUVOO1lBQUU7UUFBQztRQUFDLFNBQVNRLEVBQUVSLENBQUM7WUFBRSxJQUFJQztZQUFFRCxFQUFFWSxJQUFJLEdBQUNQLEVBQUVMLEVBQUVhLEtBQUssSUFBRSxDQUFDWixJQUFFRCxFQUFFYSxLQUFLLEVBQUNaLGFBQWFDLElBQUVELElBQUUsSUFBSUMsRUFBRyxTQUFTRixDQUFDO2dCQUFFQSxFQUFFQztZQUFFLEVBQUUsRUFBR2EsSUFBSSxDQUFDUCxHQUFFRztRQUFFO1FBQUNGLEVBQUUsQ0FBQ0wsSUFBRUEsRUFBRVksS0FBSyxDQUFDZixHQUFFQyxLQUFHLEVBQUUsR0FBR1EsSUFBSTtJQUFHO0FBQUc7QUFBQyxjQUFZLE9BQU9PLG1CQUFpQkE7QUFBZ0IsTUFBTWY7SUFBRWdCLGFBQWE7UUFBQyxJQUFJLENBQUNDLFNBQVMsR0FBQyxDQUFDO0lBQUM7SUFBQ0MsR0FBR25CLENBQUMsRUFBQ0MsQ0FBQyxFQUFDQyxDQUFDLEVBQUM7UUFBQyxJQUFHLElBQUksQ0FBQ2dCLFNBQVMsQ0FBQ2xCLEVBQUUsSUFBRyxLQUFJLENBQUNrQixTQUFTLENBQUNsQixFQUFFLEdBQUMsSUFBSW9CLEdBQUUsR0FBRyxJQUFJLENBQUNGLFNBQVMsQ0FBQ2xCLEVBQUUsQ0FBQ3FCLEdBQUcsQ0FBQ3BCLElBQUcsUUFBTUMsSUFBRSxLQUFLLElBQUVBLEVBQUVvQixJQUFJLEVBQUM7WUFBQyxNQUFNcEIsSUFBRTtnQkFBSyxJQUFJLENBQUNxQixFQUFFLENBQUN2QixHQUFFRSxJQUFHLElBQUksQ0FBQ3FCLEVBQUUsQ0FBQ3ZCLEdBQUVDO1lBQUU7WUFBRSxPQUFPLElBQUksQ0FBQ2tCLEVBQUUsQ0FBQ25CLEdBQUVFLElBQUdBO1FBQUM7UUFBQyxPQUFNLElBQUksSUFBSSxDQUFDcUIsRUFBRSxDQUFDdkIsR0FBRUM7SUFBRTtJQUFDc0IsR0FBR3ZCLENBQUMsRUFBQ0MsQ0FBQyxFQUFDO1FBQUMsSUFBSUM7UUFBRSxTQUFRQSxDQUFBQSxJQUFFLElBQUksQ0FBQ2dCLFNBQVMsQ0FBQ2xCLEVBQUUsS0FBRyxLQUFLLE1BQUlFLEtBQUdBLEVBQUVzQixNQUFNLENBQUN2QjtJQUFFO0lBQUNxQixLQUFLdEIsQ0FBQyxFQUFDQyxDQUFDLEVBQUM7UUFBQyxPQUFPLElBQUksQ0FBQ2tCLEVBQUUsQ0FBQ25CLEdBQUVDLEdBQUU7WUFBQ3FCLE1BQUssQ0FBQztRQUFDO0lBQUU7SUFBQ0csUUFBTztRQUFDLElBQUksQ0FBQ1AsU0FBUyxHQUFDLENBQUM7SUFBQztJQUFDUSxLQUFLMUIsQ0FBQyxFQUFDLEdBQUdDLENBQUMsRUFBQztRQUFDLElBQUksQ0FBQ2lCLFNBQVMsQ0FBQ2xCLEVBQUUsSUFBRSxJQUFJLENBQUNrQixTQUFTLENBQUNsQixFQUFFLENBQUMyQixPQUFPLENBQUUzQixDQUFBQSxJQUFHQSxLQUFLQztJQUFJO0FBQUM7QUFBQyxNQUFNQyxJQUFFO0lBQUMwQixRQUFPLFNBQVMzQixDQUFDLEVBQUNDLENBQUM7UUFBRSxPQUFPRixFQUFFLElBQUksRUFBQyxLQUFLLEdBQUUsS0FBSyxHQUFHO1lBQVksTUFBTUEsSUFBRSxJQUFJNkIsYUFBYTtnQkFBQ0MsWUFBVzVCO1lBQUM7WUFBRyxPQUFPRixFQUFFK0IsZUFBZSxDQUFDOUIsR0FBRytCLE9BQU8sQ0FBRSxJQUFJaEMsRUFBRWlDLEtBQUs7UUFBSTtJQUFHO0lBQUVDLGNBQWEsU0FBU2xDLENBQUMsRUFBQ0MsQ0FBQztRQUFFLE9BQU0sWUFBVSxPQUFPRCxDQUFDLENBQUMsRUFBRSxJQUFHQSxDQUFBQSxJQUFFO1lBQUNBO1NBQUUsR0FBRSxTQUFTQSxDQUFDO1lBQUUsTUFBTUMsSUFBRUQsQ0FBQyxDQUFDLEVBQUU7WUFBQyxJQUFHQyxFQUFFa0MsSUFBSSxDQUFFbkMsQ0FBQUEsSUFBR0EsSUFBRSxLQUFHQSxJQUFFLENBQUMsSUFBSTtnQkFBQyxNQUFNRSxJQUFFRCxFQUFFbUMsTUFBTTtnQkFBQyxJQUFJakMsSUFBRTtnQkFBRSxJQUFJLElBQUlILElBQUUsR0FBRUEsSUFBRUUsR0FBRUYsSUFBSTtvQkFBQyxNQUFNRSxJQUFFbUMsS0FBS0MsR0FBRyxDQUFDckMsQ0FBQyxDQUFDRCxFQUFFO29CQUFFRSxJQUFFQyxLQUFJQSxDQUFBQSxJQUFFRCxDQUFBQTtnQkFBRTtnQkFBQyxLQUFJLE1BQU1ELEtBQUtELEVBQUUsSUFBSSxJQUFJQSxJQUFFLEdBQUVBLElBQUVFLEdBQUVGLElBQUlDLENBQUMsQ0FBQ0QsRUFBRSxJQUFFRztZQUFDO1FBQUMsRUFBRUgsSUFBRztZQUFDdUMsVUFBU3RDO1lBQUVtQyxRQUFPcEMsQ0FBQyxDQUFDLEVBQUUsQ0FBQ29DLE1BQU07WUFBQ04sWUFBVzlCLENBQUMsQ0FBQyxFQUFFLENBQUNvQyxNQUFNLEdBQUNuQztZQUFFdUMsa0JBQWlCeEMsRUFBRW9DLE1BQU07WUFBQ0ssZ0JBQWV4QyxDQUFBQSxJQUFHLFFBQU1ELElBQUUsS0FBSyxJQUFFQSxDQUFDLENBQUNDLEVBQUU7WUFBQ3lDLGlCQUFnQkMsWUFBWUMsU0FBUyxDQUFDRixlQUFlO1lBQUNHLGVBQWNGLFlBQVlDLFNBQVMsQ0FBQ0MsYUFBYTtRQUFBO0lBQUM7QUFBQztBQUFFLFNBQVMxQyxFQUFFSCxDQUFDLEVBQUNDLENBQUM7SUFBRSxNQUFNQyxJQUFFRCxFQUFFNkMsS0FBSyxHQUFDQyxTQUFTQyxlQUFlLENBQUMvQyxFQUFFNkMsS0FBSyxFQUFDOUMsS0FBRytDLFNBQVNFLGFBQWEsQ0FBQ2pEO0lBQUcsS0FBSSxNQUFLLENBQUNBLEdBQUVLLEVBQUUsSUFBRzZDLE9BQU9DLE9BQU8sQ0FBQ2xELEdBQUcsSUFBRyxlQUFhRCxHQUFFLEtBQUksTUFBSyxDQUFDQSxHQUFFSyxFQUFFLElBQUc2QyxPQUFPQyxPQUFPLENBQUNsRCxHQUFHLFlBQVUsT0FBT0ksSUFBRUgsRUFBRWtELFdBQVcsQ0FBQ0wsU0FBU00sY0FBYyxDQUFDaEQsTUFBSUgsRUFBRWtELFdBQVcsQ0FBQ2pELEVBQUVILEdBQUVLO1NBQVEsWUFBVUwsSUFBRWtELE9BQU9JLE1BQU0sQ0FBQ3BELEVBQUVxRCxLQUFLLEVBQUNsRCxLQUFHLGtCQUFnQkwsSUFBRUUsRUFBRXNELFdBQVcsR0FBQ25ELElBQUVILEVBQUV1RCxZQUFZLENBQUN6RCxHQUFFSyxFQUFFcUQsUUFBUTtJQUFJLE9BQU94RDtBQUFDO0FBQUMsU0FBU0csRUFBRUwsQ0FBQyxFQUFDQyxDQUFDLEVBQUNDLENBQUM7SUFBRSxNQUFNRyxJQUFFRixFQUFFSCxHQUFFQyxLQUFHLENBQUM7SUFBRyxPQUFPLFFBQU1DLEtBQUdBLEVBQUVrRCxXQUFXLENBQUMvQyxJQUFHQTtBQUFDO0FBQUMsSUFBSUMsSUFBRTRDLE9BQU9TLE1BQU0sQ0FBQztJQUFDQyxXQUFVO0lBQUtYLGVBQWM1QztJQUFFd0QsU0FBUXhEO0FBQUM7QUFBRyxNQUFNRSxJQUFFO0lBQUN1RCxXQUFVLFNBQVM3RCxDQUFDLEVBQUNDLENBQUMsRUFBQ0MsQ0FBQztRQUFFLE9BQU9ILEVBQUUsSUFBSSxFQUFDLEtBQUssR0FBRSxLQUFLLEdBQUc7WUFBWSxNQUFNSyxJQUFFLE1BQU0wRCxNQUFNOUQsR0FBRUU7WUFBRyxJQUFHRSxFQUFFMkQsTUFBTSxJQUFFLEtBQUksTUFBTSxJQUFJQyxNQUFNLENBQUMsZ0JBQWdCLEVBQUVoRSxFQUFFLEVBQUUsRUFBRUksRUFBRTJELE1BQU0sQ0FBQyxFQUFFLEVBQUUzRCxFQUFFNkQsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUFFLE9BQU8sU0FBU2pFLENBQUMsRUFBQ0MsQ0FBQztnQkFBRUYsRUFBRSxJQUFJLEVBQUMsS0FBSyxHQUFFLEtBQUssR0FBRztvQkFBWSxJQUFHLENBQUNDLEVBQUVrRSxJQUFJLElBQUUsQ0FBQ2xFLEVBQUVtRSxPQUFPLEVBQUM7b0JBQU8sTUFBTWpFLElBQUVGLEVBQUVrRSxJQUFJLENBQUNFLFNBQVMsSUFBR2hFLElBQUVpRSxPQUFPckUsRUFBRW1FLE9BQU8sQ0FBQ0csR0FBRyxDQUFDLHNCQUFvQjtvQkFBRSxJQUFJakUsSUFBRTtvQkFBRSxNQUFNQyxJQUFFTixDQUFBQSxJQUFHRCxFQUFFLElBQUksRUFBQyxLQUFLLEdBQUUsS0FBSyxHQUFHOzRCQUFZTSxLQUFHLENBQUMsUUFBTUwsSUFBRSxLQUFLLElBQUVBLEVBQUVtQyxNQUFNLEtBQUc7NEJBQUUsTUFBTXBDLElBQUVxQyxLQUFLbUMsS0FBSyxDQUFDbEUsSUFBRUQsSUFBRTs0QkFBS0gsRUFBRUY7d0JBQUUsSUFBSVUsSUFBRSxJQUFJVixFQUFFLElBQUksRUFBQyxLQUFLLEdBQUUsS0FBSyxHQUFHOzRCQUFZLElBQUlBOzRCQUFFLElBQUc7Z0NBQUNBLElBQUUsTUFBTUcsRUFBRXNFLElBQUk7NEJBQUUsRUFBQyxPQUFNekUsR0FBRTtnQ0FBQzs0QkFBTTs0QkFBQ0EsRUFBRVksSUFBSSxJQUFHTCxDQUFBQSxFQUFFUCxFQUFFYSxLQUFLLEdBQUUsTUFBTUgsR0FBRTt3QkFBRTtvQkFBSUE7Z0JBQUc7WUFBRyxFQUFFTCxFQUFFcUUsS0FBSyxJQUFHeEUsSUFBR0csRUFBRXNFLElBQUk7UUFBRTtJQUFHO0FBQUM7QUFBRSxNQUFNakUsVUFBVVQ7SUFBRWdCLFlBQVlqQixDQUFDLENBQUM7UUFBQyxLQUFLLElBQUcsSUFBSSxDQUFDNEUsZUFBZSxHQUFDLENBQUMsR0FBRTVFLEVBQUU2RSxLQUFLLEdBQUUsS0FBSSxDQUFDQSxLQUFLLEdBQUM3RSxFQUFFNkUsS0FBSyxFQUFDLElBQUksQ0FBQ0QsZUFBZSxHQUFDLENBQUMsS0FBRyxJQUFJLENBQUNDLEtBQUssR0FBQzlCLFNBQVNFLGFBQWEsQ0FBQyxVQUFTakQsRUFBRThFLGFBQWEsSUFBRyxLQUFJLENBQUNELEtBQUssQ0FBQ0UsUUFBUSxHQUFDLENBQUMsSUFBRy9FLEVBQUVnRixRQUFRLElBQUcsS0FBSSxDQUFDSCxLQUFLLENBQUNHLFFBQVEsR0FBQyxDQUFDLElBQUcsUUFBTWhGLEVBQUVpRixZQUFZLElBQUUsSUFBSSxDQUFDQyxZQUFZLENBQUMsV0FBVztZQUFLLFFBQU1sRixFQUFFaUYsWUFBWSxJQUFHLEtBQUksQ0FBQ0osS0FBSyxDQUFDSSxZQUFZLEdBQUNqRixFQUFFaUYsWUFBWTtRQUFDLEdBQUc7WUFBQzNELE1BQUssQ0FBQztRQUFDO0lBQUU7SUFBQzRELGFBQWFsRixDQUFDLEVBQUNDLENBQUMsRUFBQ0MsQ0FBQyxFQUFDO1FBQUMsT0FBTyxJQUFJLENBQUMyRSxLQUFLLENBQUNNLGdCQUFnQixDQUFDbkYsR0FBRUMsR0FBRUMsSUFBRyxJQUFJLElBQUksQ0FBQzJFLEtBQUssQ0FBQ08sbUJBQW1CLENBQUNwRixHQUFFQyxHQUFFQztJQUFFO0lBQUNtRixTQUFRO1FBQUMsT0FBTyxJQUFJLENBQUNSLEtBQUssQ0FBQ1MsVUFBVSxJQUFFLElBQUksQ0FBQ1QsS0FBSyxDQUFDVSxHQUFHLElBQUU7SUFBRTtJQUFDQyxZQUFXO1FBQUMsTUFBTXhGLElBQUUsSUFBSSxDQUFDcUYsTUFBTTtRQUFHckYsRUFBRXlGLFVBQVUsQ0FBQyxZQUFVQyxJQUFJQyxlQUFlLENBQUMzRjtJQUFFO0lBQUM0RixZQUFZNUYsQ0FBQyxFQUFDO1FBQUMsT0FBTSxPQUFLLElBQUksQ0FBQzZFLEtBQUssQ0FBQ2UsV0FBVyxDQUFDNUY7SUFBRTtJQUFDNkYsT0FBTzdGLENBQUMsRUFBQ0MsQ0FBQyxFQUFDO1FBQUMsTUFBTUMsSUFBRSxJQUFJLENBQUNtRixNQUFNO1FBQUcsSUFBR3JGLEtBQUdFLE1BQUlGLEdBQUU7UUFBTyxJQUFJLENBQUN3RixTQUFTO1FBQUcsTUFBTXJGLElBQUVGLGFBQWE2RixRQUFPLEtBQUksQ0FBQ0YsV0FBVyxDQUFDM0YsRUFBRThGLElBQUksS0FBRyxDQUFDL0YsQ0FBQUEsSUFBRzBGLElBQUlNLGVBQWUsQ0FBQy9GLEtBQUdEO1FBQUUsSUFBRztZQUFDLElBQUksQ0FBQzZFLEtBQUssQ0FBQ1UsR0FBRyxHQUFDcEY7UUFBQyxFQUFDLE9BQU1GLEdBQUU7WUFBQyxJQUFJLENBQUM0RSxLQUFLLENBQUNVLEdBQUcsR0FBQ3ZGO1FBQUM7SUFBQztJQUFDaUcsVUFBUztRQUFDLElBQUksQ0FBQ3BCLEtBQUssQ0FBQ3FCLEtBQUssSUFBRyxJQUFJLENBQUN0QixlQUFlLElBQUcsS0FBSSxDQUFDQyxLQUFLLENBQUNzQixNQUFNLElBQUcsSUFBSSxDQUFDWCxTQUFTLElBQUcsSUFBSSxDQUFDWCxLQUFLLENBQUNVLEdBQUcsR0FBQyxJQUFHLElBQUksQ0FBQ1YsS0FBSyxDQUFDdUIsSUFBSSxFQUFDO0lBQUU7SUFBQ0MsZ0JBQWdCckcsQ0FBQyxFQUFDO1FBQUMsSUFBSSxDQUFDNkUsS0FBSyxHQUFDN0U7SUFBQztJQUFDc0csT0FBTTtRQUFDLE9BQU90RyxFQUFFLElBQUksRUFBQyxLQUFLLEdBQUUsS0FBSyxHQUFHO1lBQVksT0FBTyxJQUFJLENBQUM2RSxLQUFLLENBQUN5QixJQUFJO1FBQUU7SUFBRztJQUFDSixRQUFPO1FBQUMsSUFBSSxDQUFDckIsS0FBSyxDQUFDcUIsS0FBSztJQUFFO0lBQUNLLFlBQVc7UUFBQyxPQUFNLENBQUMsSUFBSSxDQUFDMUIsS0FBSyxDQUFDMkIsTUFBTSxJQUFFLENBQUMsSUFBSSxDQUFDM0IsS0FBSyxDQUFDNEIsS0FBSztJQUFBO0lBQUNDLFFBQVExRyxDQUFDLEVBQUM7UUFBQyxJQUFJLENBQUM2RSxLQUFLLENBQUM4QixXQUFXLEdBQUMzRztJQUFDO0lBQUM0RyxjQUFhO1FBQUMsT0FBTyxJQUFJLENBQUMvQixLQUFLLENBQUN0QyxRQUFRO0lBQUE7SUFBQ3NFLGlCQUFnQjtRQUFDLE9BQU8sSUFBSSxDQUFDaEMsS0FBSyxDQUFDOEIsV0FBVztJQUFBO0lBQUNHLFlBQVc7UUFBQyxPQUFPLElBQUksQ0FBQ2pDLEtBQUssQ0FBQ2tDLE1BQU07SUFBQTtJQUFDQyxVQUFVaEgsQ0FBQyxFQUFDO1FBQUMsSUFBSSxDQUFDNkUsS0FBSyxDQUFDa0MsTUFBTSxHQUFDL0c7SUFBQztJQUFDaUgsV0FBVTtRQUFDLE9BQU8sSUFBSSxDQUFDcEMsS0FBSyxDQUFDcUMsS0FBSztJQUFBO0lBQUNDLFNBQVNuSCxDQUFDLEVBQUM7UUFBQyxJQUFJLENBQUM2RSxLQUFLLENBQUNxQyxLQUFLLEdBQUNsSDtJQUFDO0lBQUNvSCxrQkFBaUI7UUFBQyxPQUFPLElBQUksQ0FBQ3ZDLEtBQUssQ0FBQ0ksWUFBWTtJQUFBO0lBQUNvQyxZQUFXO1FBQUMsT0FBTyxJQUFJLENBQUN4QyxLQUFLLENBQUN5QyxPQUFPO0lBQUE7SUFBQ0MsZ0JBQWdCdkgsQ0FBQyxFQUFDQyxDQUFDLEVBQUM7UUFBQyxRQUFNQSxLQUFJLEtBQUksQ0FBQzRFLEtBQUssQ0FBQzJDLGNBQWMsR0FBQ3ZILENBQUFBLEdBQUcsSUFBSSxDQUFDNEUsS0FBSyxDQUFDSSxZQUFZLEdBQUNqRjtJQUFDO0lBQUN5SCxrQkFBaUI7UUFBQyxPQUFPLElBQUksQ0FBQzVDLEtBQUs7SUFBQTtJQUFDNkMsVUFBVTFILENBQUMsRUFBQztRQUFDLE9BQU8sSUFBSSxDQUFDNkUsS0FBSyxDQUFDNkMsU0FBUyxDQUFDMUg7SUFBRTtBQUFDO0FBQUMsTUFBTVEsVUFBVVA7SUFBRWdCLFlBQVlqQixDQUFDLEVBQUNDLENBQUMsQ0FBQztRQUFDLEtBQUssSUFBRyxJQUFJLENBQUMwSCxRQUFRLEdBQUMsRUFBRSxFQUFDLElBQUksQ0FBQ0MsWUFBWSxHQUFDLENBQUMsR0FBRSxJQUFJLENBQUNDLFNBQVMsR0FBQyxNQUFLLElBQUksQ0FBQ0MsY0FBYyxHQUFDLE1BQUssSUFBSSxDQUFDQyxrQkFBa0IsR0FBQyxHQUFFLElBQUksQ0FBQ0MsVUFBVSxHQUFDLENBQUMsR0FBRSxJQUFJLENBQUNDLGFBQWEsR0FBQyxFQUFFLEVBQUMsSUFBSSxDQUFDQSxhQUFhLEdBQUMsRUFBRSxFQUFDLElBQUksQ0FBQ0MsT0FBTyxHQUFDbEk7UUFBRSxNQUFNRSxJQUFFLElBQUksQ0FBQ2lJLDBCQUEwQixDQUFDbkksRUFBRW9JLFNBQVM7UUFBRSxJQUFJLENBQUNDLE1BQU0sR0FBQ25JO1FBQUUsTUFBSyxDQUFDQyxHQUFFRSxFQUFFLEdBQUMsSUFBSSxDQUFDaUksUUFBUTtRQUFHcEksRUFBRWtELFdBQVcsQ0FBQ2pELElBQUcsSUFBSSxDQUFDaUksU0FBUyxHQUFDakksR0FBRSxJQUFJLENBQUNvSSxlQUFlLEdBQUNsSSxFQUFFbUksYUFBYSxDQUFDLFlBQVcsSUFBSSxDQUFDQyxPQUFPLEdBQUNwSSxFQUFFbUksYUFBYSxDQUFDLGFBQVksSUFBSSxDQUFDRSxhQUFhLEdBQUNySSxFQUFFbUksYUFBYSxDQUFDLGNBQWEsSUFBSSxDQUFDRyxlQUFlLEdBQUN0SSxFQUFFbUksYUFBYSxDQUFDLGNBQWEsSUFBSSxDQUFDSSxNQUFNLEdBQUN2SSxFQUFFbUksYUFBYSxDQUFDLFlBQVd2SSxLQUFHSSxFQUFFK0MsV0FBVyxDQUFDbkQsSUFBRyxJQUFJLENBQUM0SSxVQUFVO0lBQUU7SUFBQ1YsMkJBQTJCbkksQ0FBQyxFQUFDO1FBQUMsSUFBSUM7UUFBRSxJQUFHLFlBQVUsT0FBT0QsSUFBRUMsSUFBRThDLFNBQVN5RixhQUFhLENBQUN4SSxLQUFHQSxhQUFhOEksZUFBYzdJLENBQUFBLElBQUVELENBQUFBLEdBQUcsQ0FBQ0MsR0FBRSxNQUFNLElBQUlnRSxNQUFNO1FBQXVCLE9BQU9oRTtJQUFDO0lBQUM0SSxhQUFZO1FBQUMsTUFBTTdJLElBQUVBLENBQUFBO1lBQUksTUFBTUMsSUFBRSxJQUFJLENBQUN3SSxPQUFPLENBQUNNLHFCQUFxQixJQUFHN0ksSUFBRUYsRUFBRWdKLE9BQU8sR0FBQy9JLEVBQUVnSixJQUFJLEVBQUM5SSxJQUFFSCxFQUFFa0osT0FBTyxHQUFDakosRUFBRWtKLEdBQUc7WUFBQyxPQUFNO2dCQUFDakosSUFBRUQsRUFBRW1KLEtBQUs7Z0JBQUNqSixJQUFFRixFQUFFb0osTUFBTTthQUFDO1FBQUE7UUFBRSxJQUFHLElBQUksQ0FBQ1osT0FBTyxDQUFDdEQsZ0JBQWdCLENBQUMsU0FBU2xGLENBQUFBO1lBQUksTUFBSyxDQUFDQyxHQUFFQyxFQUFFLEdBQUNILEVBQUVDO1lBQUcsSUFBSSxDQUFDeUIsSUFBSSxDQUFDLFNBQVF4QixHQUFFQztRQUFFLElBQUksSUFBSSxDQUFDc0ksT0FBTyxDQUFDdEQsZ0JBQWdCLENBQUMsWUFBWWxGLENBQUFBO1lBQUksTUFBSyxDQUFDQyxHQUFFQyxFQUFFLEdBQUNILEVBQUVDO1lBQUcsSUFBSSxDQUFDeUIsSUFBSSxDQUFDLFlBQVd4QixHQUFFQztRQUFFLElBQUksQ0FBQyxNQUFJLElBQUksQ0FBQytILE9BQU8sQ0FBQ29CLFVBQVUsSUFBRSxZQUFVLE9BQU8sSUFBSSxDQUFDcEIsT0FBTyxDQUFDb0IsVUFBVSxJQUFFLElBQUksQ0FBQ0MsUUFBUSxJQUFHLElBQUksQ0FBQ2hCLGVBQWUsQ0FBQ3BELGdCQUFnQixDQUFDLFVBQVU7WUFBSyxNQUFLLEVBQUNxRSxZQUFXeEosQ0FBQyxFQUFDeUosYUFBWXhKLENBQUMsRUFBQ3lKLGFBQVl4SixDQUFDLEVBQUMsR0FBQyxJQUFJLENBQUNxSSxlQUFlLEVBQUNwSSxJQUFFSCxJQUFFQyxHQUFFSSxJQUFFLENBQUNMLElBQUVFLENBQUFBLElBQUdEO1lBQUUsSUFBSSxDQUFDeUIsSUFBSSxDQUFDLFVBQVN2QixHQUFFRSxHQUFFTCxHQUFFQSxJQUFFRTtRQUFFLElBQUksY0FBWSxPQUFPeUosZ0JBQWU7WUFBQyxNQUFNM0osSUFBRSxJQUFJLENBQUM0SixXQUFXLENBQUM7WUFBSyxJQUFJLENBQUM5QixjQUFjLEdBQUMsSUFBSTZCLGVBQWdCO2dCQUFLM0osSUFBSWMsSUFBSSxDQUFFLElBQUksSUFBSSxDQUFDK0ksaUJBQWlCLElBQUtDLEtBQUssQ0FBRSxLQUFLO1lBQUcsSUFBSSxJQUFJLENBQUNoQyxjQUFjLENBQUNpQyxPQUFPLENBQUMsSUFBSSxDQUFDeEIsZUFBZTtRQUFDO0lBQUM7SUFBQ3NCLG9CQUFtQjtRQUFDLE1BQU03SixJQUFFLElBQUksQ0FBQ3FJLE1BQU0sQ0FBQ3FCLFdBQVc7UUFBQzFKLE1BQUksSUFBSSxDQUFDK0gsa0JBQWtCLElBQUUsV0FBUyxJQUFJLENBQUNHLE9BQU8sQ0FBQ21CLE1BQU0sSUFBRyxLQUFJLENBQUN0QixrQkFBa0IsR0FBQy9ILEdBQUUsSUFBSSxDQUFDZ0ssUUFBUSxFQUFDO0lBQUU7SUFBQ1QsV0FBVTtRQUFDLElBQUksQ0FBQ3RCLGFBQWEsQ0FBQ2dDLElBQUksQ0FBQyxTQUFTakssQ0FBQyxFQUFDQyxDQUFDLEVBQUNDLENBQUMsRUFBQ0MsQ0FBQyxFQUFDRSxJQUFFLENBQUMsRUFBQ0MsSUFBRSxDQUFDLEVBQUNDLElBQUUsR0FBRztZQUFFLElBQUcsQ0FBQ1AsR0FBRSxPQUFNLEtBQUs7WUFBRSxNQUFNVSxJQUFFd0osV0FBVyxxQkFBcUJDLE9BQU87WUFBQyxJQUFJM0osSUFBRSxLQUFLO1lBQUUsTUFBTTRKLElBQUVBLENBQUFBO2dCQUFJLElBQUdBLEVBQUVDLE1BQU0sS0FBRy9KLEdBQUU7Z0JBQU84SixFQUFFRSxjQUFjLElBQUdGLEVBQUVHLGVBQWU7Z0JBQUcsSUFBSUMsSUFBRUosRUFBRXBCLE9BQU8sRUFBQ3lCLElBQUVMLEVBQUVsQixPQUFPLEVBQUN3QixJQUFFLENBQUM7Z0JBQUUsTUFBTUMsSUFBRUMsS0FBS0MsR0FBRyxJQUFHQyxJQUFFM0ssQ0FBQUE7b0JBQUksSUFBR0EsRUFBRW1LLGNBQWMsSUFBR25LLEVBQUVvSyxlQUFlLElBQUc3SixLQUFHa0ssS0FBS0MsR0FBRyxLQUFHRixJQUFFcEssR0FBRTtvQkFBTyxNQUFNRCxJQUFFSCxFQUFFNkksT0FBTyxFQUFDeEksSUFBRUwsRUFBRStJLE9BQU8sRUFBQ2tCLElBQUU5SixJQUFFa0ssR0FBRU0sSUFBRXRLLElBQUVpSztvQkFBRSxJQUFHQyxLQUFHckksS0FBS0MsR0FBRyxDQUFDOEgsS0FBRy9KLEtBQUdnQyxLQUFLQyxHQUFHLENBQUN3SSxLQUFHekssR0FBRTt3QkFBQyxNQUFNRixJQUFFSCxFQUFFK0kscUJBQXFCLElBQUcsRUFBQ0UsTUFBSzVJLENBQUMsRUFBQzhJLEtBQUk1SSxDQUFDLEVBQUMsR0FBQ0o7d0JBQUV1SyxLQUFJLFNBQU14SyxLQUFHQSxFQUFFc0ssSUFBRW5LLEdBQUVvSyxJQUFFbEssSUFBR21LLElBQUUsQ0FBQyxJQUFHekssRUFBRW1LLEdBQUVVLEdBQUV4SyxJQUFFRCxHQUFFRyxJQUFFRCxJQUFHaUssSUFBRWxLLEdBQUVtSyxJQUFFaks7b0JBQUM7Z0JBQUMsR0FBRXVLLElBQUU5SyxDQUFBQTtvQkFBSSxJQUFHeUssR0FBRTt3QkFBQyxNQUFNeEssSUFBRUQsRUFBRStJLE9BQU8sRUFBQzNJLElBQUVKLEVBQUVpSixPQUFPLEVBQUM1SSxJQUFFTixFQUFFK0kscUJBQXFCLElBQUcsRUFBQ0UsTUFBSzFJLENBQUMsRUFBQzRJLEtBQUl6SSxDQUFDLEVBQUMsR0FBQ0o7d0JBQUUsUUFBTUgsS0FBR0EsRUFBRUQsSUFBRUssR0FBRUYsSUFBRUs7b0JBQUU7b0JBQUNGO2dCQUFHLEdBQUV3SyxJQUFFaEwsQ0FBQUE7b0JBQUlBLEVBQUVpTCxhQUFhLElBQUVqTCxFQUFFaUwsYUFBYSxLQUFHbEksU0FBU21JLGVBQWUsSUFBRUgsRUFBRS9LO2dCQUFFLEdBQUVtTCxJQUFFbkwsQ0FBQUE7b0JBQUkwSyxLQUFJMUssQ0FBQUEsRUFBRXVLLGVBQWUsSUFBR3ZLLEVBQUVzSyxjQUFjLEVBQUM7Z0JBQUUsR0FBRWMsSUFBRXBMLENBQUFBO29CQUFJMEssS0FBRzFLLEVBQUVzSyxjQUFjO2dCQUFFO2dCQUFFdkgsU0FBU29DLGdCQUFnQixDQUFDLGVBQWMyRixJQUFHL0gsU0FBU29DLGdCQUFnQixDQUFDLGFBQVk0RixJQUFHaEksU0FBU29DLGdCQUFnQixDQUFDLGNBQWE2RixJQUFHakksU0FBU29DLGdCQUFnQixDQUFDLGlCQUFnQjZGLElBQUdqSSxTQUFTb0MsZ0JBQWdCLENBQUMsYUFBWWlHLEdBQUU7b0JBQUNDLFNBQVEsQ0FBQztnQkFBQyxJQUFHdEksU0FBU29DLGdCQUFnQixDQUFDLFNBQVFnRyxHQUFFO29CQUFDRyxTQUFRLENBQUM7Z0JBQUMsSUFBRzlLLElBQUU7b0JBQUt1QyxTQUFTcUMsbUJBQW1CLENBQUMsZUFBYzBGLElBQUcvSCxTQUFTcUMsbUJBQW1CLENBQUMsYUFBWTJGLElBQUdoSSxTQUFTcUMsbUJBQW1CLENBQUMsY0FBYTRGLElBQUdqSSxTQUFTcUMsbUJBQW1CLENBQUMsaUJBQWdCNEYsSUFBR2pJLFNBQVNxQyxtQkFBbUIsQ0FBQyxhQUFZZ0csSUFBR0csV0FBWTt3QkFBS3hJLFNBQVNxQyxtQkFBbUIsQ0FBQyxTQUFRK0YsR0FBRTs0QkFBQ0csU0FBUSxDQUFDO3dCQUFDO29CQUFFLEdBQUc7Z0JBQUc7WUFBQztZQUFFLE9BQU90TCxFQUFFbUYsZ0JBQWdCLENBQUMsZUFBY2lGLElBQUc7Z0JBQUs1SixLQUFJUixFQUFFb0YsbUJBQW1CLENBQUMsZUFBY2dGO1lBQUU7UUFBQyxFQUFFLElBQUksQ0FBQzNCLE9BQU8sRUFBRSxDQUFDekksR0FBRUMsR0FBRUM7WUFBSyxJQUFJLENBQUN3QixJQUFJLENBQUMsUUFBT1csS0FBS21KLEdBQUcsQ0FBQyxHQUFFbkosS0FBS29KLEdBQUcsQ0FBQyxHQUFFdkwsSUFBRSxJQUFJLENBQUN1SSxPQUFPLENBQUNNLHFCQUFxQixHQUFHSyxLQUFLO1FBQUcsR0FBSXBKLENBQUFBO1lBQUksSUFBSSxDQUFDZ0ksVUFBVSxHQUFDLENBQUMsR0FBRSxJQUFJLENBQUN0RyxJQUFJLENBQUMsYUFBWVcsS0FBS21KLEdBQUcsQ0FBQyxHQUFFbkosS0FBS29KLEdBQUcsQ0FBQyxHQUFFekwsSUFBRSxJQUFJLENBQUN5SSxPQUFPLENBQUNNLHFCQUFxQixHQUFHSyxLQUFLO1FBQUcsR0FBSXBKLENBQUFBO1lBQUksSUFBSSxDQUFDZ0ksVUFBVSxHQUFDLENBQUMsR0FBRSxJQUFJLENBQUN0RyxJQUFJLENBQUMsV0FBVVcsS0FBS21KLEdBQUcsQ0FBQyxHQUFFbkosS0FBS29KLEdBQUcsQ0FBQyxHQUFFekwsSUFBRSxJQUFJLENBQUN5SSxPQUFPLENBQUNNLHFCQUFxQixHQUFHSyxLQUFLO1FBQUc7SUFBSTtJQUFDc0MsVUFBVTFMLENBQUMsRUFBQ0MsQ0FBQyxFQUFDO1FBQUMsSUFBSUM7UUFBRSxNQUFNQyxJQUFFLENBQUMsU0FBUUQsQ0FBQUEsSUFBRSxJQUFJLENBQUMySCxTQUFTLEtBQUcsS0FBSyxNQUFJM0gsSUFBRSxLQUFLLElBQUVBLEVBQUVzQyxnQkFBZ0IsS0FBRztRQUFFLElBQUcsUUFBTXhDLEdBQUUsT0FBTztRQUFJLElBQUcsQ0FBQzJMLE1BQU1ySCxPQUFPdEUsS0FBSSxPQUFPc0UsT0FBT3RFO1FBQUcsSUFBRyxXQUFTQSxHQUFFO1lBQUMsTUFBTUEsSUFBRSxJQUFJLENBQUNxSSxNQUFNLENBQUN1RCxZQUFZLElBQUU7WUFBSSxPQUFNLENBQUMsUUFBTTNMLElBQUUsS0FBSyxJQUFFQSxFQUFFNEwsS0FBSyxDQUFFN0wsQ0FBQUEsSUFBRyxDQUFDQSxFQUFFOEwsT0FBTyxDQUFDLElBQUc5TCxJQUFFRyxJQUFFSDtRQUFDO1FBQUMsT0FBTztJQUFHO0lBQUNzSSxXQUFVO1FBQUMsTUFBTXRJLElBQUUrQyxTQUFTRSxhQUFhLENBQUMsUUFBT2hELElBQUVELEVBQUUrTCxZQUFZLENBQUM7WUFBQ0MsTUFBSztRQUFNLElBQUc5TCxJQUFFLElBQUksQ0FBQ2dJLE9BQU8sQ0FBQytELFFBQVEsSUFBRSxZQUFVLE9BQU8sSUFBSSxDQUFDL0QsT0FBTyxDQUFDK0QsUUFBUSxHQUFDLElBQUksQ0FBQy9ELE9BQU8sQ0FBQytELFFBQVEsQ0FBQ0MsT0FBTyxDQUFDLE1BQUssTUFBSTtRQUFHLE9BQU9qTSxFQUFFa00sU0FBUyxHQUFDLENBQUMsY0FBYyxFQUFFak0sSUFBRSxDQUFDLFFBQVEsRUFBRUEsRUFBRSxDQUFDLENBQUMsR0FBQyxHQUFHLDZ0QkFBNnRCLEVBQUUsSUFBSSxDQUFDd0wsU0FBUyxDQUFDLElBQUksQ0FBQ3hELE9BQU8sQ0FBQ21CLE1BQU0sRUFBQyxJQUFJLENBQUNuQixPQUFPLENBQUNrRSxhQUFhLEVBQUUsc2pDQUFzakMsQ0FBQyxFQUFDO1lBQUNwTTtZQUFFQztTQUFFO0lBQUE7SUFBQ29NLFdBQVdyTSxDQUFDLEVBQUM7UUFBQyxJQUFHLElBQUksQ0FBQ2tJLE9BQU8sQ0FBQ0UsU0FBUyxLQUFHcEksRUFBRW9JLFNBQVMsRUFBQztZQUFDLE1BQU1uSSxJQUFFLElBQUksQ0FBQ2tJLDBCQUEwQixDQUFDbkksRUFBRW9JLFNBQVM7WUFBRW5JLEVBQUVtRCxXQUFXLENBQUMsSUFBSSxDQUFDZ0YsU0FBUyxHQUFFLElBQUksQ0FBQ0MsTUFBTSxHQUFDcEk7UUFBQztRQUFDLENBQUMsTUFBSUQsRUFBRXNKLFVBQVUsSUFBRSxZQUFVLE9BQU8sSUFBSSxDQUFDcEIsT0FBTyxDQUFDb0IsVUFBVSxJQUFFLElBQUksQ0FBQ0MsUUFBUSxJQUFHLElBQUksQ0FBQ3JCLE9BQU8sR0FBQ2xJLEdBQUUsSUFBSSxDQUFDZ0ssUUFBUTtJQUFFO0lBQUNzQyxhQUFZO1FBQUMsT0FBTyxJQUFJLENBQUM3RCxPQUFPO0lBQUE7SUFBQzhELFdBQVU7UUFBQyxPQUFPLElBQUksQ0FBQ2hFLGVBQWUsQ0FBQ21CLFdBQVc7SUFBQTtJQUFDOEMsWUFBVztRQUFDLE9BQU8sSUFBSSxDQUFDakUsZUFBZSxDQUFDaUIsVUFBVTtJQUFBO0lBQUNpRCxVQUFVek0sQ0FBQyxFQUFDO1FBQUMsSUFBSSxDQUFDdUksZUFBZSxDQUFDaUIsVUFBVSxHQUFDeEo7SUFBQztJQUFDME0sb0JBQW9CMU0sQ0FBQyxFQUFDO1FBQUMsTUFBSyxFQUFDeUosYUFBWXhKLENBQUMsRUFBQyxHQUFDLElBQUksQ0FBQ3NJLGVBQWUsRUFBQ3JJLElBQUVELElBQUVEO1FBQUUsSUFBSSxDQUFDeU0sU0FBUyxDQUFDdk07SUFBRTtJQUFDK0YsVUFBUztRQUFDLElBQUlqRyxHQUFFQztRQUFFLElBQUksQ0FBQ2dJLGFBQWEsQ0FBQ3RHLE9BQU8sQ0FBRTNCLENBQUFBLElBQUdBLE1BQU0sSUFBSSxDQUFDb0ksU0FBUyxDQUFDakMsTUFBTSxJQUFHLFNBQVFuRyxDQUFBQSxJQUFFLElBQUksQ0FBQzhILGNBQWMsS0FBRyxLQUFLLE1BQUk5SCxLQUFHQSxFQUFFMk0sVUFBVSxJQUFHLFNBQVExTSxDQUFBQSxJQUFFLElBQUksQ0FBQzJNLG1CQUFtQixLQUFHLEtBQUssTUFBSTNNLEtBQUdBLEVBQUU0TSxJQUFJLENBQUMsSUFBSTtJQUFDO0lBQUNqRCxZQUFZNUosSUFBRSxFQUFFLEVBQUM7UUFBQyxJQUFJQyxHQUFFQztRQUFFLE1BQU1DLElBQUU7WUFBS0YsS0FBRzZNLGFBQWE3TSxJQUFHQyxLQUFHQTtRQUFHO1FBQUUsT0FBTyxJQUFJLENBQUN5SCxRQUFRLENBQUNzQyxJQUFJLENBQUM5SixJQUFHLElBQUksSUFBSUMsUUFBUyxDQUFDQyxHQUFFQztnQkFBS0gsS0FBSUQsSUFBRUksR0FBRUwsSUFBRXNMLFdBQVk7b0JBQUt0TCxJQUFFLEtBQUssR0FBRUMsSUFBRSxLQUFLLEdBQUVHO2dCQUFHLEdBQUdMO1lBQUU7SUFBRztJQUFDK00sbUJBQW1CL00sQ0FBQyxFQUFDO1FBQUMsSUFBRyxDQUFDZ04sTUFBTUMsT0FBTyxDQUFDak4sSUFBRyxPQUFPQSxLQUFHO1FBQUcsSUFBR0EsRUFBRW9DLE1BQU0sR0FBQyxHQUFFLE9BQU9wQyxDQUFDLENBQUMsRUFBRSxJQUFFO1FBQUcsTUFBTUMsSUFBRThDLFNBQVNFLGFBQWEsQ0FBQyxXQUFVL0MsSUFBRUQsRUFBRWlOLFVBQVUsQ0FBQyxPQUFNL00sSUFBRUYsRUFBRW9KLE1BQU0sR0FBRThELENBQUFBLE9BQU9DLGdCQUFnQixJQUFFLElBQUcvTSxJQUFFSCxFQUFFbU4sb0JBQW9CLENBQUMsR0FBRSxHQUFFLEdBQUVsTixJQUFHRyxJQUFFLElBQUdOLENBQUFBLEVBQUVvQyxNQUFNLEdBQUM7UUFBRyxPQUFPcEMsRUFBRTJCLE9BQU8sQ0FBRSxDQUFDM0IsR0FBRUM7WUFBSyxNQUFNQyxJQUFFRCxJQUFFSztZQUFFRCxFQUFFaU4sWUFBWSxDQUFDcE4sR0FBRUY7UUFBRSxJQUFJSztJQUFDO0lBQUNrTixnQkFBZTtRQUFDLE9BQU9sTCxLQUFLbUosR0FBRyxDQUFDLEdBQUUyQixPQUFPQyxnQkFBZ0IsSUFBRTtJQUFFO0lBQUNJLGtCQUFrQnhOLENBQUMsRUFBQ0MsQ0FBQyxFQUFDQyxDQUFDLEVBQUNDLENBQUMsRUFBQztRQUFDLE1BQU1FLElBQUVMLENBQUMsQ0FBQyxFQUFFLEVBQUNNLElBQUVOLENBQUMsQ0FBQyxFQUFFLElBQUVBLENBQUMsQ0FBQyxFQUFFLEVBQUNPLElBQUVGLEVBQUUrQixNQUFNLEVBQUMsRUFBQ2dILE9BQU0xSSxDQUFDLEVBQUMySSxRQUFPN0ksQ0FBQyxFQUFDLEdBQUNOLEVBQUV1TixNQUFNLEVBQUNyRCxJQUFFNUosSUFBRSxHQUFFZ0ssSUFBRSxJQUFJLENBQUMrQyxhQUFhLElBQUc5QyxJQUFFeEssRUFBRXlOLFFBQVEsR0FBQ3pOLEVBQUV5TixRQUFRLEdBQUNsRCxJQUFFLEdBQUVFLElBQUV6SyxFQUFFME4sTUFBTSxHQUFDMU4sRUFBRTBOLE1BQU0sR0FBQ25ELElBQUV2SyxFQUFFeU4sUUFBUSxHQUFDakQsSUFBRSxJQUFFLEdBQUVFLElBQUUxSyxFQUFFMk4sU0FBUyxJQUFFLEdBQUU5QyxJQUFFcEssSUFBRytKLENBQUFBLElBQUVDLENBQUFBLElBQUduSyxHQUFFd0ssSUFBRUosS0FBRyxlQUFjekssSUFBRSxjQUFZO1FBQU9BLEVBQUUyTixTQUFTO1FBQUcsSUFBSTdDLElBQUUsR0FBRUcsSUFBRSxHQUFFQyxJQUFFO1FBQUUsSUFBSSxJQUFJcEwsSUFBRSxHQUFFQSxLQUFHTyxHQUFFUCxJQUFJO1lBQUMsTUFBTU8sSUFBRThCLEtBQUttQyxLQUFLLENBQUN4RSxJQUFFOEs7WUFBRyxJQUFHdkssSUFBRXlLLEdBQUU7Z0JBQUMsTUFBTWhMLElBQUVxQyxLQUFLbUMsS0FBSyxDQUFDMkcsSUFBRWYsSUFBRWpLLElBQUdFLElBQUVMLElBQUVxQyxLQUFLbUMsS0FBSyxDQUFDNEcsSUFBRWhCLElBQUVqSyxNQUFJO2dCQUFFLElBQUlHLElBQUU4SixJQUFFcEs7Z0JBQUUsVUFBUUMsRUFBRTZOLFFBQVEsR0FBQ3hOLElBQUUsSUFBRSxhQUFXTCxFQUFFNk4sUUFBUSxJQUFHeE4sQ0FBQUEsSUFBRUUsSUFBRUgsQ0FBQUEsR0FBR0gsQ0FBQyxDQUFDNkssRUFBRSxDQUFDQyxJQUFHUCxDQUFBQSxJQUFFQyxDQUFBQSxHQUFHcEssR0FBRW1LLEdBQUVwSyxHQUFFc0ssSUFBR0ssSUFBRXpLLEdBQUU0SyxJQUFFLEdBQUVDLElBQUU7WUFBQztZQUFDLE1BQU0xSyxJQUFFMkIsS0FBS0MsR0FBRyxDQUFDakMsQ0FBQyxDQUFDTCxFQUFFLElBQUUsSUFBR3dLLElBQUVuSSxLQUFLQyxHQUFHLENBQUNoQyxDQUFDLENBQUNOLEVBQUUsSUFBRTtZQUFHVSxJQUFFeUssS0FBSUEsQ0FBQUEsSUFBRXpLLENBQUFBLEdBQUc4SixJQUFFWSxLQUFJQSxDQUFBQSxJQUFFWixDQUFBQTtRQUFFO1FBQUN0SyxFQUFFNk4sSUFBSSxJQUFHN04sRUFBRThOLFNBQVM7SUFBRTtJQUFDQyxtQkFBbUJqTyxDQUFDLEVBQUNDLENBQUMsRUFBQ0MsQ0FBQyxFQUFDQyxDQUFDLEVBQUM7UUFBQyxNQUFNRSxJQUFFSixDQUFBQTtZQUFJLE1BQU1JLElBQUVMLENBQUMsQ0FBQ0MsRUFBRSxJQUFFRCxDQUFDLENBQUMsRUFBRSxFQUFDTSxJQUFFRCxFQUFFK0IsTUFBTSxFQUFDLEVBQUNpSCxRQUFPOUksQ0FBQyxFQUFDLEdBQUNMLEVBQUV1TixNQUFNLEVBQUMvTSxJQUFFSCxJQUFFLEdBQUVDLElBQUVOLEVBQUV1TixNQUFNLENBQUNyRSxLQUFLLEdBQUM5STtZQUFFSixFQUFFZ08sTUFBTSxDQUFDLEdBQUV4TjtZQUFHLElBQUkwSixJQUFFLEdBQUVJLElBQUU7WUFBRSxJQUFJLElBQUl4SyxJQUFFLEdBQUVBLEtBQUdNLEdBQUVOLElBQUk7Z0JBQUMsTUFBTU0sSUFBRStCLEtBQUttQyxLQUFLLENBQUN4RSxJQUFFUTtnQkFBRyxJQUFHRixJQUFFOEosR0FBRTtvQkFBQyxNQUFNcEssSUFBRVUsSUFBRSxDQUFDMkIsS0FBS21DLEtBQUssQ0FBQ2dHLElBQUU5SixJQUFFUCxNQUFJLEtBQUksT0FBSUYsSUFBRSxDQUFDLElBQUU7b0JBQUdDLEVBQUVpTyxNQUFNLENBQUMvRCxHQUFFcEssSUFBR29LLElBQUU5SixHQUFFa0ssSUFBRTtnQkFBQztnQkFBQyxNQUFNakssSUFBRThCLEtBQUtDLEdBQUcsQ0FBQ2pDLENBQUMsQ0FBQ0wsRUFBRSxJQUFFO2dCQUFHTyxJQUFFaUssS0FBSUEsQ0FBQUEsSUFBRWpLLENBQUFBO1lBQUU7WUFBQ0wsRUFBRWlPLE1BQU0sQ0FBQy9ELEdBQUUxSjtRQUFFO1FBQUVSLEVBQUUyTixTQUFTLElBQUd4TixFQUFFLElBQUdBLEVBQUUsSUFBR0gsRUFBRTZOLElBQUksSUFBRzdOLEVBQUU4TixTQUFTO0lBQUU7SUFBQ0ksZUFBZXBPLENBQUMsRUFBQ0MsQ0FBQyxFQUFDQyxDQUFDLEVBQUM7UUFBQyxJQUFHQSxFQUFFbU8sU0FBUyxHQUFDLElBQUksQ0FBQ3RCLGtCQUFrQixDQUFDOU0sRUFBRXFPLFNBQVMsR0FBRXJPLEVBQUVzTyxjQUFjLEVBQUMsT0FBTyxLQUFLdE8sRUFBRXNPLGNBQWMsQ0FBQ3ZPLEdBQUVFO1FBQUcsSUFBSUMsSUFBRUYsRUFBRXVPLFNBQVMsSUFBRTtRQUFFLElBQUd2TyxFQUFFd08sU0FBUyxFQUFDO1lBQUMsTUFBTXhPLElBQUUrTSxNQUFNMEIsSUFBSSxDQUFDMU8sQ0FBQyxDQUFDLEVBQUUsRUFBRTJPLE1BQU0sQ0FBRSxDQUFDM08sR0FBRUMsSUFBSW9DLEtBQUttSixHQUFHLENBQUN4TCxHQUFFcUMsS0FBS0MsR0FBRyxDQUFDckMsS0FBSztZQUFHRSxJQUFFRixJQUFFLElBQUVBLElBQUU7UUFBQztRQUFDQSxFQUFFeU4sUUFBUSxJQUFFek4sRUFBRTBOLE1BQU0sSUFBRTFOLEVBQUU2TixRQUFRLEdBQUMsSUFBSSxDQUFDTixpQkFBaUIsQ0FBQ3hOLEdBQUVDLEdBQUVDLEdBQUVDLEtBQUcsSUFBSSxDQUFDOE4sa0JBQWtCLENBQUNqTyxHQUFFQyxHQUFFQyxHQUFFQztJQUFFO0lBQUN5TyxtQkFBbUI1TyxDQUFDLEVBQUNDLENBQUMsRUFBQ0MsQ0FBQyxFQUFDQyxDQUFDLEVBQUNFLENBQUMsRUFBQ0MsQ0FBQyxFQUFDQyxDQUFDLEVBQUM7UUFBQyxNQUFNRyxJQUFFLElBQUksQ0FBQzZNLGFBQWEsSUFBRy9NLElBQUV1QyxTQUFTRSxhQUFhLENBQUM7UUFBVXpDLEVBQUU0SSxLQUFLLEdBQUMvRyxLQUFLbUMsS0FBSyxDQUFDdEUsSUFBRVEsSUFBR0YsRUFBRTZJLE1BQU0sR0FBQ2hILEtBQUttQyxLQUFLLENBQUNyRSxJQUFFTyxJQUFHRixFQUFFK0MsS0FBSyxDQUFDNkYsS0FBSyxHQUFDLENBQUMsRUFBRWxKLEVBQUUsRUFBRSxDQUFDLEVBQUNNLEVBQUUrQyxLQUFLLENBQUM4RixNQUFNLEdBQUMsQ0FBQyxFQUFFbEosRUFBRSxFQUFFLENBQUMsRUFBQ0ssRUFBRStDLEtBQUssQ0FBQzBGLElBQUksR0FBQyxDQUFDLEVBQUU1RyxLQUFLbUMsS0FBSyxDQUFDbkUsR0FBRyxFQUFFLENBQUMsRUFBQ0MsRUFBRThDLFdBQVcsQ0FBQzVDO1FBQUcsTUFBTTRKLElBQUU1SixFQUFFME0sVUFBVSxDQUFDO1FBQU0sSUFBRyxJQUFJLENBQUNrQixjQUFjLENBQUNwTyxHQUFFQyxHQUFFbUssSUFBRzVKLEVBQUU0SSxLQUFLLEdBQUMsS0FBRzVJLEVBQUU2SSxNQUFNLEdBQUMsR0FBRTtZQUFDLE1BQU1ySixJQUFFUSxFQUFFcU8sU0FBUyxJQUFHM08sSUFBRUYsRUFBRWtOLFVBQVUsQ0FBQztZQUFNaE4sRUFBRTRPLFNBQVMsQ0FBQ3RPLEdBQUUsR0FBRSxJQUFHTixFQUFFNk8sd0JBQXdCLEdBQUMsYUFBWTdPLEVBQUVtTyxTQUFTLEdBQUMsSUFBSSxDQUFDdEIsa0JBQWtCLENBQUM5TSxFQUFFK08sYUFBYSxHQUFFOU8sRUFBRStPLFFBQVEsQ0FBQyxHQUFFLEdBQUV6TyxFQUFFNEksS0FBSyxFQUFDNUksRUFBRTZJLE1BQU0sR0FBRTlJLEVBQUU2QyxXQUFXLENBQUNwRDtRQUFFO0lBQUM7SUFBQ2tQLGtCQUFrQmxQLENBQUMsRUFBQ0MsQ0FBQyxFQUFDQyxDQUFDLEVBQUNDLENBQUMsRUFBQ0UsQ0FBQyxFQUFDQyxDQUFDLEVBQUM7UUFBQyxNQUFNQyxJQUFFLElBQUksQ0FBQ2dOLGFBQWEsSUFBRyxFQUFDN0QsYUFBWWhKLENBQUMsRUFBQyxHQUFDLElBQUksQ0FBQzZILGVBQWUsRUFBQzZCLElBQUVsSyxJQUFFSztRQUFFLElBQUlpSyxJQUFFbkksS0FBS29KLEdBQUcsQ0FBQ2pMLEVBQUUyTyxnQkFBZ0IsRUFBQ3pPLEdBQUUwSixJQUFHSyxJQUFFLENBQUM7UUFBRSxJQUFHeEssRUFBRXlOLFFBQVEsSUFBRXpOLEVBQUUwTixNQUFNLEVBQUM7WUFBQyxNQUFNM04sSUFBRUMsRUFBRXlOLFFBQVEsSUFBRSxJQUFHeE4sSUFBRUYsSUFBR0MsQ0FBQUEsRUFBRTBOLE1BQU0sSUFBRTNOLElBQUU7WUFBR3dLLElBQUV0SyxLQUFHLEtBQUlzSyxDQUFBQSxJQUFFbkksS0FBSytNLEtBQUssQ0FBQzVFLElBQUV0SyxLQUFHQSxDQUFBQTtRQUFFO1FBQUMsTUFBTXdLLElBQUV4SyxDQUFBQTtZQUFJLElBQUdBLElBQUUsS0FBR0EsS0FBR3lLLEdBQUU7WUFBTyxJQUFHRixDQUFDLENBQUN2SyxFQUFFLEVBQUM7WUFBT3VLLENBQUMsQ0FBQ3ZLLEVBQUUsR0FBQyxDQUFDO1lBQUUsTUFBTUssSUFBRUwsSUFBRXNLLEdBQUU5SixJQUFFMkIsS0FBS29KLEdBQUcsQ0FBQ3JCLElBQUU3SixHQUFFaUs7WUFBRyxJQUFHOUosS0FBRyxHQUFFO1lBQU8sTUFBTUYsSUFBRVIsRUFBRXFQLEdBQUcsQ0FBRXJQLENBQUFBO2dCQUFJLE1BQU1DLElBQUVvQyxLQUFLK00sS0FBSyxDQUFDN08sSUFBRTZKLElBQUVwSyxFQUFFb0MsTUFBTSxHQUFFbEMsSUFBRW1DLEtBQUsrTSxLQUFLLENBQUMsQ0FBQzdPLElBQUVHLENBQUFBLElBQUcwSixJQUFFcEssRUFBRW9DLE1BQU07Z0JBQUUsT0FBT3BDLEVBQUVzUCxLQUFLLENBQUNyUCxHQUFFQztZQUFFO1lBQUksSUFBSSxDQUFDME8sa0JBQWtCLENBQUNwTyxHQUFFUCxHQUFFUyxHQUFFUCxHQUFFSSxHQUFFRixHQUFFQztRQUFFLEdBQUVxSyxJQUFFdEksS0FBS2tOLElBQUksQ0FBQ25GLElBQUVJO1FBQUcsSUFBRyxDQUFDLElBQUksQ0FBQzVDLFlBQVksRUFBQztZQUFDLElBQUksSUFBSTVILElBQUUsR0FBRUEsSUFBRTJLLEdBQUUzSyxJQUFJMEssRUFBRTFLO1lBQUc7UUFBTTtRQUFDLE1BQU04SyxJQUFFLElBQUksQ0FBQ3ZDLGVBQWUsQ0FBQ2lCLFVBQVUsR0FBQ1ksR0FBRVcsSUFBRTFJLEtBQUsrTSxLQUFLLENBQUN0RSxJQUFFSDtRQUFHRCxFQUFFSyxJQUFFLElBQUdMLEVBQUVLLElBQUdMLEVBQUVLLElBQUUsSUFBR0osSUFBRSxLQUFJLEtBQUksQ0FBQ2lDLG1CQUFtQixHQUFDLElBQUksQ0FBQ3pMLEVBQUUsQ0FBQyxVQUFVO1lBQUssTUFBSyxFQUFDcUksWUFBV3hKLENBQUMsRUFBQyxHQUFDLElBQUksQ0FBQ3VJLGVBQWUsRUFBQ3RJLElBQUVvQyxLQUFLK00sS0FBSyxDQUFDcFAsSUFBRW9LLElBQUVPO1lBQUd6SCxPQUFPc00sSUFBSSxDQUFDL0UsR0FBR3JJLE1BQU0sR0FBQzVCLEVBQUVpUCxTQUFTLElBQUdwUCxDQUFBQSxFQUFFOEwsU0FBUyxHQUFDLElBQUc3TCxFQUFFNkwsU0FBUyxHQUFDLElBQUcxQixJQUFFLENBQUMsSUFBR0MsRUFBRXpLLElBQUUsSUFBR3lLLEVBQUV6SyxJQUFHeUssRUFBRXpLLElBQUU7UUFBRSxFQUFFO0lBQUU7SUFBQ3lQLGNBQWMxUCxDQUFDLEVBQUNDLENBQUMsRUFBQ0MsQ0FBQyxFQUFDQyxDQUFDLEVBQUM7UUFBQyxJQUFHLEVBQUMyTCxTQUFRekwsQ0FBQyxFQUFDLEdBQUNKLEdBQUVLLElBQUUsU0FBU04sQ0FBQyxFQUFDQyxDQUFDO1lBQUUsSUFBSUMsSUFBRSxDQUFDO1lBQUUsSUFBSSxJQUFJQyxLQUFLSCxFQUFFa0QsT0FBT04sU0FBUyxDQUFDK00sY0FBYyxDQUFDOUMsSUFBSSxDQUFDN00sR0FBRUcsTUFBSUYsRUFBRTJQLE9BQU8sQ0FBQ3pQLEtBQUcsS0FBSUQsQ0FBQUEsQ0FBQyxDQUFDQyxFQUFFLEdBQUNILENBQUMsQ0FBQ0csRUFBRTtZQUFFLElBQUcsUUFBTUgsS0FBRyxjQUFZLE9BQU9rRCxPQUFPMk0scUJBQXFCLEVBQUM7Z0JBQUMsSUFBSXhQLElBQUU7Z0JBQUUsSUFBSUYsSUFBRStDLE9BQU8yTSxxQkFBcUIsQ0FBQzdQLElBQUdLLElBQUVGLEVBQUVpQyxNQUFNLEVBQUMvQixJQUFJSixFQUFFMlAsT0FBTyxDQUFDelAsQ0FBQyxDQUFDRSxFQUFFLElBQUUsS0FBRzZDLE9BQU9OLFNBQVMsQ0FBQ2tOLG9CQUFvQixDQUFDakQsSUFBSSxDQUFDN00sR0FBRUcsQ0FBQyxDQUFDRSxFQUFFLEtBQUlILENBQUFBLENBQUMsQ0FBQ0MsQ0FBQyxDQUFDRSxFQUFFLENBQUMsR0FBQ0wsQ0FBQyxDQUFDRyxDQUFDLENBQUNFLEVBQUUsQ0FBQztZQUFDO1lBQUMsT0FBT0g7UUFBQyxFQUFFRCxHQUFFO1lBQUM7U0FBVTtRQUFFLE1BQU1NLElBQUV3QyxTQUFTRSxhQUFhLENBQUMsUUFBT3ZDLElBQUUsSUFBSSxDQUFDZ0wsU0FBUyxDQUFDcEwsRUFBRStJLE1BQU0sRUFBQy9JLEVBQUU4TCxhQUFhO1FBQUU3TCxFQUFFZ0QsS0FBSyxDQUFDOEYsTUFBTSxHQUFDLENBQUMsRUFBRTNJLEVBQUUsRUFBRSxDQUFDLEVBQUNMLEtBQUdGLElBQUUsS0FBSUksQ0FBQUEsRUFBRWdELEtBQUssQ0FBQ3dNLFNBQVMsR0FBQyxDQUFDLENBQUMsRUFBRXJQLEVBQUUsRUFBRSxDQUFDLEdBQUUsSUFBSSxDQUFDZ0ksYUFBYSxDQUFDbkYsS0FBSyxDQUFDeU0sU0FBUyxHQUFDLENBQUMsRUFBRXRQLEVBQUUsRUFBRSxDQUFDLEVBQUMsSUFBSSxDQUFDZ0ksYUFBYSxDQUFDdEYsV0FBVyxDQUFDN0M7UUFBRyxNQUFNQyxJQUFFRCxFQUFFc08sU0FBUztRQUFHLElBQUksQ0FBQ2xHLGVBQWUsQ0FBQ3ZGLFdBQVcsQ0FBQzVDLElBQUcsSUFBSSxDQUFDME8saUJBQWlCLENBQUNsUCxHQUFFTSxHQUFFSixHQUFFUSxHQUFFSCxHQUFFQztJQUFFO0lBQUN5UCxPQUFPaFEsQ0FBQyxFQUFDO1FBQUMsT0FBT0QsRUFBRSxJQUFJLEVBQUMsS0FBSyxHQUFFLEtBQUssR0FBRztZQUFZLElBQUlBO1lBQUUsSUFBSSxDQUFDMkgsUUFBUSxDQUFDaEcsT0FBTyxDQUFFM0IsQ0FBQUEsSUFBR0EsTUFBTSxJQUFJLENBQUMySCxRQUFRLEdBQUMsRUFBRSxFQUFDLElBQUksQ0FBQ2UsYUFBYSxDQUFDeUQsU0FBUyxHQUFDLElBQUcsSUFBSSxDQUFDeEQsZUFBZSxDQUFDd0QsU0FBUyxHQUFDLElBQUcsUUFBTSxJQUFJLENBQUNqRSxPQUFPLENBQUNrQixLQUFLLElBQUcsS0FBSSxDQUFDYixlQUFlLENBQUNoRixLQUFLLENBQUM2RixLQUFLLEdBQUMsWUFBVSxPQUFPLElBQUksQ0FBQ2xCLE9BQU8sQ0FBQ2tCLEtBQUssR0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDbEIsT0FBTyxDQUFDa0IsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFDLElBQUksQ0FBQ2xCLE9BQU8sQ0FBQ2tCLEtBQUs7WUFBRSxNQUFNbEosSUFBRSxJQUFJLENBQUNxTixhQUFhLElBQUdwTixJQUFFLElBQUksQ0FBQ29JLGVBQWUsQ0FBQ21CLFdBQVcsRUFBQ3JKLElBQUVnQyxLQUFLa04sSUFBSSxDQUFDdFAsRUFBRXNDLFFBQVEsR0FBRSxLQUFJLENBQUMyRixPQUFPLENBQUNnSSxXQUFXLElBQUU7WUFBSSxJQUFJLENBQUN0SSxZQUFZLEdBQUN2SCxJQUFFRjtZQUFFLE1BQU1HLElBQUUsSUFBSSxDQUFDNEgsT0FBTyxDQUFDaUksVUFBVSxJQUFFLENBQUMsSUFBSSxDQUFDdkksWUFBWSxFQUFDckgsSUFBRSxDQUFDRCxJQUFFSCxJQUFFRSxDQUFBQSxJQUFHSDtZQUFFLElBQUcsSUFBSSxDQUFDdUksT0FBTyxDQUFDbEYsS0FBSyxDQUFDNkYsS0FBSyxHQUFDOUksSUFBRSxTQUFPLENBQUMsRUFBRUQsRUFBRSxFQUFFLENBQUMsRUFBQyxJQUFJLENBQUNrSSxlQUFlLENBQUNoRixLQUFLLENBQUM2TSxTQUFTLEdBQUMsSUFBSSxDQUFDeEksWUFBWSxHQUFDLFNBQU8sVUFBUyxJQUFJLENBQUNXLGVBQWUsQ0FBQzhILFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLGVBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQ3BJLE9BQU8sQ0FBQ3FJLGFBQWEsR0FBRSxJQUFJLENBQUMzSCxNQUFNLENBQUNyRixLQUFLLENBQUNpTixlQUFlLEdBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ3RJLE9BQU8sQ0FBQ3VJLFdBQVcsSUFBRSxJQUFJLENBQUN2SSxPQUFPLENBQUM4RyxhQUFhLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQ3BHLE1BQU0sQ0FBQ3JGLEtBQUssQ0FBQzZGLEtBQUssR0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDbEIsT0FBTyxDQUFDd0ksV0FBVyxDQUFDLEVBQUUsQ0FBQyxFQUFDLElBQUksQ0FBQzdJLFNBQVMsR0FBQzVILEdBQUUsSUFBSSxDQUFDeUIsSUFBSSxDQUFDLFdBQVUsSUFBSSxDQUFDd0csT0FBTyxDQUFDa0UsYUFBYSxFQUFDLElBQUksSUFBSWxNLElBQUUsR0FBRUEsSUFBRUQsRUFBRXVDLGdCQUFnQixFQUFDdEMsSUFBSTtnQkFBQyxNQUFNQyxJQUFFK0MsT0FBT0ksTUFBTSxDQUFDSixPQUFPSSxNQUFNLENBQUMsQ0FBQyxHQUFFLElBQUksQ0FBQzRFLE9BQU8sR0FBRSxTQUFRbEksQ0FBQUEsSUFBRSxJQUFJLENBQUNrSSxPQUFPLENBQUNrRSxhQUFhLEtBQUcsS0FBSyxNQUFJcE0sSUFBRSxLQUFLLElBQUVBLENBQUMsQ0FBQ0UsRUFBRTtnQkFBRSxJQUFJLENBQUN3UCxhQUFhLENBQUM7b0JBQUN6UCxFQUFFd0MsY0FBYyxDQUFDdkM7aUJBQUcsRUFBQ0MsR0FBRUksR0FBRUw7WUFBRTtpQkFBSztnQkFBQyxNQUFNRixJQUFFO29CQUFDQyxFQUFFd0MsY0FBYyxDQUFDO2lCQUFHO2dCQUFDeEMsRUFBRXVDLGdCQUFnQixHQUFDLEtBQUd4QyxFQUFFaUssSUFBSSxDQUFDaEssRUFBRXdDLGNBQWMsQ0FBQyxLQUFJLElBQUksQ0FBQ2lOLGFBQWEsQ0FBQzFQLEdBQUUsSUFBSSxDQUFDa0ksT0FBTyxFQUFDM0gsR0FBRTtZQUFFO1lBQUNILFFBQVF1USxPQUFPLEdBQUc3UCxJQUFJLENBQUUsSUFBSSxJQUFJLENBQUNZLElBQUksQ0FBQztRQUFhO0lBQUc7SUFBQ3NJLFdBQVU7UUFBQyxJQUFJaEs7UUFBRSxJQUFHLFNBQVFBLENBQUFBLElBQUUsSUFBSSxDQUFDNE0sbUJBQW1CLEtBQUcsS0FBSyxNQUFJNU0sS0FBR0EsRUFBRTZNLElBQUksQ0FBQyxJQUFJLEdBQUUsT0FBTyxJQUFJLENBQUNELG1CQUFtQixFQUFDLENBQUMsSUFBSSxDQUFDL0UsU0FBUyxFQUFDO1FBQU8sTUFBSyxFQUFDNEIsYUFBWXhKLENBQUMsRUFBQyxHQUFDLElBQUksQ0FBQ3NJLGVBQWUsRUFBQyxFQUFDcUksT0FBTTFRLENBQUMsRUFBQyxHQUFDLElBQUksQ0FBQ3lJLGVBQWUsQ0FBQ0kscUJBQXFCO1FBQUcsSUFBRyxJQUFJLENBQUNrSCxNQUFNLENBQUMsSUFBSSxDQUFDcEksU0FBUyxHQUFFLElBQUksQ0FBQ0QsWUFBWSxJQUFFM0gsTUFBSSxJQUFJLENBQUNzSSxlQUFlLENBQUNrQixXQUFXLEVBQUM7WUFBQyxNQUFLLEVBQUNtSCxPQUFNNVEsQ0FBQyxFQUFDLEdBQUMsSUFBSSxDQUFDMkksZUFBZSxDQUFDSSxxQkFBcUI7WUFBRyxJQUFJOUksSUFBRUQsSUFBRUU7WUFBRUQsS0FBRyxHQUFFQSxJQUFFQSxJQUFFLElBQUVvQyxLQUFLK00sS0FBSyxDQUFDblAsS0FBR29DLEtBQUtrTixJQUFJLENBQUN0UCxJQUFHQSxLQUFHLEdBQUUsSUFBSSxDQUFDc0ksZUFBZSxDQUFDaUIsVUFBVSxJQUFFdko7UUFBQztJQUFDO0lBQUM0USxLQUFLN1EsQ0FBQyxFQUFDO1FBQUMsSUFBSSxDQUFDa0ksT0FBTyxDQUFDZ0ksV0FBVyxHQUFDbFEsR0FBRSxJQUFJLENBQUNnSyxRQUFRO0lBQUU7SUFBQzhHLGVBQWU5USxDQUFDLEVBQUNDLElBQUUsQ0FBQyxDQUFDLEVBQUM7UUFBQyxNQUFLLEVBQUN1SixZQUFXdEosQ0FBQyxFQUFDdUosYUFBWXRKLENBQUMsRUFBQ3VKLGFBQVlySixDQUFDLEVBQUMsR0FBQyxJQUFJLENBQUNrSSxlQUFlLEVBQUNqSSxJQUFFTixJQUFFRyxHQUFFSSxJQUFFTCxHQUFFUSxJQUFFUixJQUFFRyxHQUFFRyxJQUFFSCxJQUFFO1FBQUUsSUFBRyxJQUFJLENBQUMySCxVQUFVLEVBQUM7WUFBQyxNQUFNaEksSUFBRTtZQUFHTSxJQUFFTixJQUFFVSxJQUFFLElBQUksQ0FBQzZILGVBQWUsQ0FBQ2lCLFVBQVUsSUFBRXhKLElBQUVNLElBQUVOLElBQUVPLEtBQUksS0FBSSxDQUFDZ0ksZUFBZSxDQUFDaUIsVUFBVSxJQUFFeEosQ0FBQUE7UUFBRSxPQUFLO1lBQUVNLENBQUFBLElBQUVDLEtBQUdELElBQUVJLENBQUFBLEtBQUssS0FBSSxDQUFDNkgsZUFBZSxDQUFDaUIsVUFBVSxHQUFDbEosSUFBRyxLQUFJLENBQUM0SCxPQUFPLENBQUM2SSxVQUFVLEdBQUN2USxJQUFFLEVBQUM7WUFBRyxNQUFNUixJQUFFTSxJQUFFSixJQUFFTTtZQUFFUCxLQUFHLElBQUksQ0FBQ2lJLE9BQU8sQ0FBQzZJLFVBQVUsSUFBRS9RLElBQUUsS0FBSSxLQUFJLENBQUN1SSxlQUFlLENBQUNpQixVQUFVLElBQUVuSCxLQUFLb0osR0FBRyxDQUFDekwsR0FBRSxHQUFFO1FBQUU7UUFBQztZQUFDLE1BQU1BLElBQUUsSUFBSSxDQUFDdUksZUFBZSxDQUFDaUIsVUFBVSxFQUFDdkosSUFBRUQsSUFBRUcsR0FBRUQsSUFBRSxDQUFDRixJQUFFSyxDQUFBQSxJQUFHRjtZQUFFLElBQUksQ0FBQ3VCLElBQUksQ0FBQyxVQUFTekIsR0FBRUMsR0FBRUYsR0FBRUEsSUFBRUs7UUFBRTtJQUFDO0lBQUMyUSxlQUFlaFIsQ0FBQyxFQUFDQyxDQUFDLEVBQUM7UUFBQyxJQUFHMEwsTUFBTTNMLElBQUc7UUFBTyxNQUFNRSxJQUFFLE1BQUlGO1FBQUUsSUFBSSxDQUFDMEksYUFBYSxDQUFDbkYsS0FBSyxDQUFDME4sUUFBUSxHQUFDLENBQUMsUUFBUSxFQUFFL1EsRUFBRSx3QkFBd0IsRUFBRUEsRUFBRSxPQUFPLENBQUMsRUFBQyxJQUFJLENBQUN5SSxlQUFlLENBQUNwRixLQUFLLENBQUM2RixLQUFLLEdBQUMsQ0FBQyxFQUFFbEosRUFBRSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMwSSxNQUFNLENBQUNyRixLQUFLLENBQUMwRixJQUFJLEdBQUMsQ0FBQyxFQUFFL0ksRUFBRSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMwSSxNQUFNLENBQUNyRixLQUFLLENBQUMyTixTQUFTLEdBQUMsQ0FBQyxZQUFZLEVBQUUsUUFBTTdPLEtBQUttQyxLQUFLLENBQUN0RSxLQUFHLElBQUksQ0FBQ2dJLE9BQU8sQ0FBQ3dJLFdBQVcsR0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFDLElBQUksQ0FBQzlJLFlBQVksSUFBRSxJQUFJLENBQUNNLE9BQU8sQ0FBQ2lKLFVBQVUsSUFBRSxJQUFJLENBQUNMLGNBQWMsQ0FBQzlRLEdBQUVDO0lBQUU7SUFBQ21SLFlBQVluUixDQUFDLEVBQUNDLENBQUMsRUFBQ0MsQ0FBQyxFQUFDO1FBQUMsT0FBT0gsRUFBRSxJQUFJLEVBQUMsS0FBSyxHQUFFLEtBQUssR0FBRztZQUFZLE1BQU1BLElBQUUsSUFBSSxDQUFDMEksYUFBYSxDQUFDMkksZ0JBQWdCLENBQUM7WUFBVSxJQUFHLENBQUNyUixFQUFFb0MsTUFBTSxFQUFDLE1BQU0sSUFBSTZCLE1BQU07WUFBb0IsSUFBRyxjQUFZOUQsR0FBRTtnQkFBQyxNQUFNQSxJQUFFNk0sTUFBTTBCLElBQUksQ0FBQzFPLEdBQUdxUCxHQUFHLENBQUVyUCxDQUFBQSxJQUFHQSxFQUFFc1IsU0FBUyxDQUFDclIsR0FBRUM7Z0JBQUssT0FBT0UsUUFBUXVRLE9BQU8sQ0FBQ3hRO1lBQUU7WUFBQyxPQUFPQyxRQUFRbVIsR0FBRyxDQUFDdkUsTUFBTTBCLElBQUksQ0FBQzFPLEdBQUdxUCxHQUFHLENBQUVyUCxDQUFBQSxJQUFHLElBQUlJLFFBQVMsQ0FBQ0QsR0FBRUU7b0JBQUtMLEVBQUV3UixNQUFNLENBQUV4UixDQUFBQTt3QkFBSUEsSUFBRUcsRUFBRUgsS0FBR0ssRUFBRSxJQUFJNEQsTUFBTTtvQkFBMEIsR0FBR2hFLEdBQUVDO2dCQUFFO1FBQU07SUFBRztBQUFDO0FBQUNNLEVBQUUyTyxnQkFBZ0IsR0FBQyxLQUFJM08sRUFBRWlQLFNBQVMsR0FBQztBQUFHLE1BQU1yRixVQUFVbks7SUFBRWdCLGFBQWE7UUFBQyxLQUFLLElBQUl3USxZQUFXLElBQUksQ0FBQ0MsV0FBVyxHQUFDLEtBQUs7SUFBQztJQUFDQyxRQUFPO1FBQUMsSUFBSSxDQUFDRCxXQUFXLEdBQUMsSUFBSSxDQUFDdlEsRUFBRSxDQUFDLFFBQVE7WUFBS3lRLHNCQUF1QjtnQkFBSyxJQUFJLENBQUNsUSxJQUFJLENBQUM7WUFBTztRQUFHLElBQUksSUFBSSxDQUFDQSxJQUFJLENBQUM7SUFBTztJQUFDbVEsT0FBTTtRQUFDLElBQUksQ0FBQ0gsV0FBVztJQUFFO0lBQUN6TCxVQUFTO1FBQUMsSUFBSSxDQUFDeUwsV0FBVztJQUFFO0FBQUM7QUFBQyxNQUFNbEgsVUFBVXZLO0lBQUVnQixZQUFZakIsSUFBRSxJQUFJNkIsWUFBWSxDQUFDO1FBQUMsS0FBSyxJQUFHLElBQUksQ0FBQ2lRLFVBQVUsR0FBQyxNQUFLLElBQUksQ0FBQ0MsYUFBYSxHQUFDLEdBQUUsSUFBSSxDQUFDQyxjQUFjLEdBQUMsR0FBRSxJQUFJLENBQUNDLE1BQU0sR0FBQyxDQUFDLEdBQUUsSUFBSSxDQUFDQyxhQUFhLEdBQUMsR0FBRSxJQUFJLENBQUNDLFNBQVMsR0FBQyxLQUFLLEdBQUUsSUFBSSxDQUFDQyxNQUFNLEdBQUMsTUFBSyxJQUFJLENBQUM5TSxVQUFVLEdBQUMsSUFBRyxJQUFJLENBQUNrQixNQUFNLEdBQUMsQ0FBQyxHQUFFLElBQUksQ0FBQzZMLFdBQVcsR0FBQyxNQUFLLElBQUksQ0FBQy9LLE9BQU8sR0FBQyxDQUFDLEdBQUUsSUFBSSxDQUFDdEMsUUFBUSxHQUFDLENBQUMsR0FBRSxJQUFJLENBQUNHLGdCQUFnQixHQUFDLElBQUksQ0FBQ2hFLEVBQUUsRUFBQyxJQUFJLENBQUNpRSxtQkFBbUIsR0FBQyxJQUFJLENBQUM3RCxFQUFFLEVBQUMsSUFBSSxDQUFDK1EsWUFBWSxHQUFDdFMsR0FBRSxJQUFJLENBQUN1UyxRQUFRLEdBQUMsSUFBSSxDQUFDRCxZQUFZLENBQUNFLFVBQVUsSUFBRyxJQUFJLENBQUNELFFBQVEsQ0FBQ0UsT0FBTyxDQUFDLElBQUksQ0FBQ0gsWUFBWSxDQUFDSSxXQUFXO0lBQUM7SUFBQ3RNLE9BQU07UUFBQyxPQUFPcEcsRUFBRSxJQUFJLEVBQUMsS0FBSyxHQUFFLEtBQUssR0FBRyxhQUFZO0lBQUc7SUFBQyxJQUFJdUYsTUFBSztRQUFDLE9BQU8sSUFBSSxDQUFDRCxVQUFVO0lBQUE7SUFBQyxJQUFJQyxJQUFJdkYsQ0FBQyxFQUFDO1FBQUMsSUFBRyxJQUFJLENBQUNzRixVQUFVLEdBQUN0RixHQUFFLElBQUksQ0FBQ21TLFNBQVMsR0FBQyxLQUFLLEdBQUUsQ0FBQ25TLEdBQUUsT0FBTyxJQUFJLENBQUNvUyxNQUFNLEdBQUMsTUFBSyxLQUFLLElBQUksQ0FBQzFRLElBQUksQ0FBQztRQUFXcUMsTUFBTS9ELEdBQUdjLElBQUksQ0FBRWIsQ0FBQUE7WUFBSSxJQUFHQSxFQUFFK0QsTUFBTSxJQUFFLEtBQUksTUFBTSxJQUFJQyxNQUFNLENBQUMsZ0JBQWdCLEVBQUVqRSxFQUFFLEVBQUUsRUFBRUMsRUFBRStELE1BQU0sQ0FBQyxFQUFFLEVBQUUvRCxFQUFFaUUsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUFFLE9BQU9qRSxFQUFFMFMsV0FBVztRQUFFLEdBQUk3UixJQUFJLENBQUViLENBQUFBLElBQUcsSUFBSSxDQUFDcUYsVUFBVSxLQUFHdEYsSUFBRSxPQUFLLElBQUksQ0FBQ3NTLFlBQVksQ0FBQ3ZRLGVBQWUsQ0FBQzlCLElBQUthLElBQUksQ0FBRWIsQ0FBQUE7WUFBSSxJQUFJLENBQUNxRixVQUFVLEtBQUd0RixLQUFJLEtBQUksQ0FBQ29TLE1BQU0sR0FBQ25TLEdBQUUsSUFBSSxDQUFDeUIsSUFBSSxDQUFDLG1CQUFrQixJQUFJLENBQUNBLElBQUksQ0FBQyxZQUFXLElBQUksQ0FBQ3NELFFBQVEsSUFBRSxJQUFJLENBQUNzQixJQUFJLEVBQUM7UUFBRTtJQUFHO0lBQUNzTSxRQUFPO1FBQUMsSUFBSTVTO1FBQUUsSUFBRyxDQUFDLElBQUksQ0FBQ3dHLE1BQU0sRUFBQztRQUFPLElBQUksQ0FBQ0EsTUFBTSxHQUFDLENBQUMsR0FBRSxTQUFReEcsQ0FBQUEsSUFBRSxJQUFJLENBQUM4UixVQUFVLEtBQUcsS0FBSyxNQUFJOVIsS0FBR0EsRUFBRTJNLFVBQVUsSUFBRyxJQUFJLENBQUNtRixVQUFVLEdBQUMsSUFBSSxDQUFDUSxZQUFZLENBQUNPLGtCQUFrQixJQUFHLElBQUksQ0FBQ1QsTUFBTSxJQUFHLEtBQUksQ0FBQ04sVUFBVSxDQUFDTSxNQUFNLEdBQUMsSUFBSSxDQUFDQSxNQUFNLEdBQUUsSUFBSSxDQUFDTixVQUFVLENBQUM3TSxZQUFZLENBQUNwRSxLQUFLLEdBQUMsSUFBSSxDQUFDcVIsYUFBYSxFQUFDLElBQUksQ0FBQ0osVUFBVSxDQUFDVyxPQUFPLENBQUMsSUFBSSxDQUFDRixRQUFRO1FBQUUsSUFBSXRTLElBQUUsSUFBSSxDQUFDK1IsY0FBYyxHQUFDLElBQUksQ0FBQ0UsYUFBYTtRQUFDalMsS0FBRyxJQUFJLENBQUNzQyxRQUFRLElBQUd0QyxDQUFBQSxJQUFFLEdBQUUsSUFBSSxDQUFDK1IsY0FBYyxHQUFDLElBQUcsSUFBSSxDQUFDRixVQUFVLENBQUNILEtBQUssQ0FBQyxJQUFJLENBQUNXLFlBQVksQ0FBQzNMLFdBQVcsRUFBQzFHLElBQUcsSUFBSSxDQUFDOFIsYUFBYSxHQUFDLElBQUksQ0FBQ08sWUFBWSxDQUFDM0wsV0FBVyxFQUFDLElBQUksQ0FBQ21MLFVBQVUsQ0FBQ2dCLE9BQU8sR0FBQztZQUFLLElBQUksQ0FBQ25NLFdBQVcsSUFBRSxJQUFJLENBQUNwRSxRQUFRLElBQUcsS0FBSSxDQUFDMkQsS0FBSyxJQUFHLElBQUksQ0FBQ3hFLElBQUksQ0FBQyxRQUFPO1FBQUU7SUFBQztJQUFDcVIsU0FBUTtRQUFDLElBQUkvUztRQUFFLElBQUksQ0FBQ3dHLE1BQU0sR0FBQyxDQUFDLEdBQUUsU0FBUXhHLENBQUFBLElBQUUsSUFBSSxDQUFDOFIsVUFBVSxLQUFHLEtBQUssTUFBSTlSLEtBQUdBLEVBQUU2UixJQUFJLElBQUcsSUFBSSxDQUFDRyxjQUFjLElBQUUsSUFBSSxDQUFDTSxZQUFZLENBQUMzTCxXQUFXLEdBQUMsSUFBSSxDQUFDb0wsYUFBYTtJQUFBO0lBQUN6TCxPQUFNO1FBQUMsT0FBT3RHLEVBQUUsSUFBSSxFQUFDLEtBQUssR0FBRSxLQUFLLEdBQUc7WUFBWSxJQUFJLENBQUN3RyxNQUFNLElBQUcsS0FBSSxDQUFDb00sS0FBSyxJQUFHLElBQUksQ0FBQ2xSLElBQUksQ0FBQyxPQUFNO1FBQUU7SUFBRztJQUFDd0UsUUFBTztRQUFDLElBQUksQ0FBQ00sTUFBTSxJQUFHLEtBQUksQ0FBQ3VNLE1BQU0sSUFBRyxJQUFJLENBQUNyUixJQUFJLENBQUMsUUFBTztJQUFFO0lBQUNzUixPQUFPaFQsQ0FBQyxFQUFDO1FBQUMsSUFBSUMsR0FBRUM7UUFBRSxNQUFNQyxJQUFFSCxJQUFFLElBQUksQ0FBQzJHLFdBQVc7UUFBQyxTQUFRMUcsQ0FBQUEsSUFBRSxJQUFJLENBQUM2UixVQUFVLEtBQUcsS0FBSyxNQUFJN1IsS0FBR0EsRUFBRTRSLElBQUksQ0FBQyxJQUFJLENBQUNTLFlBQVksQ0FBQzNMLFdBQVcsR0FBQ3hHLElBQUcsU0FBUUQsQ0FBQUEsSUFBRSxJQUFJLENBQUM0UixVQUFVLEtBQUcsS0FBSyxNQUFJNVIsS0FBR0EsRUFBRWlGLGdCQUFnQixDQUFDLFNBQVM7WUFBSyxJQUFJLENBQUMyTSxVQUFVLEdBQUMsTUFBSyxJQUFJLENBQUM1TCxLQUFLO1FBQUUsR0FBRztZQUFDNUUsTUFBSyxDQUFDO1FBQUM7SUFBRTtJQUFDb0csVUFBVXpILENBQUMsRUFBQztRQUFDLE9BQU9ELEVBQUUsSUFBSSxFQUFDLEtBQUssR0FBRSxLQUFLLEdBQUc7WUFBWSxPQUFPLElBQUksQ0FBQ3NTLFlBQVksQ0FBQzVLLFNBQVMsQ0FBQ3pIO1FBQUU7SUFBRztJQUFDLElBQUlnRixlQUFjO1FBQUMsT0FBTyxJQUFJLENBQUNpTixhQUFhO0lBQUE7SUFBQyxJQUFJak4sYUFBYWpGLENBQUMsRUFBQztRQUFDLElBQUksQ0FBQ2tTLGFBQWEsR0FBQ2xTLEdBQUUsSUFBSSxDQUFDOFIsVUFBVSxJQUFHLEtBQUksQ0FBQ0EsVUFBVSxDQUFDN00sWUFBWSxDQUFDcEUsS0FBSyxHQUFDYixDQUFBQTtJQUFFO0lBQUMsSUFBSTJHLGNBQWE7UUFBQyxPQUFNLENBQUMsSUFBSSxDQUFDSCxNQUFNLEdBQUMsSUFBSSxDQUFDd0wsY0FBYyxHQUFDLElBQUksQ0FBQ0EsY0FBYyxHQUFFLEtBQUksQ0FBQ00sWUFBWSxDQUFDM0wsV0FBVyxHQUFDLElBQUksQ0FBQ29MLGFBQWEsS0FBRyxJQUFJLENBQUNHLGFBQWE7SUFBQTtJQUFDLElBQUl2TCxZQUFZM0csQ0FBQyxFQUFDO1FBQUMsTUFBTUMsSUFBRSxDQUFDLElBQUksQ0FBQ3VHLE1BQU07UUFBQ3ZHLEtBQUcsSUFBSSxDQUFDOFMsTUFBTSxJQUFHLElBQUksQ0FBQ2YsY0FBYyxHQUFDaFMsSUFBRSxJQUFJLENBQUNrUyxhQUFhLEVBQUNqUyxLQUFHLElBQUksQ0FBQzJTLEtBQUssSUFBRyxJQUFJLENBQUNsUixJQUFJLENBQUMsWUFBVyxJQUFJLENBQUNBLElBQUksQ0FBQztJQUFhO0lBQUMsSUFBSWEsV0FBVTtRQUFDLElBQUl2QyxHQUFFQztRQUFFLE9BQU8sU0FBUUQsQ0FBQUEsSUFBRSxJQUFJLENBQUNtUyxTQUFTLEtBQUcsS0FBSyxNQUFJblMsSUFBRUEsSUFBRSxDQUFDLFNBQVFDLENBQUFBLElBQUUsSUFBSSxDQUFDbVMsTUFBTSxLQUFHLEtBQUssTUFBSW5TLElBQUUsS0FBSyxJQUFFQSxFQUFFc0MsUUFBUSxLQUFHO0lBQUM7SUFBQyxJQUFJQSxTQUFTdkMsQ0FBQyxFQUFDO1FBQUMsSUFBSSxDQUFDbVMsU0FBUyxHQUFDblM7SUFBQztJQUFDLElBQUkrRyxTQUFRO1FBQUMsT0FBTyxJQUFJLENBQUN3TCxRQUFRLENBQUNVLElBQUksQ0FBQ3BTLEtBQUs7SUFBQTtJQUFDLElBQUlrRyxPQUFPL0csQ0FBQyxFQUFDO1FBQUMsSUFBSSxDQUFDdVMsUUFBUSxDQUFDVSxJQUFJLENBQUNwUyxLQUFLLEdBQUNiLEdBQUUsSUFBSSxDQUFDMEIsSUFBSSxDQUFDO0lBQWU7SUFBQyxJQUFJd0YsUUFBTztRQUFDLE9BQU8sSUFBSSxDQUFDK0ssTUFBTTtJQUFBO0lBQUMsSUFBSS9LLE1BQU1sSCxDQUFDLEVBQUM7UUFBQyxJQUFJLENBQUNpUyxNQUFNLEtBQUdqUyxLQUFJLEtBQUksQ0FBQ2lTLE1BQU0sR0FBQ2pTLEdBQUUsSUFBSSxDQUFDaVMsTUFBTSxHQUFDLElBQUksQ0FBQ00sUUFBUSxDQUFDNUYsVUFBVSxLQUFHLElBQUksQ0FBQzRGLFFBQVEsQ0FBQ0UsT0FBTyxDQUFDLElBQUksQ0FBQ0gsWUFBWSxDQUFDSSxXQUFXO0lBQUU7SUFBQzlNLFlBQVk1RixDQUFDLEVBQUM7UUFBQyxPQUFNLG1CQUFtQmtULElBQUksQ0FBQ2xUO0lBQUU7SUFBQ21ULGNBQWE7UUFBQyxPQUFPLElBQUksQ0FBQ1osUUFBUTtJQUFBO0lBQUM5UCxpQkFBZ0I7UUFBQyxNQUFNekMsSUFBRSxFQUFFO1FBQUMsSUFBRyxDQUFDLElBQUksQ0FBQ29TLE1BQU0sRUFBQyxPQUFPcFM7UUFBRSxNQUFNQyxJQUFFLElBQUksQ0FBQ21TLE1BQU0sQ0FBQzVQLGdCQUFnQjtRQUFDLElBQUksSUFBSXRDLElBQUUsR0FBRUEsSUFBRUQsR0FBRUMsSUFBSUYsRUFBRWlLLElBQUksQ0FBQyxJQUFJLENBQUNtSSxNQUFNLENBQUMzUCxjQUFjLENBQUN2QztRQUFJLE9BQU9GO0lBQUM7QUFBQztBQUFDLE1BQU15SyxJQUFFO0lBQUM2RCxXQUFVO0lBQU9VLGVBQWM7SUFBTzBCLGFBQVk7SUFBRVIsYUFBWTtJQUFFQyxZQUFXLENBQUM7SUFBRWlELFVBQVMsQ0FBQztJQUFFOUosWUFBVyxDQUFDO0lBQUU2SCxZQUFXLENBQUM7SUFBRUosWUFBVyxDQUFDO0lBQUVqUCxZQUFXO0FBQUc7QUFBRSxNQUFNNEksVUFBVWhLO0lBQUUsT0FBTzJTLE9BQU9yVCxDQUFDLEVBQUM7UUFBQyxPQUFPLElBQUkwSyxFQUFFMUs7SUFBRTtJQUFDaUIsWUFBWWpCLENBQUMsQ0FBQztRQUFDLE1BQU1DLElBQUVELEVBQUU2RSxLQUFLLElBQUcsZ0JBQWE3RSxFQUFFc1QsT0FBTyxHQUFDLElBQUk5SSxJQUFFLEtBQUs7UUFBRyxLQUFLLENBQUM7WUFBQzNGLE9BQU01RTtZQUFFNkUsZUFBYzlFLEVBQUU4RSxhQUFhO1lBQUNFLFVBQVNoRixFQUFFZ0YsUUFBUTtZQUFDQyxjQUFhakYsRUFBRXVULFNBQVM7UUFBQSxJQUFHLElBQUksQ0FBQ0MsT0FBTyxHQUFDLEVBQUUsRUFBQyxJQUFJLENBQUNDLFdBQVcsR0FBQyxNQUFLLElBQUksQ0FBQ3hMLGFBQWEsR0FBQyxFQUFFLEVBQUMsSUFBSSxDQUFDeUwsa0JBQWtCLEdBQUMsRUFBRSxFQUFDLElBQUksQ0FBQ0MsZUFBZSxHQUFDLE1BQUssSUFBSSxDQUFDekwsT0FBTyxHQUFDaEYsT0FBT0ksTUFBTSxDQUFDLENBQUMsR0FBRW1ILEdBQUV6SyxJQUFHLElBQUksQ0FBQzRULEtBQUssR0FBQyxJQUFJeEo7UUFBRSxNQUFNbEssSUFBRUQsSUFBRSxLQUFLLElBQUUsSUFBSSxDQUFDd0gsZUFBZTtRQUFHLElBQUksQ0FBQ29NLFFBQVEsR0FBQyxJQUFJclQsRUFBRSxJQUFJLENBQUMwSCxPQUFPLEVBQUNoSSxJQUFHLElBQUksQ0FBQzRULGdCQUFnQixJQUFHLElBQUksQ0FBQ0Msa0JBQWtCLElBQUcsSUFBSSxDQUFDQyxlQUFlLElBQUcsSUFBSSxDQUFDQyxXQUFXO1FBQUcsTUFBTTlULElBQUUsSUFBSSxDQUFDK0gsT0FBTyxDQUFDZ00sR0FBRyxJQUFFLElBQUksQ0FBQzdPLE1BQU0sTUFBSTtRQUFHakYsUUFBUXVRLE9BQU8sR0FBRzdQLElBQUksQ0FBRTtZQUFLLElBQUksQ0FBQ1ksSUFBSSxDQUFDO1lBQVEsTUFBSyxFQUFDeVMsT0FBTW5VLENBQUMsRUFBQ3VDLFVBQVN0QyxDQUFDLEVBQUMsR0FBQyxJQUFJLENBQUNpSSxPQUFPO1lBQUUvSCxDQUFBQSxLQUFHSCxLQUFHQyxDQUFBQSxLQUFJLElBQUksQ0FBQ21HLElBQUksQ0FBQ2pHLEdBQUVILEdBQUVDLEdBQUc2SixLQUFLLENBQUUsSUFBSTtRQUFNO0lBQUc7SUFBQ3NLLGVBQWVwVSxJQUFFLElBQUksQ0FBQzZHLGNBQWMsRUFBRSxFQUFDO1FBQUMsT0FBTyxJQUFJLENBQUNnTixRQUFRLENBQUM3QyxjQUFjLENBQUNoUixJQUFFLElBQUksQ0FBQzRHLFdBQVcsSUFBRyxJQUFJLENBQUNMLFNBQVMsS0FBSXZHO0lBQUM7SUFBQ2dVLGtCQUFpQjtRQUFDLElBQUksQ0FBQy9MLGFBQWEsQ0FBQ2dDLElBQUksQ0FBQyxJQUFJLENBQUMySixLQUFLLENBQUN6UyxFQUFFLENBQUMsUUFBUTtZQUFLLElBQUcsQ0FBQyxJQUFJLENBQUNrRyxTQUFTLElBQUc7Z0JBQUMsTUFBTXJILElBQUUsSUFBSSxDQUFDb1UsY0FBYztnQkFBRyxJQUFJLENBQUMxUyxJQUFJLENBQUMsY0FBYTFCLElBQUcsSUFBSSxDQUFDMEIsSUFBSSxDQUFDLGdCQUFlMUI7WUFBRTtRQUFDO0lBQUk7SUFBQzhULG1CQUFrQjtRQUFDLElBQUksQ0FBQ3ZOLFNBQVMsTUFBSyxLQUFJLENBQUM3RSxJQUFJLENBQUMsU0FBUSxJQUFJLENBQUNrUyxLQUFLLENBQUNqQyxLQUFLLEVBQUMsR0FBRyxJQUFJLENBQUMrQixrQkFBa0IsQ0FBQ3pKLElBQUksQ0FBQyxJQUFJLENBQUMvRSxZQUFZLENBQUMsY0FBYztZQUFLLE1BQU1sRixJQUFFLElBQUksQ0FBQ29VLGNBQWM7WUFBRyxJQUFJLENBQUMxUyxJQUFJLENBQUMsY0FBYTFCO1FBQUUsSUFBSSxJQUFJLENBQUNrRixZQUFZLENBQUMsUUFBUTtZQUFLLElBQUksQ0FBQ3hELElBQUksQ0FBQyxTQUFRLElBQUksQ0FBQ2tTLEtBQUssQ0FBQ2pDLEtBQUs7UUFBRSxJQUFJLElBQUksQ0FBQ3pNLFlBQVksQ0FBQyxTQUFTO1lBQUssSUFBSSxDQUFDeEQsSUFBSSxDQUFDLFVBQVMsSUFBSSxDQUFDa1MsS0FBSyxDQUFDL0IsSUFBSTtRQUFFLElBQUksSUFBSSxDQUFDM00sWUFBWSxDQUFDLFdBQVc7WUFBSyxJQUFJLENBQUMwTyxLQUFLLENBQUMvQixJQUFJO1FBQUUsSUFBSSxJQUFJLENBQUMzTSxZQUFZLENBQUMsU0FBUztZQUFLLElBQUksQ0FBQ3hELElBQUksQ0FBQztRQUFTLElBQUksSUFBSSxDQUFDd0QsWUFBWSxDQUFDLFdBQVc7WUFBSyxJQUFJLENBQUN4RCxJQUFJLENBQUMsV0FBVSxJQUFJLENBQUNtRixjQUFjO1FBQUcsSUFBSSxJQUFJLENBQUMzQixZQUFZLENBQUMsU0FBU2xGLENBQUFBO1lBQUksSUFBSSxDQUFDMEIsSUFBSSxDQUFDLFNBQVExQixFQUFFcVUsS0FBSztRQUFDO0lBQUk7SUFBQ04scUJBQW9CO1FBQUMsSUFBSSxDQUFDOUwsYUFBYSxDQUFDZ0MsSUFBSSxDQUFDLElBQUksQ0FBQzRKLFFBQVEsQ0FBQzFTLEVBQUUsQ0FBQyxTQUFTLENBQUNuQixHQUFFQztZQUFLLElBQUksQ0FBQ2lJLE9BQU8sQ0FBQ2tMLFFBQVEsSUFBRyxLQUFJLENBQUNrQixNQUFNLENBQUN0VSxJQUFHLElBQUksQ0FBQzBCLElBQUksQ0FBQyxlQUFjMUIsSUFBRSxJQUFJLENBQUM0RyxXQUFXLEtBQUksSUFBSSxDQUFDbEYsSUFBSSxDQUFDLFNBQVExQixHQUFFQyxFQUFDO1FBQUUsSUFBSSxJQUFJLENBQUM0VCxRQUFRLENBQUMxUyxFQUFFLENBQUMsWUFBWSxDQUFDbkIsR0FBRUM7WUFBSyxJQUFJLENBQUN5QixJQUFJLENBQUMsWUFBVzFCLEdBQUVDO1FBQUUsSUFBSSxJQUFJLENBQUM0VCxRQUFRLENBQUMxUyxFQUFFLENBQUMsVUFBVSxDQUFDbkIsR0FBRUMsR0FBRUMsR0FBRUM7WUFBSyxNQUFNRSxJQUFFLElBQUksQ0FBQ3VHLFdBQVc7WUFBRyxJQUFJLENBQUNsRixJQUFJLENBQUMsVUFBUzFCLElBQUVLLEdBQUVKLElBQUVJLEdBQUVILEdBQUVDO1FBQUUsSUFBSSxJQUFJLENBQUMwVCxRQUFRLENBQUMxUyxFQUFFLENBQUMsVUFBVTtZQUFLLElBQUksQ0FBQ08sSUFBSSxDQUFDO1FBQVMsSUFBSSxJQUFJLENBQUNtUyxRQUFRLENBQUMxUyxFQUFFLENBQUMsWUFBWTtZQUFLLElBQUksQ0FBQ08sSUFBSSxDQUFDO1FBQWlCLElBQUksSUFBSSxDQUFDbVMsUUFBUSxDQUFDMVMsRUFBRSxDQUFDLGFBQWFuQixDQUFBQTtZQUFJLElBQUksQ0FBQzBCLElBQUksQ0FBQyxhQUFZMUI7UUFBRSxJQUFJLElBQUksQ0FBQzZULFFBQVEsQ0FBQzFTLEVBQUUsQ0FBQyxXQUFXbkIsQ0FBQUE7WUFBSSxJQUFJLENBQUMwQixJQUFJLENBQUMsV0FBVTFCO1FBQUU7UUFBSztZQUFDLElBQUlBO1lBQUUsSUFBSSxDQUFDaUksYUFBYSxDQUFDZ0MsSUFBSSxDQUFDLElBQUksQ0FBQzRKLFFBQVEsQ0FBQzFTLEVBQUUsQ0FBQyxRQUFRbEIsQ0FBQUE7Z0JBQUksSUFBRyxDQUFDLElBQUksQ0FBQ2lJLE9BQU8sQ0FBQ2tMLFFBQVEsRUFBQztnQkFBTyxJQUFJbFQ7Z0JBQUUsSUFBSSxDQUFDMlQsUUFBUSxDQUFDN0MsY0FBYyxDQUFDL1EsSUFBRzZNLGFBQWE5TSxJQUFHLElBQUksQ0FBQ3VHLFNBQVMsS0FBR3JHLElBQUUsSUFBRSxDQUFDLE1BQUksSUFBSSxDQUFDZ0ksT0FBTyxDQUFDb0IsVUFBVSxHQUFDcEosSUFBRSxNQUFJLFlBQVUsT0FBTyxJQUFJLENBQUNnSSxPQUFPLENBQUNvQixVQUFVLElBQUUsS0FBSyxNQUFJLElBQUksQ0FBQ3BCLE9BQU8sQ0FBQ29CLFVBQVUsSUFBR3BKLENBQUFBLElBQUUsSUFBSSxDQUFDZ0ksT0FBTyxDQUFDb0IsVUFBVSxDQUFDaUwsWUFBWSxHQUFFdlUsSUFBRXVMLFdBQVk7b0JBQUssSUFBSSxDQUFDK0ksTUFBTSxDQUFDclU7Z0JBQUUsR0FBR0MsSUFBRyxJQUFJLENBQUN3QixJQUFJLENBQUMsZUFBY3pCLElBQUUsSUFBSSxDQUFDMkcsV0FBVyxLQUFJLElBQUksQ0FBQ2xGLElBQUksQ0FBQyxRQUFPekI7WUFBRTtRQUFJO0lBQUM7SUFBQ2dVLGNBQWE7UUFBQyxJQUFJalU7UUFBRyxVQUFRQSxDQUFBQSxJQUFFLElBQUksQ0FBQ2tJLE9BQU8sQ0FBQ3NMLE9BQU8sS0FBRyxLQUFLLE1BQUl4VCxJQUFFLEtBQUssSUFBRUEsRUFBRW9DLE1BQU0sS0FBRyxJQUFJLENBQUM4RixPQUFPLENBQUNzTCxPQUFPLENBQUM3UixPQUFPLENBQUUzQixDQUFBQTtZQUFJLElBQUksQ0FBQ3dVLGNBQWMsQ0FBQ3hVO1FBQUU7SUFBRztJQUFDeVUsMEJBQXlCO1FBQUMsSUFBSSxDQUFDZixrQkFBa0IsQ0FBQy9SLE9BQU8sQ0FBRTNCLENBQUFBLElBQUdBLE1BQU0sSUFBSSxDQUFDMFQsa0JBQWtCLEdBQUMsRUFBRTtJQUFBO0lBQUNySCxXQUFXck0sQ0FBQyxFQUFDO1FBQUMsSUFBSSxDQUFDa0ksT0FBTyxHQUFDaEYsT0FBT0ksTUFBTSxDQUFDLENBQUMsR0FBRSxJQUFJLENBQUM0RSxPQUFPLEVBQUNsSSxJQUFHLElBQUksQ0FBQzZULFFBQVEsQ0FBQ3hILFVBQVUsQ0FBQyxJQUFJLENBQUNuRSxPQUFPLEdBQUVsSSxFQUFFdVQsU0FBUyxJQUFFLElBQUksQ0FBQ2hNLGVBQWUsQ0FBQ3ZILEVBQUV1VCxTQUFTLEdBQUUsUUFBTXZULEVBQUU4RSxhQUFhLElBQUcsS0FBSSxDQUFDMkMsZUFBZSxHQUFHMUMsUUFBUSxHQUFDL0UsRUFBRThFLGFBQWE7SUFBQztJQUFDMFAsZUFBZXhVLENBQUMsRUFBQztRQUFDLE9BQU9BLEVBQUUwVSxLQUFLLENBQUMsSUFBSSxHQUFFLElBQUksQ0FBQ2xCLE9BQU8sQ0FBQ3ZKLElBQUksQ0FBQ2pLLElBQUcsSUFBSSxDQUFDaUksYUFBYSxDQUFDZ0MsSUFBSSxDQUFDakssRUFBRXNCLElBQUksQ0FBQyxXQUFXO1lBQUssSUFBSSxDQUFDa1MsT0FBTyxHQUFDLElBQUksQ0FBQ0EsT0FBTyxDQUFDbUIsTUFBTSxDQUFFMVUsQ0FBQUEsSUFBR0EsTUFBSUQ7UUFBRyxLQUFLQTtJQUFDO0lBQUNzTSxhQUFZO1FBQUMsT0FBTyxJQUFJLENBQUN1SCxRQUFRLENBQUN2SCxVQUFVO0lBQUU7SUFBQ0MsV0FBVTtRQUFDLE9BQU8sSUFBSSxDQUFDc0gsUUFBUSxDQUFDdEgsUUFBUTtJQUFFO0lBQUNDLFlBQVc7UUFBQyxPQUFPLElBQUksQ0FBQ3FILFFBQVEsQ0FBQ3JILFNBQVM7SUFBRTtJQUFDQyxVQUFVek0sQ0FBQyxFQUFDO1FBQUMsT0FBTyxJQUFJLENBQUM2VCxRQUFRLENBQUNwSCxTQUFTLENBQUN6TTtJQUFFO0lBQUM0VSxjQUFjNVUsQ0FBQyxFQUFDO1FBQUMsTUFBTUMsSUFBRUQsSUFBRSxJQUFJLENBQUM0RyxXQUFXO1FBQUcsSUFBSSxDQUFDaU4sUUFBUSxDQUFDbkgsbUJBQW1CLENBQUN6TTtJQUFFO0lBQUM0VSxtQkFBa0I7UUFBQyxPQUFPLElBQUksQ0FBQ3JCLE9BQU87SUFBQTtJQUFDc0IsVUFBVTdVLENBQUMsRUFBQ0UsQ0FBQyxFQUFDRSxDQUFDLEVBQUNDLENBQUMsRUFBQztRQUFDLE9BQU9OLEVBQUUsSUFBSSxFQUFDLEtBQUssR0FBRSxLQUFLLEdBQUc7WUFBWSxJQUFJQTtZQUFFLElBQUcsSUFBSSxDQUFDMEIsSUFBSSxDQUFDLFFBQU96QixJQUFHLENBQUMsSUFBSSxDQUFDaUksT0FBTyxDQUFDckQsS0FBSyxJQUFFLElBQUksQ0FBQzBCLFNBQVMsTUFBSSxJQUFJLENBQUNMLEtBQUssSUFBRyxJQUFJLENBQUN1TixXQUFXLEdBQUMsTUFBSyxDQUFDdFQsS0FBRyxDQUFDRSxHQUFFO2dCQUFDLE1BQU1ILElBQUUsSUFBSSxDQUFDZ0ksT0FBTyxDQUFDNk0sV0FBVyxJQUFFLENBQUM7Z0JBQUU1SCxPQUFPNkgsZUFBZSxJQUFFLENBQUM5VSxFQUFFK1UsTUFBTSxJQUFHLEtBQUksQ0FBQ3RCLGVBQWUsR0FBQyxJQUFJcUIsaUJBQWdCOVUsRUFBRStVLE1BQU0sR0FBQyxTQUFRalYsQ0FBQUEsSUFBRSxJQUFJLENBQUMyVCxlQUFlLEtBQUcsS0FBSyxNQUFJM1QsSUFBRSxLQUFLLElBQUVBLEVBQUVpVixNQUFNO2dCQUFFLE1BQU01VSxJQUFFTCxDQUFBQSxJQUFHLElBQUksQ0FBQzBCLElBQUksQ0FBQyxXQUFVMUI7Z0JBQUdHLElBQUUsTUFBTUksRUFBRXVELFNBQVMsQ0FBQzdELEdBQUVJLEdBQUVIO1lBQUU7WUFBQyxJQUFJLENBQUMyRixNQUFNLENBQUM1RixHQUFFRTtZQUFHLE1BQU1PLElBQUUsTUFBTSxJQUFJTixRQUFTSixDQUFBQTtnQkFBSSxNQUFNQyxJQUFFSyxLQUFHLElBQUksQ0FBQ3NHLFdBQVc7Z0JBQUczRyxJQUFFRCxFQUFFQyxLQUFHLElBQUksQ0FBQ3lULGtCQUFrQixDQUFDekosSUFBSSxDQUFDLElBQUksQ0FBQy9FLFlBQVksQ0FBQyxrQkFBa0IsSUFBSWxGLEVBQUUsSUFBSSxDQUFDNEcsV0FBVyxLQUFLO29CQUFDdEYsTUFBSyxDQUFDO2dCQUFDO1lBQUc7WUFBSSxJQUFHLENBQUNyQixLQUFHLENBQUNFLEdBQUU7Z0JBQUMsTUFBTUgsSUFBRSxJQUFJLENBQUN5SCxlQUFlO2dCQUFHekgsYUFBYXdLLEtBQUl4SyxDQUFBQSxFQUFFdUMsUUFBUSxHQUFDN0IsQ0FBQUE7WUFBRTtZQUFDLElBQUdMLEdBQUUsSUFBSSxDQUFDb1QsV0FBVyxHQUFDdlQsRUFBRWdDLFlBQVksQ0FBQzdCLEdBQUVLLEtBQUc7aUJBQVEsSUFBR1AsR0FBRTtnQkFBQyxNQUFNSCxJQUFFLE1BQU1HLEVBQUV3UyxXQUFXO2dCQUFHLElBQUksQ0FBQ2MsV0FBVyxHQUFDLE1BQU12VCxFQUFFMEIsTUFBTSxDQUFDNUIsR0FBRSxJQUFJLENBQUNrSSxPQUFPLENBQUNwRyxVQUFVO1lBQUM7WUFBQyxJQUFJLENBQUMyUixXQUFXLElBQUcsS0FBSSxDQUFDL1IsSUFBSSxDQUFDLFVBQVMsSUFBSSxDQUFDa0YsV0FBVyxLQUFJLElBQUksQ0FBQ2lOLFFBQVEsQ0FBQzVELE1BQU0sQ0FBQyxJQUFJLENBQUN3RCxXQUFXLElBQUcsSUFBSSxDQUFDL1IsSUFBSSxDQUFDLFNBQVEsSUFBSSxDQUFDa0YsV0FBVztRQUFHO0lBQUc7SUFBQ1IsS0FBS25HLENBQUMsRUFBQ0MsQ0FBQyxFQUFDQyxDQUFDLEVBQUM7UUFBQyxPQUFPSCxFQUFFLElBQUksRUFBQyxLQUFLLEdBQUUsS0FBSyxHQUFHO1lBQVksSUFBRztnQkFBQyxPQUFPLE1BQU0sSUFBSSxDQUFDOFUsU0FBUyxDQUFDN1UsR0FBRSxLQUFLLEdBQUVDLEdBQUVDO1lBQUUsRUFBQyxPQUFNSCxHQUFFO2dCQUFDLE1BQU0sSUFBSSxDQUFDMEIsSUFBSSxDQUFDLFNBQVExQixJQUFHQTtZQUFDO1FBQUM7SUFBRztJQUFDa1YsU0FBU2pWLENBQUMsRUFBQ0MsQ0FBQyxFQUFDQyxDQUFDLEVBQUM7UUFBQyxPQUFPSCxFQUFFLElBQUksRUFBQyxLQUFLLEdBQUUsS0FBSyxHQUFHO1lBQVksSUFBRztnQkFBQyxPQUFPLE1BQU0sSUFBSSxDQUFDOFUsU0FBUyxDQUFDLElBQUc3VSxHQUFFQyxHQUFFQztZQUFFLEVBQUMsT0FBTUgsR0FBRTtnQkFBQyxNQUFNLElBQUksQ0FBQzBCLElBQUksQ0FBQyxTQUFRMUIsSUFBR0E7WUFBQztRQUFDO0lBQUc7SUFBQzZRLEtBQUs3USxDQUFDLEVBQUM7UUFBQyxJQUFHLENBQUMsSUFBSSxDQUFDeVQsV0FBVyxFQUFDLE1BQU0sSUFBSXhQLE1BQU07UUFBbUIsSUFBSSxDQUFDNFAsUUFBUSxDQUFDaEQsSUFBSSxDQUFDN1EsSUFBRyxJQUFJLENBQUMwQixJQUFJLENBQUMsUUFBTzFCO0lBQUU7SUFBQ21WLGlCQUFnQjtRQUFDLE9BQU8sSUFBSSxDQUFDMUIsV0FBVztJQUFBO0lBQUMyQixZQUFZLEVBQUNDLFVBQVNyVixJQUFFLENBQUMsRUFBQ3NWLFdBQVVyVixJQUFFLEdBQUcsRUFBQ3NWLFdBQVVyVixJQUFFLEdBQUcsRUFBQyxHQUFDLENBQUMsQ0FBQyxFQUFDO1FBQUMsSUFBRyxDQUFDLElBQUksQ0FBQ3VULFdBQVcsRUFBQyxNQUFNLElBQUl4UCxNQUFNO1FBQXNDLE1BQU05RCxJQUFFa0MsS0FBS29KLEdBQUcsQ0FBQ3pMLEdBQUUsSUFBSSxDQUFDeVQsV0FBVyxDQUFDalIsZ0JBQWdCLEdBQUVuQyxJQUFFLEVBQUU7UUFBQyxJQUFJLElBQUlMLElBQUUsR0FBRUEsSUFBRUcsR0FBRUgsSUFBSTtZQUFDLE1BQU1HLElBQUUsSUFBSSxDQUFDc1QsV0FBVyxDQUFDaFIsY0FBYyxDQUFDekMsSUFBR00sSUFBRSxFQUFFLEVBQUNDLElBQUVKLEVBQUVpQyxNQUFNLEdBQUNuQztZQUFFLElBQUksSUFBSUQsSUFBRSxHQUFFQSxJQUFFQyxHQUFFRCxJQUFJO2dCQUFDLE1BQU1DLElBQUVFLEVBQUVtUCxLQUFLLENBQUNqTixLQUFLK00sS0FBSyxDQUFDcFAsSUFBRU8sSUFBRzhCLEtBQUtrTixJQUFJLENBQUMsQ0FBQ3ZQLElBQUUsS0FBR087Z0JBQUksSUFBSUYsSUFBRTtnQkFBRSxJQUFJLElBQUlMLElBQUUsR0FBRUEsSUFBRUMsRUFBRW1DLE1BQU0sRUFBQ3BDLElBQUk7b0JBQUMsTUFBTUUsSUFBRUQsQ0FBQyxDQUFDRCxFQUFFO29CQUFDcUMsS0FBS0MsR0FBRyxDQUFDcEMsS0FBR21DLEtBQUtDLEdBQUcsQ0FBQ2pDLE1BQUtBLENBQUFBLElBQUVILENBQUFBO2dCQUFFO2dCQUFDSSxFQUFFMkosSUFBSSxDQUFDNUgsS0FBS21DLEtBQUssQ0FBQ25FLElBQUVILEtBQUdBO1lBQUU7WUFBQ0csRUFBRTRKLElBQUksQ0FBQzNKO1FBQUU7UUFBQyxPQUFPRDtJQUFDO0lBQUN1RyxjQUFhO1FBQUMsSUFBSTVHLElBQUUsS0FBSyxDQUFDNEcsaUJBQWU7UUFBRSxPQUFPLE1BQUk1RyxLQUFHQSxNQUFJLElBQUUsS0FBRyxDQUFDLElBQUksQ0FBQ3lULFdBQVcsSUFBR3pULENBQUFBLElBQUUsSUFBSSxDQUFDeVQsV0FBVyxDQUFDbFIsUUFBUSxHQUFFdkM7SUFBQztJQUFDd1Ysa0JBQWtCeFYsQ0FBQyxFQUFDO1FBQUMsSUFBSSxDQUFDa0ksT0FBTyxDQUFDa0wsUUFBUSxHQUFDcFQ7SUFBQztJQUFDMEcsUUFBUTFHLENBQUMsRUFBQztRQUFDLEtBQUssQ0FBQzBHLFFBQVExRyxJQUFHLElBQUksQ0FBQ29VLGNBQWMsQ0FBQ3BVLElBQUcsSUFBSSxDQUFDMEIsSUFBSSxDQUFDLGNBQWExQjtJQUFFO0lBQUNzVSxPQUFPdFUsQ0FBQyxFQUFDO1FBQUMsTUFBTUMsSUFBRSxJQUFJLENBQUMyRyxXQUFXLEtBQUc1RztRQUFFLElBQUksQ0FBQzBHLE9BQU8sQ0FBQ3pHO0lBQUU7SUFBQ3dWLFlBQVc7UUFBQyxPQUFPelYsRUFBRSxJQUFJLEVBQUMsS0FBSyxHQUFFLEtBQUssR0FBRztZQUFZLE9BQU8sSUFBSSxDQUFDdUcsU0FBUyxLQUFHLElBQUksQ0FBQ0wsS0FBSyxLQUFHLElBQUksQ0FBQ0ksSUFBSTtRQUFFO0lBQUc7SUFBQ3VMLE9BQU07UUFBQyxJQUFJLENBQUMzTCxLQUFLLElBQUcsSUFBSSxDQUFDUSxPQUFPLENBQUM7SUFBRTtJQUFDZ1AsS0FBSzFWLENBQUMsRUFBQztRQUFDLElBQUksQ0FBQzBHLE9BQU8sQ0FBQyxJQUFJLENBQUNHLGNBQWMsS0FBRzdHO0lBQUU7SUFBQzJWLFFBQU87UUFBQyxJQUFJLENBQUN2UCxJQUFJLENBQUMsSUFBRztZQUFDO2dCQUFDO2FBQUU7U0FBQyxFQUFDO0lBQUs7SUFBQ0MsZ0JBQWdCckcsQ0FBQyxFQUFDO1FBQUMsSUFBSSxDQUFDeVUsdUJBQXVCLElBQUcsS0FBSyxDQUFDcE8sZ0JBQWdCckcsSUFBRyxJQUFJLENBQUM4VCxnQkFBZ0I7SUFBRTtJQUFDMUMsY0FBYTtRQUFDLE9BQU9wUixFQUFFLElBQUksRUFBQ3lSLFdBQVUsS0FBSyxHQUFHLFVBQVV6UixJQUFFLFdBQVcsRUFBQ0MsSUFBRSxDQUFDLEVBQUNDLElBQUUsU0FBUztZQUFFLE9BQU8sSUFBSSxDQUFDMlQsUUFBUSxDQUFDekMsV0FBVyxDQUFDcFIsR0FBRUMsR0FBRUM7UUFBRTtJQUFHO0lBQUMrRixVQUFTO1FBQUMsSUFBSWpHO1FBQUUsSUFBSSxDQUFDMEIsSUFBSSxDQUFDLFlBQVcsU0FBUTFCLENBQUFBLElBQUUsSUFBSSxDQUFDMlQsZUFBZSxLQUFHLEtBQUssTUFBSTNULEtBQUdBLEVBQUU0VixLQUFLLElBQUcsSUFBSSxDQUFDcEMsT0FBTyxDQUFDN1IsT0FBTyxDQUFFM0IsQ0FBQUEsSUFBR0EsRUFBRWlHLE9BQU8sS0FBSyxJQUFJLENBQUNnQyxhQUFhLENBQUN0RyxPQUFPLENBQUUzQixDQUFBQSxJQUFHQSxNQUFNLElBQUksQ0FBQ3lVLHVCQUF1QixJQUFHLElBQUksQ0FBQ2IsS0FBSyxDQUFDM04sT0FBTyxJQUFHLElBQUksQ0FBQzROLFFBQVEsQ0FBQzVOLE9BQU8sSUFBRyxLQUFLLENBQUNBO0lBQVM7QUFBQztBQUFDeUUsRUFBRW1MLFVBQVUsR0FBQyxjQUFjNVY7SUFBRWdCLFlBQVlqQixDQUFDLENBQUM7UUFBQyxLQUFLLElBQUcsSUFBSSxDQUFDaUksYUFBYSxHQUFDLEVBQUUsRUFBQyxJQUFJLENBQUNDLE9BQU8sR0FBQ2xJO0lBQUM7SUFBQzhWLFNBQVEsQ0FBQztJQUFDcEIsTUFBTTFVLENBQUMsRUFBQztRQUFDLElBQUksQ0FBQytWLFVBQVUsR0FBQy9WLEdBQUUsSUFBSSxDQUFDOFYsTUFBTTtJQUFFO0lBQUM3UCxVQUFTO1FBQUMsSUFBSSxDQUFDdkUsSUFBSSxDQUFDLFlBQVcsSUFBSSxDQUFDdUcsYUFBYSxDQUFDdEcsT0FBTyxDQUFFM0IsQ0FBQUEsSUFBR0E7SUFBSztBQUFDLEdBQUUwSyxFQUFFc0wsR0FBRyxHQUFDMVY7QUFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZWF0YmF0dGxlLW5leHQvLi9ub2RlX21vZHVsZXMvd2F2ZXN1cmZlci5qcy9kaXN0L3dhdmVzdXJmZXIuZXNtLmpzP2Y0MGYiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gdCh0LGUsaSxzKXtyZXR1cm4gbmV3KGl8fChpPVByb21pc2UpKSgoZnVuY3Rpb24obixyKXtmdW5jdGlvbiBvKHQpe3RyeXtoKHMubmV4dCh0KSl9Y2F0Y2godCl7cih0KX19ZnVuY3Rpb24gYSh0KXt0cnl7aChzLnRocm93KHQpKX1jYXRjaCh0KXtyKHQpfX1mdW5jdGlvbiBoKHQpe3ZhciBlO3QuZG9uZT9uKHQudmFsdWUpOihlPXQudmFsdWUsZSBpbnN0YW5jZW9mIGk/ZTpuZXcgaSgoZnVuY3Rpb24odCl7dChlKX0pKSkudGhlbihvLGEpfWgoKHM9cy5hcHBseSh0LGV8fFtdKSkubmV4dCgpKX0pKX1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTdXBwcmVzc2VkRXJyb3ImJlN1cHByZXNzZWRFcnJvcjtjbGFzcyBle2NvbnN0cnVjdG9yKCl7dGhpcy5saXN0ZW5lcnM9e319b24odCxlLGkpe2lmKHRoaXMubGlzdGVuZXJzW3RdfHwodGhpcy5saXN0ZW5lcnNbdF09bmV3IFNldCksdGhpcy5saXN0ZW5lcnNbdF0uYWRkKGUpLG51bGw9PWk/dm9pZCAwOmkub25jZSl7Y29uc3QgaT0oKT0+e3RoaXMudW4odCxpKSx0aGlzLnVuKHQsZSl9O3JldHVybiB0aGlzLm9uKHQsaSksaX1yZXR1cm4oKT0+dGhpcy51bih0LGUpfXVuKHQsZSl7dmFyIGk7bnVsbD09PShpPXRoaXMubGlzdGVuZXJzW3RdKXx8dm9pZCAwPT09aXx8aS5kZWxldGUoZSl9b25jZSh0LGUpe3JldHVybiB0aGlzLm9uKHQsZSx7b25jZTohMH0pfXVuQWxsKCl7dGhpcy5saXN0ZW5lcnM9e319ZW1pdCh0LC4uLmUpe3RoaXMubGlzdGVuZXJzW3RdJiZ0aGlzLmxpc3RlbmVyc1t0XS5mb3JFYWNoKCh0PT50KC4uLmUpKSl9fWNvbnN0IGk9e2RlY29kZTpmdW5jdGlvbihlLGkpe3JldHVybiB0KHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7Y29uc3QgdD1uZXcgQXVkaW9Db250ZXh0KHtzYW1wbGVSYXRlOml9KTtyZXR1cm4gdC5kZWNvZGVBdWRpb0RhdGEoZSkuZmluYWxseSgoKCk9PnQuY2xvc2UoKSkpfSkpfSxjcmVhdGVCdWZmZXI6ZnVuY3Rpb24odCxlKXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgdFswXSYmKHQ9W3RdKSxmdW5jdGlvbih0KXtjb25zdCBlPXRbMF07aWYoZS5zb21lKCh0PT50PjF8fHQ8LTEpKSl7Y29uc3QgaT1lLmxlbmd0aDtsZXQgcz0wO2ZvcihsZXQgdD0wO3Q8aTt0Kyspe2NvbnN0IGk9TWF0aC5hYnMoZVt0XSk7aT5zJiYocz1pKX1mb3IoY29uc3QgZSBvZiB0KWZvcihsZXQgdD0wO3Q8aTt0KyspZVt0XS89c319KHQpLHtkdXJhdGlvbjplLGxlbmd0aDp0WzBdLmxlbmd0aCxzYW1wbGVSYXRlOnRbMF0ubGVuZ3RoL2UsbnVtYmVyT2ZDaGFubmVsczp0Lmxlbmd0aCxnZXRDaGFubmVsRGF0YTplPT5udWxsPT10P3ZvaWQgMDp0W2VdLGNvcHlGcm9tQ2hhbm5lbDpBdWRpb0J1ZmZlci5wcm90b3R5cGUuY29weUZyb21DaGFubmVsLGNvcHlUb0NoYW5uZWw6QXVkaW9CdWZmZXIucHJvdG90eXBlLmNvcHlUb0NoYW5uZWx9fX07ZnVuY3Rpb24gcyh0LGUpe2NvbnN0IGk9ZS54bWxucz9kb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoZS54bWxucyx0KTpkb2N1bWVudC5jcmVhdGVFbGVtZW50KHQpO2Zvcihjb25zdFt0LG5db2YgT2JqZWN0LmVudHJpZXMoZSkpaWYoXCJjaGlsZHJlblwiPT09dClmb3IoY29uc3RbdCxuXW9mIE9iamVjdC5lbnRyaWVzKGUpKVwic3RyaW5nXCI9PXR5cGVvZiBuP2kuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobikpOmkuYXBwZW5kQ2hpbGQocyh0LG4pKTtlbHNlXCJzdHlsZVwiPT09dD9PYmplY3QuYXNzaWduKGkuc3R5bGUsbik6XCJ0ZXh0Q29udGVudFwiPT09dD9pLnRleHRDb250ZW50PW46aS5zZXRBdHRyaWJ1dGUodCxuLnRvU3RyaW5nKCkpO3JldHVybiBpfWZ1bmN0aW9uIG4odCxlLGkpe2NvbnN0IG49cyh0LGV8fHt9KTtyZXR1cm4gbnVsbD09aXx8aS5hcHBlbmRDaGlsZChuKSxufXZhciByPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLGNyZWF0ZUVsZW1lbnQ6bixkZWZhdWx0Om59KTtjb25zdCBvPXtmZXRjaEJsb2I6ZnVuY3Rpb24oZSxpLHMpe3JldHVybiB0KHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7Y29uc3Qgbj15aWVsZCBmZXRjaChlLHMpO2lmKG4uc3RhdHVzPj00MDApdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggJHtlfTogJHtuLnN0YXR1c30gKCR7bi5zdGF0dXNUZXh0fSlgKTtyZXR1cm4gZnVuY3Rpb24oZSxpKXt0KHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7aWYoIWUuYm9keXx8IWUuaGVhZGVycylyZXR1cm47Y29uc3Qgcz1lLmJvZHkuZ2V0UmVhZGVyKCksbj1OdW1iZXIoZS5oZWFkZXJzLmdldChcIkNvbnRlbnQtTGVuZ3RoXCIpKXx8MDtsZXQgcj0wO2NvbnN0IG89ZT0+dCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3IrPShudWxsPT1lP3ZvaWQgMDplLmxlbmd0aCl8fDA7Y29uc3QgdD1NYXRoLnJvdW5kKHIvbioxMDApO2kodCl9KSksYT0oKT0+dCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe2xldCB0O3RyeXt0PXlpZWxkIHMucmVhZCgpfWNhdGNoKHQpe3JldHVybn10LmRvbmV8fChvKHQudmFsdWUpLHlpZWxkIGEoKSl9KSk7YSgpfSkpfShuLmNsb25lKCksaSksbi5ibG9iKCl9KSl9fTtjbGFzcyBhIGV4dGVuZHMgZXtjb25zdHJ1Y3Rvcih0KXtzdXBlcigpLHRoaXMuaXNFeHRlcm5hbE1lZGlhPSExLHQubWVkaWE/KHRoaXMubWVkaWE9dC5tZWRpYSx0aGlzLmlzRXh0ZXJuYWxNZWRpYT0hMCk6dGhpcy5tZWRpYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYXVkaW9cIiksdC5tZWRpYUNvbnRyb2xzJiYodGhpcy5tZWRpYS5jb250cm9scz0hMCksdC5hdXRvcGxheSYmKHRoaXMubWVkaWEuYXV0b3BsYXk9ITApLG51bGwhPXQucGxheWJhY2tSYXRlJiZ0aGlzLm9uTWVkaWFFdmVudChcImNhbnBsYXlcIiwoKCk9PntudWxsIT10LnBsYXliYWNrUmF0ZSYmKHRoaXMubWVkaWEucGxheWJhY2tSYXRlPXQucGxheWJhY2tSYXRlKX0pLHtvbmNlOiEwfSl9b25NZWRpYUV2ZW50KHQsZSxpKXtyZXR1cm4gdGhpcy5tZWRpYS5hZGRFdmVudExpc3RlbmVyKHQsZSxpKSwoKT0+dGhpcy5tZWRpYS5yZW1vdmVFdmVudExpc3RlbmVyKHQsZSxpKX1nZXRTcmMoKXtyZXR1cm4gdGhpcy5tZWRpYS5jdXJyZW50U3JjfHx0aGlzLm1lZGlhLnNyY3x8XCJcIn1yZXZva2VTcmMoKXtjb25zdCB0PXRoaXMuZ2V0U3JjKCk7dC5zdGFydHNXaXRoKFwiYmxvYjpcIikmJlVSTC5yZXZva2VPYmplY3RVUkwodCl9Y2FuUGxheVR5cGUodCl7cmV0dXJuXCJcIiE9PXRoaXMubWVkaWEuY2FuUGxheVR5cGUodCl9c2V0U3JjKHQsZSl7Y29uc3QgaT10aGlzLmdldFNyYygpO2lmKHQmJmk9PT10KXJldHVybjt0aGlzLnJldm9rZVNyYygpO2NvbnN0IHM9ZSBpbnN0YW5jZW9mIEJsb2ImJih0aGlzLmNhblBsYXlUeXBlKGUudHlwZSl8fCF0KT9VUkwuY3JlYXRlT2JqZWN0VVJMKGUpOnQ7dHJ5e3RoaXMubWVkaWEuc3JjPXN9Y2F0Y2goZSl7dGhpcy5tZWRpYS5zcmM9dH19ZGVzdHJveSgpe3RoaXMubWVkaWEucGF1c2UoKSx0aGlzLmlzRXh0ZXJuYWxNZWRpYXx8KHRoaXMubWVkaWEucmVtb3ZlKCksdGhpcy5yZXZva2VTcmMoKSx0aGlzLm1lZGlhLnNyYz1cIlwiLHRoaXMubWVkaWEubG9hZCgpKX1zZXRNZWRpYUVsZW1lbnQodCl7dGhpcy5tZWRpYT10fXBsYXkoKXtyZXR1cm4gdCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3JldHVybiB0aGlzLm1lZGlhLnBsYXkoKX0pKX1wYXVzZSgpe3RoaXMubWVkaWEucGF1c2UoKX1pc1BsYXlpbmcoKXtyZXR1cm4hdGhpcy5tZWRpYS5wYXVzZWQmJiF0aGlzLm1lZGlhLmVuZGVkfXNldFRpbWUodCl7dGhpcy5tZWRpYS5jdXJyZW50VGltZT10fWdldER1cmF0aW9uKCl7cmV0dXJuIHRoaXMubWVkaWEuZHVyYXRpb259Z2V0Q3VycmVudFRpbWUoKXtyZXR1cm4gdGhpcy5tZWRpYS5jdXJyZW50VGltZX1nZXRWb2x1bWUoKXtyZXR1cm4gdGhpcy5tZWRpYS52b2x1bWV9c2V0Vm9sdW1lKHQpe3RoaXMubWVkaWEudm9sdW1lPXR9Z2V0TXV0ZWQoKXtyZXR1cm4gdGhpcy5tZWRpYS5tdXRlZH1zZXRNdXRlZCh0KXt0aGlzLm1lZGlhLm11dGVkPXR9Z2V0UGxheWJhY2tSYXRlKCl7cmV0dXJuIHRoaXMubWVkaWEucGxheWJhY2tSYXRlfWlzU2Vla2luZygpe3JldHVybiB0aGlzLm1lZGlhLnNlZWtpbmd9c2V0UGxheWJhY2tSYXRlKHQsZSl7bnVsbCE9ZSYmKHRoaXMubWVkaWEucHJlc2VydmVzUGl0Y2g9ZSksdGhpcy5tZWRpYS5wbGF5YmFja1JhdGU9dH1nZXRNZWRpYUVsZW1lbnQoKXtyZXR1cm4gdGhpcy5tZWRpYX1zZXRTaW5rSWQodCl7cmV0dXJuIHRoaXMubWVkaWEuc2V0U2lua0lkKHQpfX1jbGFzcyBoIGV4dGVuZHMgZXtjb25zdHJ1Y3Rvcih0LGUpe3N1cGVyKCksdGhpcy50aW1lb3V0cz1bXSx0aGlzLmlzU2Nyb2xsYWJsZT0hMSx0aGlzLmF1ZGlvRGF0YT1udWxsLHRoaXMucmVzaXplT2JzZXJ2ZXI9bnVsbCx0aGlzLmxhc3RDb250YWluZXJXaWR0aD0wLHRoaXMuaXNEcmFnZ2luZz0hMSx0aGlzLnN1YnNjcmlwdGlvbnM9W10sdGhpcy5zdWJzY3JpcHRpb25zPVtdLHRoaXMub3B0aW9ucz10O2NvbnN0IGk9dGhpcy5wYXJlbnRGcm9tT3B0aW9uc0NvbnRhaW5lcih0LmNvbnRhaW5lcik7dGhpcy5wYXJlbnQ9aTtjb25zdFtzLG5dPXRoaXMuaW5pdEh0bWwoKTtpLmFwcGVuZENoaWxkKHMpLHRoaXMuY29udGFpbmVyPXMsdGhpcy5zY3JvbGxDb250YWluZXI9bi5xdWVyeVNlbGVjdG9yKFwiLnNjcm9sbFwiKSx0aGlzLndyYXBwZXI9bi5xdWVyeVNlbGVjdG9yKFwiLndyYXBwZXJcIiksdGhpcy5jYW52YXNXcmFwcGVyPW4ucXVlcnlTZWxlY3RvcihcIi5jYW52YXNlc1wiKSx0aGlzLnByb2dyZXNzV3JhcHBlcj1uLnF1ZXJ5U2VsZWN0b3IoXCIucHJvZ3Jlc3NcIiksdGhpcy5jdXJzb3I9bi5xdWVyeVNlbGVjdG9yKFwiLmN1cnNvclwiKSxlJiZuLmFwcGVuZENoaWxkKGUpLHRoaXMuaW5pdEV2ZW50cygpfXBhcmVudEZyb21PcHRpb25zQ29udGFpbmVyKHQpe2xldCBlO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0P2U9ZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0KTp0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQmJihlPXQpLCFlKXRocm93IG5ldyBFcnJvcihcIkNvbnRhaW5lciBub3QgZm91bmRcIik7cmV0dXJuIGV9aW5pdEV2ZW50cygpe2NvbnN0IHQ9dD0+e2NvbnN0IGU9dGhpcy53cmFwcGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGk9dC5jbGllbnRYLWUubGVmdCxzPXQuY2xpZW50WS1lLnRvcDtyZXR1cm5baS9lLndpZHRoLHMvZS5oZWlnaHRdfTtpZih0aGlzLndyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsKGU9Pntjb25zdFtpLHNdPXQoZSk7dGhpcy5lbWl0KFwiY2xpY2tcIixpLHMpfSkpLHRoaXMud3JhcHBlci5hZGRFdmVudExpc3RlbmVyKFwiZGJsY2xpY2tcIiwoZT0+e2NvbnN0W2ksc109dChlKTt0aGlzLmVtaXQoXCJkYmxjbGlja1wiLGkscyl9KSksITAhPT10aGlzLm9wdGlvbnMuZHJhZ1RvU2VlayYmXCJvYmplY3RcIiE9dHlwZW9mIHRoaXMub3B0aW9ucy5kcmFnVG9TZWVrfHx0aGlzLmluaXREcmFnKCksdGhpcy5zY3JvbGxDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCgoKT0+e2NvbnN0e3Njcm9sbExlZnQ6dCxzY3JvbGxXaWR0aDplLGNsaWVudFdpZHRoOml9PXRoaXMuc2Nyb2xsQ29udGFpbmVyLHM9dC9lLG49KHQraSkvZTt0aGlzLmVtaXQoXCJzY3JvbGxcIixzLG4sdCx0K2kpfSkpLFwiZnVuY3Rpb25cIj09dHlwZW9mIFJlc2l6ZU9ic2VydmVyKXtjb25zdCB0PXRoaXMuY3JlYXRlRGVsYXkoMTAwKTt0aGlzLnJlc2l6ZU9ic2VydmVyPW5ldyBSZXNpemVPYnNlcnZlcigoKCk9Pnt0KCkudGhlbigoKCk9PnRoaXMub25Db250YWluZXJSZXNpemUoKSkpLmNhdGNoKCgoKT0+e30pKX0pKSx0aGlzLnJlc2l6ZU9ic2VydmVyLm9ic2VydmUodGhpcy5zY3JvbGxDb250YWluZXIpfX1vbkNvbnRhaW5lclJlc2l6ZSgpe2NvbnN0IHQ9dGhpcy5wYXJlbnQuY2xpZW50V2lkdGg7dD09PXRoaXMubGFzdENvbnRhaW5lcldpZHRoJiZcImF1dG9cIiE9PXRoaXMub3B0aW9ucy5oZWlnaHR8fCh0aGlzLmxhc3RDb250YWluZXJXaWR0aD10LHRoaXMucmVSZW5kZXIoKSl9aW5pdERyYWcoKXt0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChmdW5jdGlvbih0LGUsaSxzLG49MyxyPTAsbz0xMDApe2lmKCF0KXJldHVybigpPT57fTtjb25zdCBhPW1hdGNoTWVkaWEoXCIocG9pbnRlcjogY29hcnNlKVwiKS5tYXRjaGVzO2xldCBoPSgpPT57fTtjb25zdCBsPWw9PntpZihsLmJ1dHRvbiE9PXIpcmV0dXJuO2wucHJldmVudERlZmF1bHQoKSxsLnN0b3BQcm9wYWdhdGlvbigpO2xldCBkPWwuY2xpZW50WCxjPWwuY2xpZW50WSx1PSExO2NvbnN0IHA9RGF0ZS5ub3coKSxtPXM9PntpZihzLnByZXZlbnREZWZhdWx0KCkscy5zdG9wUHJvcGFnYXRpb24oKSxhJiZEYXRlLm5vdygpLXA8bylyZXR1cm47Y29uc3Qgcj1zLmNsaWVudFgsaD1zLmNsaWVudFksbD1yLWQsbT1oLWM7aWYodXx8TWF0aC5hYnMobCk+bnx8TWF0aC5hYnMobSk+bil7Y29uc3Qgcz10LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLHtsZWZ0Om4sdG9wOm99PXM7dXx8KG51bGw9PWl8fGkoZC1uLGMtbyksdT0hMCksZShsLG0sci1uLGgtbyksZD1yLGM9aH19LGc9ZT0+e2lmKHUpe2NvbnN0IGk9ZS5jbGllbnRYLG49ZS5jbGllbnRZLHI9dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSx7bGVmdDpvLHRvcDphfT1yO251bGw9PXN8fHMoaS1vLG4tYSl9aCgpfSxmPXQ9Pnt0LnJlbGF0ZWRUYXJnZXQmJnQucmVsYXRlZFRhcmdldCE9PWRvY3VtZW50LmRvY3VtZW50RWxlbWVudHx8Zyh0KX0sdj10PT57dSYmKHQuc3RvcFByb3BhZ2F0aW9uKCksdC5wcmV2ZW50RGVmYXVsdCgpKX0sYj10PT57dSYmdC5wcmV2ZW50RGVmYXVsdCgpfTtkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcm1vdmVcIixtKSxkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsZyksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJvdXRcIixmKSxkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcmNhbmNlbFwiLGYpLGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIixiLHtwYXNzaXZlOiExfSksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsdix7Y2FwdHVyZTohMH0pLGg9KCk9Pntkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcm1vdmVcIixtKSxkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsZyksZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJvdXRcIixmKSxkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcmNhbmNlbFwiLGYpLGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIixiKSxzZXRUaW1lb3V0KCgoKT0+e2RvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLHYse2NhcHR1cmU6ITB9KX0pLDEwKX19O3JldHVybiB0LmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVyZG93blwiLGwpLCgpPT57aCgpLHQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsbCl9fSh0aGlzLndyYXBwZXIsKCh0LGUsaSk9Pnt0aGlzLmVtaXQoXCJkcmFnXCIsTWF0aC5tYXgoMCxNYXRoLm1pbigxLGkvdGhpcy53cmFwcGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoKSkpfSksKHQ9Pnt0aGlzLmlzRHJhZ2dpbmc9ITAsdGhpcy5lbWl0KFwiZHJhZ3N0YXJ0XCIsTWF0aC5tYXgoMCxNYXRoLm1pbigxLHQvdGhpcy53cmFwcGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoKSkpfSksKHQ9Pnt0aGlzLmlzRHJhZ2dpbmc9ITEsdGhpcy5lbWl0KFwiZHJhZ2VuZFwiLE1hdGgubWF4KDAsTWF0aC5taW4oMSx0L3RoaXMud3JhcHBlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCkpKX0pKSl9Z2V0SGVpZ2h0KHQsZSl7dmFyIGk7Y29uc3Qgcz0obnVsbD09PShpPXRoaXMuYXVkaW9EYXRhKXx8dm9pZCAwPT09aT92b2lkIDA6aS5udW1iZXJPZkNoYW5uZWxzKXx8MTtpZihudWxsPT10KXJldHVybiAxMjg7aWYoIWlzTmFOKE51bWJlcih0KSkpcmV0dXJuIE51bWJlcih0KTtpZihcImF1dG9cIj09PXQpe2NvbnN0IHQ9dGhpcy5wYXJlbnQuY2xpZW50SGVpZ2h0fHwxMjg7cmV0dXJuKG51bGw9PWU/dm9pZCAwOmUuZXZlcnkoKHQ9PiF0Lm92ZXJsYXkpKSk/dC9zOnR9cmV0dXJuIDEyOH1pbml0SHRtbCgpe2NvbnN0IHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxlPXQuYXR0YWNoU2hhZG93KHttb2RlOlwib3BlblwifSksaT10aGlzLm9wdGlvbnMuY3NwTm9uY2UmJlwic3RyaW5nXCI9PXR5cGVvZiB0aGlzLm9wdGlvbnMuY3NwTm9uY2U/dGhpcy5vcHRpb25zLmNzcE5vbmNlLnJlcGxhY2UoL1wiL2csXCJcIik6XCJcIjtyZXR1cm4gZS5pbm5lckhUTUw9YFxcbiAgICAgIDxzdHlsZSR7aT9gIG5vbmNlPVwiJHtpfVwiYDpcIlwifT5cXG4gICAgICAgIDpob3N0IHtcXG4gICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgICAgICAgIG1pbi13aWR0aDogMXB4O1xcbiAgICAgICAgfVxcbiAgICAgICAgOmhvc3QgYXVkaW8ge1xcbiAgICAgICAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgICB9XFxuICAgICAgICA6aG9zdCAuc2Nyb2xsIHtcXG4gICAgICAgICAgb3ZlcmZsb3cteDogYXV0bztcXG4gICAgICAgICAgb3ZlcmZsb3cteTogaGlkZGVuO1xcbiAgICAgICAgICB3aWR0aDogMTAwJTtcXG4gICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICAgICAgfVxcbiAgICAgICAgOmhvc3QgLm5vU2Nyb2xsYmFyIHtcXG4gICAgICAgICAgc2Nyb2xsYmFyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gICAgICAgICAgc2Nyb2xsYmFyLXdpZHRoOiBub25lO1xcbiAgICAgICAgfVxcbiAgICAgICAgOmhvc3QgLm5vU2Nyb2xsYmFyOjotd2Via2l0LXNjcm9sbGJhciB7XFxuICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgICAgICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG4gICAgICAgIH1cXG4gICAgICAgIDpob3N0IC53cmFwcGVyIHtcXG4gICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICAgICAgICBvdmVyZmxvdzogdmlzaWJsZTtcXG4gICAgICAgICAgei1pbmRleDogMjtcXG4gICAgICAgIH1cXG4gICAgICAgIDpob3N0IC5jYW52YXNlcyB7XFxuICAgICAgICAgIG1pbi1oZWlnaHQ6ICR7dGhpcy5nZXRIZWlnaHQodGhpcy5vcHRpb25zLmhlaWdodCx0aGlzLm9wdGlvbnMuc3BsaXRDaGFubmVscyl9cHg7XFxuICAgICAgICB9XFxuICAgICAgICA6aG9zdCAuY2FudmFzZXMgPiBkaXYge1xcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgICB9XFxuICAgICAgICA6aG9zdCBjYW52YXMge1xcbiAgICAgICAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgICAgICB0b3A6IDA7XFxuICAgICAgICAgIGltYWdlLXJlbmRlcmluZzogcGl4ZWxhdGVkO1xcbiAgICAgICAgfVxcbiAgICAgICAgOmhvc3QgLnByb2dyZXNzIHtcXG4gICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgICAgei1pbmRleDogMjtcXG4gICAgICAgICAgdG9wOiAwO1xcbiAgICAgICAgICBsZWZ0OiAwO1xcbiAgICAgICAgICB3aWR0aDogMDtcXG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xcbiAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICAgICAgfVxcbiAgICAgICAgOmhvc3QgLnByb2dyZXNzID4gZGl2IHtcXG4gICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICAgICAgfVxcbiAgICAgICAgOmhvc3QgLmN1cnNvciB7XFxuICAgICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICAgIHotaW5kZXg6IDU7XFxuICAgICAgICAgIHRvcDogMDtcXG4gICAgICAgICAgbGVmdDogMDtcXG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiAycHg7XFxuICAgICAgICB9XFxuICAgICAgPC9zdHlsZT5cXG5cXG4gICAgICA8ZGl2IGNsYXNzPVwic2Nyb2xsXCIgcGFydD1cInNjcm9sbFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cIndyYXBwZXJcIiBwYXJ0PVwid3JhcHBlclwiPlxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FudmFzZXNcIiBwYXJ0PVwiY2FudmFzZXNcIj48L2Rpdj5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cInByb2dyZXNzXCIgcGFydD1cInByb2dyZXNzXCI+PC9kaXY+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjdXJzb3JcIiBwYXJ0PVwiY3Vyc29yXCI+PC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgYCxbdCxlXX1zZXRPcHRpb25zKHQpe2lmKHRoaXMub3B0aW9ucy5jb250YWluZXIhPT10LmNvbnRhaW5lcil7Y29uc3QgZT10aGlzLnBhcmVudEZyb21PcHRpb25zQ29udGFpbmVyKHQuY29udGFpbmVyKTtlLmFwcGVuZENoaWxkKHRoaXMuY29udGFpbmVyKSx0aGlzLnBhcmVudD1lfSEwIT09dC5kcmFnVG9TZWVrJiZcIm9iamVjdFwiIT10eXBlb2YgdGhpcy5vcHRpb25zLmRyYWdUb1NlZWt8fHRoaXMuaW5pdERyYWcoKSx0aGlzLm9wdGlvbnM9dCx0aGlzLnJlUmVuZGVyKCl9Z2V0V3JhcHBlcigpe3JldHVybiB0aGlzLndyYXBwZXJ9Z2V0V2lkdGgoKXtyZXR1cm4gdGhpcy5zY3JvbGxDb250YWluZXIuY2xpZW50V2lkdGh9Z2V0U2Nyb2xsKCl7cmV0dXJuIHRoaXMuc2Nyb2xsQ29udGFpbmVyLnNjcm9sbExlZnR9c2V0U2Nyb2xsKHQpe3RoaXMuc2Nyb2xsQ29udGFpbmVyLnNjcm9sbExlZnQ9dH1zZXRTY3JvbGxQZXJjZW50YWdlKHQpe2NvbnN0e3Njcm9sbFdpZHRoOmV9PXRoaXMuc2Nyb2xsQ29udGFpbmVyLGk9ZSp0O3RoaXMuc2V0U2Nyb2xsKGkpfWRlc3Ryb3koKXt2YXIgdCxlO3RoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKCh0PT50KCkpKSx0aGlzLmNvbnRhaW5lci5yZW1vdmUoKSxudWxsPT09KHQ9dGhpcy5yZXNpemVPYnNlcnZlcil8fHZvaWQgMD09PXR8fHQuZGlzY29ubmVjdCgpLG51bGw9PT0oZT10aGlzLnVuc3Vic2NyaWJlT25TY3JvbGwpfHx2b2lkIDA9PT1lfHxlLmNhbGwodGhpcyl9Y3JlYXRlRGVsYXkodD0xMCl7bGV0IGUsaTtjb25zdCBzPSgpPT57ZSYmY2xlYXJUaW1lb3V0KGUpLGkmJmkoKX07cmV0dXJuIHRoaXMudGltZW91dHMucHVzaChzKSwoKT0+bmV3IFByb21pc2UoKChuLHIpPT57cygpLGk9cixlPXNldFRpbWVvdXQoKCgpPT57ZT12b2lkIDAsaT12b2lkIDAsbigpfSksdCl9KSl9Y29udmVydENvbG9yVmFsdWVzKHQpe2lmKCFBcnJheS5pc0FycmF5KHQpKXJldHVybiB0fHxcIlwiO2lmKHQubGVuZ3RoPDIpcmV0dXJuIHRbMF18fFwiXCI7Y29uc3QgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpLGk9ZS5nZXRDb250ZXh0KFwiMmRcIikscz1lLmhlaWdodCood2luZG93LmRldmljZVBpeGVsUmF0aW98fDEpLG49aS5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLDAsMCxzKSxyPTEvKHQubGVuZ3RoLTEpO3JldHVybiB0LmZvckVhY2goKCh0LGUpPT57Y29uc3QgaT1lKnI7bi5hZGRDb2xvclN0b3AoaSx0KX0pKSxufWdldFBpeGVsUmF0aW8oKXtyZXR1cm4gTWF0aC5tYXgoMSx3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpb3x8MSl9cmVuZGVyQmFyV2F2ZWZvcm0odCxlLGkscyl7Y29uc3Qgbj10WzBdLHI9dFsxXXx8dFswXSxvPW4ubGVuZ3RoLHt3aWR0aDphLGhlaWdodDpofT1pLmNhbnZhcyxsPWgvMixkPXRoaXMuZ2V0UGl4ZWxSYXRpbygpLGM9ZS5iYXJXaWR0aD9lLmJhcldpZHRoKmQ6MSx1PWUuYmFyR2FwP2UuYmFyR2FwKmQ6ZS5iYXJXaWR0aD9jLzI6MCxwPWUuYmFyUmFkaXVzfHwwLG09YS8oYyt1KS9vLGc9cCYmXCJyb3VuZFJlY3RcImluIGk/XCJyb3VuZFJlY3RcIjpcInJlY3RcIjtpLmJlZ2luUGF0aCgpO2xldCBmPTAsdj0wLGI9MDtmb3IobGV0IHQ9MDt0PD1vO3QrKyl7Y29uc3Qgbz1NYXRoLnJvdW5kKHQqbSk7aWYobz5mKXtjb25zdCB0PU1hdGgucm91bmQodipsKnMpLG49dCtNYXRoLnJvdW5kKGIqbCpzKXx8MTtsZXQgcj1sLXQ7XCJ0b3BcIj09PWUuYmFyQWxpZ24/cj0wOlwiYm90dG9tXCI9PT1lLmJhckFsaWduJiYocj1oLW4pLGlbZ10oZiooYyt1KSxyLGMsbixwKSxmPW8sdj0wLGI9MH1jb25zdCBhPU1hdGguYWJzKG5bdF18fDApLGQ9TWF0aC5hYnMoclt0XXx8MCk7YT52JiYodj1hKSxkPmImJihiPWQpfWkuZmlsbCgpLGkuY2xvc2VQYXRoKCl9cmVuZGVyTGluZVdhdmVmb3JtKHQsZSxpLHMpe2NvbnN0IG49ZT0+e2NvbnN0IG49dFtlXXx8dFswXSxyPW4ubGVuZ3RoLHtoZWlnaHQ6b309aS5jYW52YXMsYT1vLzIsaD1pLmNhbnZhcy53aWR0aC9yO2kubW92ZVRvKDAsYSk7bGV0IGw9MCxkPTA7Zm9yKGxldCB0PTA7dDw9cjt0Kyspe2NvbnN0IHI9TWF0aC5yb3VuZCh0KmgpO2lmKHI+bCl7Y29uc3QgdD1hKyhNYXRoLnJvdW5kKGQqYSpzKXx8MSkqKDA9PT1lPy0xOjEpO2kubGluZVRvKGwsdCksbD1yLGQ9MH1jb25zdCBvPU1hdGguYWJzKG5bdF18fDApO28+ZCYmKGQ9byl9aS5saW5lVG8obCxhKX07aS5iZWdpblBhdGgoKSxuKDApLG4oMSksaS5maWxsKCksaS5jbG9zZVBhdGgoKX1yZW5kZXJXYXZlZm9ybSh0LGUsaSl7aWYoaS5maWxsU3R5bGU9dGhpcy5jb252ZXJ0Q29sb3JWYWx1ZXMoZS53YXZlQ29sb3IpLGUucmVuZGVyRnVuY3Rpb24pcmV0dXJuIHZvaWQgZS5yZW5kZXJGdW5jdGlvbih0LGkpO2xldCBzPWUuYmFySGVpZ2h0fHwxO2lmKGUubm9ybWFsaXplKXtjb25zdCBlPUFycmF5LmZyb20odFswXSkucmVkdWNlKCgodCxlKT0+TWF0aC5tYXgodCxNYXRoLmFicyhlKSkpLDApO3M9ZT8xL2U6MX1lLmJhcldpZHRofHxlLmJhckdhcHx8ZS5iYXJBbGlnbj90aGlzLnJlbmRlckJhcldhdmVmb3JtKHQsZSxpLHMpOnRoaXMucmVuZGVyTGluZVdhdmVmb3JtKHQsZSxpLHMpfXJlbmRlclNpbmdsZUNhbnZhcyh0LGUsaSxzLG4scixvKXtjb25zdCBhPXRoaXMuZ2V0UGl4ZWxSYXRpbygpLGg9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtoLndpZHRoPU1hdGgucm91bmQoaSphKSxoLmhlaWdodD1NYXRoLnJvdW5kKHMqYSksaC5zdHlsZS53aWR0aD1gJHtpfXB4YCxoLnN0eWxlLmhlaWdodD1gJHtzfXB4YCxoLnN0eWxlLmxlZnQ9YCR7TWF0aC5yb3VuZChuKX1weGAsci5hcHBlbmRDaGlsZChoKTtjb25zdCBsPWguZ2V0Q29udGV4dChcIjJkXCIpO2lmKHRoaXMucmVuZGVyV2F2ZWZvcm0odCxlLGwpLGgud2lkdGg+MCYmaC5oZWlnaHQ+MCl7Y29uc3QgdD1oLmNsb25lTm9kZSgpLGk9dC5nZXRDb250ZXh0KFwiMmRcIik7aS5kcmF3SW1hZ2UoaCwwLDApLGkuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uPVwic291cmNlLWluXCIsaS5maWxsU3R5bGU9dGhpcy5jb252ZXJ0Q29sb3JWYWx1ZXMoZS5wcm9ncmVzc0NvbG9yKSxpLmZpbGxSZWN0KDAsMCxoLndpZHRoLGguaGVpZ2h0KSxvLmFwcGVuZENoaWxkKHQpfX1yZW5kZXJNdWx0aUNhbnZhcyh0LGUsaSxzLG4scil7Y29uc3Qgbz10aGlzLmdldFBpeGVsUmF0aW8oKSx7Y2xpZW50V2lkdGg6YX09dGhpcy5zY3JvbGxDb250YWluZXIsbD1pL287bGV0IGQ9TWF0aC5taW4oaC5NQVhfQ0FOVkFTX1dJRFRILGEsbCksYz17fTtpZihlLmJhcldpZHRofHxlLmJhckdhcCl7Y29uc3QgdD1lLmJhcldpZHRofHwuNSxpPXQrKGUuYmFyR2FwfHx0LzIpO2QlaSE9MCYmKGQ9TWF0aC5mbG9vcihkL2kpKmkpfWNvbnN0IHU9aT0+e2lmKGk8MHx8aT49cClyZXR1cm47aWYoY1tpXSlyZXR1cm47Y1tpXT0hMDtjb25zdCBvPWkqZCxhPU1hdGgubWluKGwtbyxkKTtpZihhPD0wKXJldHVybjtjb25zdCBoPXQubWFwKCh0PT57Y29uc3QgZT1NYXRoLmZsb29yKG8vbCp0Lmxlbmd0aCksaT1NYXRoLmZsb29yKChvK2EpL2wqdC5sZW5ndGgpO3JldHVybiB0LnNsaWNlKGUsaSl9KSk7dGhpcy5yZW5kZXJTaW5nbGVDYW52YXMoaCxlLGEscyxvLG4scil9LHA9TWF0aC5jZWlsKGwvZCk7aWYoIXRoaXMuaXNTY3JvbGxhYmxlKXtmb3IobGV0IHQ9MDt0PHA7dCsrKXUodCk7cmV0dXJufWNvbnN0IG09dGhpcy5zY3JvbGxDb250YWluZXIuc2Nyb2xsTGVmdC9sLGc9TWF0aC5mbG9vcihtKnApO3UoZy0xKSx1KGcpLHUoZysxKSxwPjEmJih0aGlzLnVuc3Vic2NyaWJlT25TY3JvbGw9dGhpcy5vbihcInNjcm9sbFwiLCgoKT0+e2NvbnN0e3Njcm9sbExlZnQ6dH09dGhpcy5zY3JvbGxDb250YWluZXIsZT1NYXRoLmZsb29yKHQvbCpwKTtPYmplY3Qua2V5cyhjKS5sZW5ndGg+aC5NQVhfTk9ERVMmJihuLmlubmVySFRNTD1cIlwiLHIuaW5uZXJIVE1MPVwiXCIsYz17fSksdShlLTEpLHUoZSksdShlKzEpfSkpKX1yZW5kZXJDaGFubmVsKHQsZSxpLHMpe3ZhcntvdmVybGF5Om59PWUscj1mdW5jdGlvbih0LGUpe3ZhciBpPXt9O2Zvcih2YXIgcyBpbiB0KU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LHMpJiZlLmluZGV4T2Yocyk8MCYmKGlbc109dFtzXSk7aWYobnVsbCE9dCYmXCJmdW5jdGlvblwiPT10eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyl7dmFyIG49MDtmb3Iocz1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHQpO248cy5sZW5ndGg7bisrKWUuaW5kZXhPZihzW25dKTwwJiZPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodCxzW25dKSYmKGlbc1tuXV09dFtzW25dXSl9cmV0dXJuIGl9KGUsW1wib3ZlcmxheVwiXSk7Y29uc3Qgbz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGE9dGhpcy5nZXRIZWlnaHQoci5oZWlnaHQsci5zcGxpdENoYW5uZWxzKTtvLnN0eWxlLmhlaWdodD1gJHthfXB4YCxuJiZzPjAmJihvLnN0eWxlLm1hcmdpblRvcD1gLSR7YX1weGApLHRoaXMuY2FudmFzV3JhcHBlci5zdHlsZS5taW5IZWlnaHQ9YCR7YX1weGAsdGhpcy5jYW52YXNXcmFwcGVyLmFwcGVuZENoaWxkKG8pO2NvbnN0IGg9by5jbG9uZU5vZGUoKTt0aGlzLnByb2dyZXNzV3JhcHBlci5hcHBlbmRDaGlsZChoKSx0aGlzLnJlbmRlck11bHRpQ2FudmFzKHQscixpLGEsbyxoKX1yZW5kZXIoZSl7cmV0dXJuIHQodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXt2YXIgdDt0aGlzLnRpbWVvdXRzLmZvckVhY2goKHQ9PnQoKSkpLHRoaXMudGltZW91dHM9W10sdGhpcy5jYW52YXNXcmFwcGVyLmlubmVySFRNTD1cIlwiLHRoaXMucHJvZ3Jlc3NXcmFwcGVyLmlubmVySFRNTD1cIlwiLG51bGwhPXRoaXMub3B0aW9ucy53aWR0aCYmKHRoaXMuc2Nyb2xsQ29udGFpbmVyLnN0eWxlLndpZHRoPVwibnVtYmVyXCI9PXR5cGVvZiB0aGlzLm9wdGlvbnMud2lkdGg/YCR7dGhpcy5vcHRpb25zLndpZHRofXB4YDp0aGlzLm9wdGlvbnMud2lkdGgpO2NvbnN0IGk9dGhpcy5nZXRQaXhlbFJhdGlvKCkscz10aGlzLnNjcm9sbENvbnRhaW5lci5jbGllbnRXaWR0aCxuPU1hdGguY2VpbChlLmR1cmF0aW9uKih0aGlzLm9wdGlvbnMubWluUHhQZXJTZWN8fDApKTt0aGlzLmlzU2Nyb2xsYWJsZT1uPnM7Y29uc3Qgcj10aGlzLm9wdGlvbnMuZmlsbFBhcmVudCYmIXRoaXMuaXNTY3JvbGxhYmxlLG89KHI/czpuKSppO2lmKHRoaXMud3JhcHBlci5zdHlsZS53aWR0aD1yP1wiMTAwJVwiOmAke259cHhgLHRoaXMuc2Nyb2xsQ29udGFpbmVyLnN0eWxlLm92ZXJmbG93WD10aGlzLmlzU2Nyb2xsYWJsZT9cImF1dG9cIjpcImhpZGRlblwiLHRoaXMuc2Nyb2xsQ29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoXCJub1Njcm9sbGJhclwiLCEhdGhpcy5vcHRpb25zLmhpZGVTY3JvbGxiYXIpLHRoaXMuY3Vyc29yLnN0eWxlLmJhY2tncm91bmRDb2xvcj1gJHt0aGlzLm9wdGlvbnMuY3Vyc29yQ29sb3J8fHRoaXMub3B0aW9ucy5wcm9ncmVzc0NvbG9yfWAsdGhpcy5jdXJzb3Iuc3R5bGUud2lkdGg9YCR7dGhpcy5vcHRpb25zLmN1cnNvcldpZHRofXB4YCx0aGlzLmF1ZGlvRGF0YT1lLHRoaXMuZW1pdChcInJlbmRlclwiKSx0aGlzLm9wdGlvbnMuc3BsaXRDaGFubmVscylmb3IobGV0IGk9MDtpPGUubnVtYmVyT2ZDaGFubmVscztpKyspe2NvbnN0IHM9T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LHRoaXMub3B0aW9ucyksbnVsbD09PSh0PXRoaXMub3B0aW9ucy5zcGxpdENoYW5uZWxzKXx8dm9pZCAwPT09dD92b2lkIDA6dFtpXSk7dGhpcy5yZW5kZXJDaGFubmVsKFtlLmdldENoYW5uZWxEYXRhKGkpXSxzLG8saSl9ZWxzZXtjb25zdCB0PVtlLmdldENoYW5uZWxEYXRhKDApXTtlLm51bWJlck9mQ2hhbm5lbHM+MSYmdC5wdXNoKGUuZ2V0Q2hhbm5lbERhdGEoMSkpLHRoaXMucmVuZGVyQ2hhbm5lbCh0LHRoaXMub3B0aW9ucyxvLDApfVByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCgpPT50aGlzLmVtaXQoXCJyZW5kZXJlZFwiKSkpfSkpfXJlUmVuZGVyKCl7dmFyIHQ7aWYobnVsbD09PSh0PXRoaXMudW5zdWJzY3JpYmVPblNjcm9sbCl8fHZvaWQgMD09PXR8fHQuY2FsbCh0aGlzKSxkZWxldGUgdGhpcy51bnN1YnNjcmliZU9uU2Nyb2xsLCF0aGlzLmF1ZGlvRGF0YSlyZXR1cm47Y29uc3R7c2Nyb2xsV2lkdGg6ZX09dGhpcy5zY3JvbGxDb250YWluZXIse3JpZ2h0Oml9PXRoaXMucHJvZ3Jlc3NXcmFwcGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO2lmKHRoaXMucmVuZGVyKHRoaXMuYXVkaW9EYXRhKSx0aGlzLmlzU2Nyb2xsYWJsZSYmZSE9PXRoaXMuc2Nyb2xsQ29udGFpbmVyLnNjcm9sbFdpZHRoKXtjb25zdHtyaWdodDp0fT10aGlzLnByb2dyZXNzV3JhcHBlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtsZXQgZT10LWk7ZSo9MixlPWU8MD9NYXRoLmZsb29yKGUpOk1hdGguY2VpbChlKSxlLz0yLHRoaXMuc2Nyb2xsQ29udGFpbmVyLnNjcm9sbExlZnQrPWV9fXpvb20odCl7dGhpcy5vcHRpb25zLm1pblB4UGVyU2VjPXQsdGhpcy5yZVJlbmRlcigpfXNjcm9sbEludG9WaWV3KHQsZT0hMSl7Y29uc3R7c2Nyb2xsTGVmdDppLHNjcm9sbFdpZHRoOnMsY2xpZW50V2lkdGg6bn09dGhpcy5zY3JvbGxDb250YWluZXIscj10KnMsbz1pLGE9aStuLGg9bi8yO2lmKHRoaXMuaXNEcmFnZ2luZyl7Y29uc3QgdD0zMDtyK3Q+YT90aGlzLnNjcm9sbENvbnRhaW5lci5zY3JvbGxMZWZ0Kz10OnItdDxvJiYodGhpcy5zY3JvbGxDb250YWluZXIuc2Nyb2xsTGVmdC09dCl9ZWxzZXsocjxvfHxyPmEpJiYodGhpcy5zY3JvbGxDb250YWluZXIuc2Nyb2xsTGVmdD1yLSh0aGlzLm9wdGlvbnMuYXV0b0NlbnRlcj9oOjApKTtjb25zdCB0PXItaS1oO2UmJnRoaXMub3B0aW9ucy5hdXRvQ2VudGVyJiZ0PjAmJih0aGlzLnNjcm9sbENvbnRhaW5lci5zY3JvbGxMZWZ0Kz1NYXRoLm1pbih0LDEwKSl9e2NvbnN0IHQ9dGhpcy5zY3JvbGxDb250YWluZXIuc2Nyb2xsTGVmdCxlPXQvcyxpPSh0K24pL3M7dGhpcy5lbWl0KFwic2Nyb2xsXCIsZSxpLHQsdCtuKX19cmVuZGVyUHJvZ3Jlc3ModCxlKXtpZihpc05hTih0KSlyZXR1cm47Y29uc3QgaT0xMDAqdDt0aGlzLmNhbnZhc1dyYXBwZXIuc3R5bGUuY2xpcFBhdGg9YHBvbHlnb24oJHtpfSUgMCwgMTAwJSAwLCAxMDAlIDEwMCUsICR7aX0lIDEwMCUpYCx0aGlzLnByb2dyZXNzV3JhcHBlci5zdHlsZS53aWR0aD1gJHtpfSVgLHRoaXMuY3Vyc29yLnN0eWxlLmxlZnQ9YCR7aX0lYCx0aGlzLmN1cnNvci5zdHlsZS50cmFuc2Zvcm09YHRyYW5zbGF0ZVgoLSR7MTAwPT09TWF0aC5yb3VuZChpKT90aGlzLm9wdGlvbnMuY3Vyc29yV2lkdGg6MH1weClgLHRoaXMuaXNTY3JvbGxhYmxlJiZ0aGlzLm9wdGlvbnMuYXV0b1Njcm9sbCYmdGhpcy5zY3JvbGxJbnRvVmlldyh0LGUpfWV4cG9ydEltYWdlKGUsaSxzKXtyZXR1cm4gdCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe2NvbnN0IHQ9dGhpcy5jYW52YXNXcmFwcGVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCJjYW52YXNcIik7aWYoIXQubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIk5vIHdhdmVmb3JtIGRhdGFcIik7aWYoXCJkYXRhVVJMXCI9PT1zKXtjb25zdCBzPUFycmF5LmZyb20odCkubWFwKCh0PT50LnRvRGF0YVVSTChlLGkpKSk7cmV0dXJuIFByb21pc2UucmVzb2x2ZShzKX1yZXR1cm4gUHJvbWlzZS5hbGwoQXJyYXkuZnJvbSh0KS5tYXAoKHQ9Pm5ldyBQcm9taXNlKCgocyxuKT0+e3QudG9CbG9iKCh0PT57dD9zKHQpOm4obmV3IEVycm9yKFwiQ291bGQgbm90IGV4cG9ydCBpbWFnZVwiKSl9KSxlLGkpfSkpKSkpfSkpfX1oLk1BWF9DQU5WQVNfV0lEVEg9OGUzLGguTUFYX05PREVTPTEwO2NsYXNzIGwgZXh0ZW5kcyBle2NvbnN0cnVjdG9yKCl7c3VwZXIoLi4uYXJndW1lbnRzKSx0aGlzLnVuc3Vic2NyaWJlPSgpPT57fX1zdGFydCgpe3RoaXMudW5zdWJzY3JpYmU9dGhpcy5vbihcInRpY2tcIiwoKCk9PntyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCgpPT57dGhpcy5lbWl0KFwidGlja1wiKX0pKX0pKSx0aGlzLmVtaXQoXCJ0aWNrXCIpfXN0b3AoKXt0aGlzLnVuc3Vic2NyaWJlKCl9ZGVzdHJveSgpe3RoaXMudW5zdWJzY3JpYmUoKX19Y2xhc3MgZCBleHRlbmRzIGV7Y29uc3RydWN0b3IodD1uZXcgQXVkaW9Db250ZXh0KXtzdXBlcigpLHRoaXMuYnVmZmVyTm9kZT1udWxsLHRoaXMucGxheVN0YXJ0VGltZT0wLHRoaXMucGxheWVkRHVyYXRpb249MCx0aGlzLl9tdXRlZD0hMSx0aGlzLl9wbGF5YmFja1JhdGU9MSx0aGlzLl9kdXJhdGlvbj12b2lkIDAsdGhpcy5idWZmZXI9bnVsbCx0aGlzLmN1cnJlbnRTcmM9XCJcIix0aGlzLnBhdXNlZD0hMCx0aGlzLmNyb3NzT3JpZ2luPW51bGwsdGhpcy5zZWVraW5nPSExLHRoaXMuYXV0b3BsYXk9ITEsdGhpcy5hZGRFdmVudExpc3RlbmVyPXRoaXMub24sdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyPXRoaXMudW4sdGhpcy5hdWRpb0NvbnRleHQ9dCx0aGlzLmdhaW5Ob2RlPXRoaXMuYXVkaW9Db250ZXh0LmNyZWF0ZUdhaW4oKSx0aGlzLmdhaW5Ob2RlLmNvbm5lY3QodGhpcy5hdWRpb0NvbnRleHQuZGVzdGluYXRpb24pfWxvYWQoKXtyZXR1cm4gdCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe30pKX1nZXQgc3JjKCl7cmV0dXJuIHRoaXMuY3VycmVudFNyY31zZXQgc3JjKHQpe2lmKHRoaXMuY3VycmVudFNyYz10LHRoaXMuX2R1cmF0aW9uPXZvaWQgMCwhdClyZXR1cm4gdGhpcy5idWZmZXI9bnVsbCx2b2lkIHRoaXMuZW1pdChcImVtcHRpZWRcIik7ZmV0Y2godCkudGhlbigoZT0+e2lmKGUuc3RhdHVzPj00MDApdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggJHt0fTogJHtlLnN0YXR1c30gKCR7ZS5zdGF0dXNUZXh0fSlgKTtyZXR1cm4gZS5hcnJheUJ1ZmZlcigpfSkpLnRoZW4oKGU9PnRoaXMuY3VycmVudFNyYyE9PXQ/bnVsbDp0aGlzLmF1ZGlvQ29udGV4dC5kZWNvZGVBdWRpb0RhdGEoZSkpKS50aGVuKChlPT57dGhpcy5jdXJyZW50U3JjPT09dCYmKHRoaXMuYnVmZmVyPWUsdGhpcy5lbWl0KFwibG9hZGVkbWV0YWRhdGFcIiksdGhpcy5lbWl0KFwiY2FucGxheVwiKSx0aGlzLmF1dG9wbGF5JiZ0aGlzLnBsYXkoKSl9KSl9X3BsYXkoKXt2YXIgdDtpZighdGhpcy5wYXVzZWQpcmV0dXJuO3RoaXMucGF1c2VkPSExLG51bGw9PT0odD10aGlzLmJ1ZmZlck5vZGUpfHx2b2lkIDA9PT10fHx0LmRpc2Nvbm5lY3QoKSx0aGlzLmJ1ZmZlck5vZGU9dGhpcy5hdWRpb0NvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCksdGhpcy5idWZmZXImJih0aGlzLmJ1ZmZlck5vZGUuYnVmZmVyPXRoaXMuYnVmZmVyKSx0aGlzLmJ1ZmZlck5vZGUucGxheWJhY2tSYXRlLnZhbHVlPXRoaXMuX3BsYXliYWNrUmF0ZSx0aGlzLmJ1ZmZlck5vZGUuY29ubmVjdCh0aGlzLmdhaW5Ob2RlKTtsZXQgZT10aGlzLnBsYXllZER1cmF0aW9uKnRoaXMuX3BsYXliYWNrUmF0ZTtlPj10aGlzLmR1cmF0aW9uJiYoZT0wLHRoaXMucGxheWVkRHVyYXRpb249MCksdGhpcy5idWZmZXJOb2RlLnN0YXJ0KHRoaXMuYXVkaW9Db250ZXh0LmN1cnJlbnRUaW1lLGUpLHRoaXMucGxheVN0YXJ0VGltZT10aGlzLmF1ZGlvQ29udGV4dC5jdXJyZW50VGltZSx0aGlzLmJ1ZmZlck5vZGUub25lbmRlZD0oKT0+e3RoaXMuY3VycmVudFRpbWU+PXRoaXMuZHVyYXRpb24mJih0aGlzLnBhdXNlKCksdGhpcy5lbWl0KFwiZW5kZWRcIikpfX1fcGF1c2UoKXt2YXIgdDt0aGlzLnBhdXNlZD0hMCxudWxsPT09KHQ9dGhpcy5idWZmZXJOb2RlKXx8dm9pZCAwPT09dHx8dC5zdG9wKCksdGhpcy5wbGF5ZWREdXJhdGlvbis9dGhpcy5hdWRpb0NvbnRleHQuY3VycmVudFRpbWUtdGhpcy5wbGF5U3RhcnRUaW1lfXBsYXkoKXtyZXR1cm4gdCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3RoaXMucGF1c2VkJiYodGhpcy5fcGxheSgpLHRoaXMuZW1pdChcInBsYXlcIikpfSkpfXBhdXNlKCl7dGhpcy5wYXVzZWR8fCh0aGlzLl9wYXVzZSgpLHRoaXMuZW1pdChcInBhdXNlXCIpKX1zdG9wQXQodCl7dmFyIGUsaTtjb25zdCBzPXQtdGhpcy5jdXJyZW50VGltZTtudWxsPT09KGU9dGhpcy5idWZmZXJOb2RlKXx8dm9pZCAwPT09ZXx8ZS5zdG9wKHRoaXMuYXVkaW9Db250ZXh0LmN1cnJlbnRUaW1lK3MpLG51bGw9PT0oaT10aGlzLmJ1ZmZlck5vZGUpfHx2b2lkIDA9PT1pfHxpLmFkZEV2ZW50TGlzdGVuZXIoXCJlbmRlZFwiLCgoKT0+e3RoaXMuYnVmZmVyTm9kZT1udWxsLHRoaXMucGF1c2UoKX0pLHtvbmNlOiEwfSl9c2V0U2lua0lkKGUpe3JldHVybiB0KHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7cmV0dXJuIHRoaXMuYXVkaW9Db250ZXh0LnNldFNpbmtJZChlKX0pKX1nZXQgcGxheWJhY2tSYXRlKCl7cmV0dXJuIHRoaXMuX3BsYXliYWNrUmF0ZX1zZXQgcGxheWJhY2tSYXRlKHQpe3RoaXMuX3BsYXliYWNrUmF0ZT10LHRoaXMuYnVmZmVyTm9kZSYmKHRoaXMuYnVmZmVyTm9kZS5wbGF5YmFja1JhdGUudmFsdWU9dCl9Z2V0IGN1cnJlbnRUaW1lKCl7cmV0dXJuKHRoaXMucGF1c2VkP3RoaXMucGxheWVkRHVyYXRpb246dGhpcy5wbGF5ZWREdXJhdGlvbisodGhpcy5hdWRpb0NvbnRleHQuY3VycmVudFRpbWUtdGhpcy5wbGF5U3RhcnRUaW1lKSkqdGhpcy5fcGxheWJhY2tSYXRlfXNldCBjdXJyZW50VGltZSh0KXtjb25zdCBlPSF0aGlzLnBhdXNlZDtlJiZ0aGlzLl9wYXVzZSgpLHRoaXMucGxheWVkRHVyYXRpb249dC90aGlzLl9wbGF5YmFja1JhdGUsZSYmdGhpcy5fcGxheSgpLHRoaXMuZW1pdChcInNlZWtpbmdcIiksdGhpcy5lbWl0KFwidGltZXVwZGF0ZVwiKX1nZXQgZHVyYXRpb24oKXt2YXIgdCxlO3JldHVybiBudWxsIT09KHQ9dGhpcy5fZHVyYXRpb24pJiZ2b2lkIDAhPT10P3Q6KG51bGw9PT0oZT10aGlzLmJ1ZmZlcil8fHZvaWQgMD09PWU/dm9pZCAwOmUuZHVyYXRpb24pfHwwfXNldCBkdXJhdGlvbih0KXt0aGlzLl9kdXJhdGlvbj10fWdldCB2b2x1bWUoKXtyZXR1cm4gdGhpcy5nYWluTm9kZS5nYWluLnZhbHVlfXNldCB2b2x1bWUodCl7dGhpcy5nYWluTm9kZS5nYWluLnZhbHVlPXQsdGhpcy5lbWl0KFwidm9sdW1lY2hhbmdlXCIpfWdldCBtdXRlZCgpe3JldHVybiB0aGlzLl9tdXRlZH1zZXQgbXV0ZWQodCl7dGhpcy5fbXV0ZWQhPT10JiYodGhpcy5fbXV0ZWQ9dCx0aGlzLl9tdXRlZD90aGlzLmdhaW5Ob2RlLmRpc2Nvbm5lY3QoKTp0aGlzLmdhaW5Ob2RlLmNvbm5lY3QodGhpcy5hdWRpb0NvbnRleHQuZGVzdGluYXRpb24pKX1jYW5QbGF5VHlwZSh0KXtyZXR1cm4vXihhdWRpb3x2aWRlbylcXC8vLnRlc3QodCl9Z2V0R2Fpbk5vZGUoKXtyZXR1cm4gdGhpcy5nYWluTm9kZX1nZXRDaGFubmVsRGF0YSgpe2NvbnN0IHQ9W107aWYoIXRoaXMuYnVmZmVyKXJldHVybiB0O2NvbnN0IGU9dGhpcy5idWZmZXIubnVtYmVyT2ZDaGFubmVscztmb3IobGV0IGk9MDtpPGU7aSsrKXQucHVzaCh0aGlzLmJ1ZmZlci5nZXRDaGFubmVsRGF0YShpKSk7cmV0dXJuIHR9fWNvbnN0IGM9e3dhdmVDb2xvcjpcIiM5OTlcIixwcm9ncmVzc0NvbG9yOlwiIzU1NVwiLGN1cnNvcldpZHRoOjEsbWluUHhQZXJTZWM6MCxmaWxsUGFyZW50OiEwLGludGVyYWN0OiEwLGRyYWdUb1NlZWs6ITEsYXV0b1Njcm9sbDohMCxhdXRvQ2VudGVyOiEwLHNhbXBsZVJhdGU6OGUzfTtjbGFzcyB1IGV4dGVuZHMgYXtzdGF0aWMgY3JlYXRlKHQpe3JldHVybiBuZXcgdSh0KX1jb25zdHJ1Y3Rvcih0KXtjb25zdCBlPXQubWVkaWF8fChcIldlYkF1ZGlvXCI9PT10LmJhY2tlbmQ/bmV3IGQ6dm9pZCAwKTtzdXBlcih7bWVkaWE6ZSxtZWRpYUNvbnRyb2xzOnQubWVkaWFDb250cm9scyxhdXRvcGxheTp0LmF1dG9wbGF5LHBsYXliYWNrUmF0ZTp0LmF1ZGlvUmF0ZX0pLHRoaXMucGx1Z2lucz1bXSx0aGlzLmRlY29kZWREYXRhPW51bGwsdGhpcy5zdWJzY3JpcHRpb25zPVtdLHRoaXMubWVkaWFTdWJzY3JpcHRpb25zPVtdLHRoaXMuYWJvcnRDb250cm9sbGVyPW51bGwsdGhpcy5vcHRpb25zPU9iamVjdC5hc3NpZ24oe30sYyx0KSx0aGlzLnRpbWVyPW5ldyBsO2NvbnN0IGk9ZT92b2lkIDA6dGhpcy5nZXRNZWRpYUVsZW1lbnQoKTt0aGlzLnJlbmRlcmVyPW5ldyBoKHRoaXMub3B0aW9ucyxpKSx0aGlzLmluaXRQbGF5ZXJFdmVudHMoKSx0aGlzLmluaXRSZW5kZXJlckV2ZW50cygpLHRoaXMuaW5pdFRpbWVyRXZlbnRzKCksdGhpcy5pbml0UGx1Z2lucygpO2NvbnN0IHM9dGhpcy5vcHRpb25zLnVybHx8dGhpcy5nZXRTcmMoKXx8XCJcIjtQcm9taXNlLnJlc29sdmUoKS50aGVuKCgoKT0+e3RoaXMuZW1pdChcImluaXRcIik7Y29uc3R7cGVha3M6dCxkdXJhdGlvbjplfT10aGlzLm9wdGlvbnM7KHN8fHQmJmUpJiZ0aGlzLmxvYWQocyx0LGUpLmNhdGNoKCgoKT0+bnVsbCkpfSkpfXVwZGF0ZVByb2dyZXNzKHQ9dGhpcy5nZXRDdXJyZW50VGltZSgpKXtyZXR1cm4gdGhpcy5yZW5kZXJlci5yZW5kZXJQcm9ncmVzcyh0L3RoaXMuZ2V0RHVyYXRpb24oKSx0aGlzLmlzUGxheWluZygpKSx0fWluaXRUaW1lckV2ZW50cygpe3RoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMudGltZXIub24oXCJ0aWNrXCIsKCgpPT57aWYoIXRoaXMuaXNTZWVraW5nKCkpe2NvbnN0IHQ9dGhpcy51cGRhdGVQcm9ncmVzcygpO3RoaXMuZW1pdChcInRpbWV1cGRhdGVcIix0KSx0aGlzLmVtaXQoXCJhdWRpb3Byb2Nlc3NcIix0KX19KSkpfWluaXRQbGF5ZXJFdmVudHMoKXt0aGlzLmlzUGxheWluZygpJiYodGhpcy5lbWl0KFwicGxheVwiKSx0aGlzLnRpbWVyLnN0YXJ0KCkpLHRoaXMubWVkaWFTdWJzY3JpcHRpb25zLnB1c2godGhpcy5vbk1lZGlhRXZlbnQoXCJ0aW1ldXBkYXRlXCIsKCgpPT57Y29uc3QgdD10aGlzLnVwZGF0ZVByb2dyZXNzKCk7dGhpcy5lbWl0KFwidGltZXVwZGF0ZVwiLHQpfSkpLHRoaXMub25NZWRpYUV2ZW50KFwicGxheVwiLCgoKT0+e3RoaXMuZW1pdChcInBsYXlcIiksdGhpcy50aW1lci5zdGFydCgpfSkpLHRoaXMub25NZWRpYUV2ZW50KFwicGF1c2VcIiwoKCk9Pnt0aGlzLmVtaXQoXCJwYXVzZVwiKSx0aGlzLnRpbWVyLnN0b3AoKX0pKSx0aGlzLm9uTWVkaWFFdmVudChcImVtcHRpZWRcIiwoKCk9Pnt0aGlzLnRpbWVyLnN0b3AoKX0pKSx0aGlzLm9uTWVkaWFFdmVudChcImVuZGVkXCIsKCgpPT57dGhpcy5lbWl0KFwiZmluaXNoXCIpfSkpLHRoaXMub25NZWRpYUV2ZW50KFwic2Vla2luZ1wiLCgoKT0+e3RoaXMuZW1pdChcInNlZWtpbmdcIix0aGlzLmdldEN1cnJlbnRUaW1lKCkpfSkpLHRoaXMub25NZWRpYUV2ZW50KFwiZXJyb3JcIiwodD0+e3RoaXMuZW1pdChcImVycm9yXCIsdC5lcnJvcil9KSkpfWluaXRSZW5kZXJlckV2ZW50cygpe3RoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMucmVuZGVyZXIub24oXCJjbGlja1wiLCgodCxlKT0+e3RoaXMub3B0aW9ucy5pbnRlcmFjdCYmKHRoaXMuc2Vla1RvKHQpLHRoaXMuZW1pdChcImludGVyYWN0aW9uXCIsdCp0aGlzLmdldER1cmF0aW9uKCkpLHRoaXMuZW1pdChcImNsaWNrXCIsdCxlKSl9KSksdGhpcy5yZW5kZXJlci5vbihcImRibGNsaWNrXCIsKCh0LGUpPT57dGhpcy5lbWl0KFwiZGJsY2xpY2tcIix0LGUpfSkpLHRoaXMucmVuZGVyZXIub24oXCJzY3JvbGxcIiwoKHQsZSxpLHMpPT57Y29uc3Qgbj10aGlzLmdldER1cmF0aW9uKCk7dGhpcy5lbWl0KFwic2Nyb2xsXCIsdCpuLGUqbixpLHMpfSkpLHRoaXMucmVuZGVyZXIub24oXCJyZW5kZXJcIiwoKCk9Pnt0aGlzLmVtaXQoXCJyZWRyYXdcIil9KSksdGhpcy5yZW5kZXJlci5vbihcInJlbmRlcmVkXCIsKCgpPT57dGhpcy5lbWl0KFwicmVkcmF3Y29tcGxldGVcIil9KSksdGhpcy5yZW5kZXJlci5vbihcImRyYWdzdGFydFwiLCh0PT57dGhpcy5lbWl0KFwiZHJhZ3N0YXJ0XCIsdCl9KSksdGhpcy5yZW5kZXJlci5vbihcImRyYWdlbmRcIiwodD0+e3RoaXMuZW1pdChcImRyYWdlbmRcIix0KX0pKSk7e2xldCB0O3RoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMucmVuZGVyZXIub24oXCJkcmFnXCIsKGU9PntpZighdGhpcy5vcHRpb25zLmludGVyYWN0KXJldHVybjtsZXQgaTt0aGlzLnJlbmRlcmVyLnJlbmRlclByb2dyZXNzKGUpLGNsZWFyVGltZW91dCh0KSx0aGlzLmlzUGxheWluZygpP2k9MDohMD09PXRoaXMub3B0aW9ucy5kcmFnVG9TZWVrP2k9MjAwOlwib2JqZWN0XCI9PXR5cGVvZiB0aGlzLm9wdGlvbnMuZHJhZ1RvU2VlayYmdm9pZCAwIT09dGhpcy5vcHRpb25zLmRyYWdUb1NlZWsmJihpPXRoaXMub3B0aW9ucy5kcmFnVG9TZWVrLmRlYm91bmNlVGltZSksdD1zZXRUaW1lb3V0KCgoKT0+e3RoaXMuc2Vla1RvKGUpfSksaSksdGhpcy5lbWl0KFwiaW50ZXJhY3Rpb25cIixlKnRoaXMuZ2V0RHVyYXRpb24oKSksdGhpcy5lbWl0KFwiZHJhZ1wiLGUpfSkpKX19aW5pdFBsdWdpbnMoKXt2YXIgdDsobnVsbD09PSh0PXRoaXMub3B0aW9ucy5wbHVnaW5zKXx8dm9pZCAwPT09dD92b2lkIDA6dC5sZW5ndGgpJiZ0aGlzLm9wdGlvbnMucGx1Z2lucy5mb3JFYWNoKCh0PT57dGhpcy5yZWdpc3RlclBsdWdpbih0KX0pKX11bnN1YnNjcmliZVBsYXllckV2ZW50cygpe3RoaXMubWVkaWFTdWJzY3JpcHRpb25zLmZvckVhY2goKHQ9PnQoKSkpLHRoaXMubWVkaWFTdWJzY3JpcHRpb25zPVtdfXNldE9wdGlvbnModCl7dGhpcy5vcHRpb25zPU9iamVjdC5hc3NpZ24oe30sdGhpcy5vcHRpb25zLHQpLHRoaXMucmVuZGVyZXIuc2V0T3B0aW9ucyh0aGlzLm9wdGlvbnMpLHQuYXVkaW9SYXRlJiZ0aGlzLnNldFBsYXliYWNrUmF0ZSh0LmF1ZGlvUmF0ZSksbnVsbCE9dC5tZWRpYUNvbnRyb2xzJiYodGhpcy5nZXRNZWRpYUVsZW1lbnQoKS5jb250cm9scz10Lm1lZGlhQ29udHJvbHMpfXJlZ2lzdGVyUGx1Z2luKHQpe3JldHVybiB0Ll9pbml0KHRoaXMpLHRoaXMucGx1Z2lucy5wdXNoKHQpLHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHQub25jZShcImRlc3Ryb3lcIiwoKCk9Pnt0aGlzLnBsdWdpbnM9dGhpcy5wbHVnaW5zLmZpbHRlcigoZT0+ZSE9PXQpKX0pKSksdH1nZXRXcmFwcGVyKCl7cmV0dXJuIHRoaXMucmVuZGVyZXIuZ2V0V3JhcHBlcigpfWdldFdpZHRoKCl7cmV0dXJuIHRoaXMucmVuZGVyZXIuZ2V0V2lkdGgoKX1nZXRTY3JvbGwoKXtyZXR1cm4gdGhpcy5yZW5kZXJlci5nZXRTY3JvbGwoKX1zZXRTY3JvbGwodCl7cmV0dXJuIHRoaXMucmVuZGVyZXIuc2V0U2Nyb2xsKHQpfXNldFNjcm9sbFRpbWUodCl7Y29uc3QgZT10L3RoaXMuZ2V0RHVyYXRpb24oKTt0aGlzLnJlbmRlcmVyLnNldFNjcm9sbFBlcmNlbnRhZ2UoZSl9Z2V0QWN0aXZlUGx1Z2lucygpe3JldHVybiB0aGlzLnBsdWdpbnN9bG9hZEF1ZGlvKGUscyxuLHIpe3JldHVybiB0KHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7dmFyIHQ7aWYodGhpcy5lbWl0KFwibG9hZFwiLGUpLCF0aGlzLm9wdGlvbnMubWVkaWEmJnRoaXMuaXNQbGF5aW5nKCkmJnRoaXMucGF1c2UoKSx0aGlzLmRlY29kZWREYXRhPW51bGwsIXMmJiFuKXtjb25zdCBpPXRoaXMub3B0aW9ucy5mZXRjaFBhcmFtc3x8e307d2luZG93LkFib3J0Q29udHJvbGxlciYmIWkuc2lnbmFsJiYodGhpcy5hYm9ydENvbnRyb2xsZXI9bmV3IEFib3J0Q29udHJvbGxlcixpLnNpZ25hbD1udWxsPT09KHQ9dGhpcy5hYm9ydENvbnRyb2xsZXIpfHx2b2lkIDA9PT10P3ZvaWQgMDp0LnNpZ25hbCk7Y29uc3Qgbj10PT50aGlzLmVtaXQoXCJsb2FkaW5nXCIsdCk7cz15aWVsZCBvLmZldGNoQmxvYihlLG4saSl9dGhpcy5zZXRTcmMoZSxzKTtjb25zdCBhPXlpZWxkIG5ldyBQcm9taXNlKCh0PT57Y29uc3QgZT1yfHx0aGlzLmdldER1cmF0aW9uKCk7ZT90KGUpOnRoaXMubWVkaWFTdWJzY3JpcHRpb25zLnB1c2godGhpcy5vbk1lZGlhRXZlbnQoXCJsb2FkZWRtZXRhZGF0YVwiLCgoKT0+dCh0aGlzLmdldER1cmF0aW9uKCkpKSx7b25jZTohMH0pKX0pKTtpZighZSYmIXMpe2NvbnN0IHQ9dGhpcy5nZXRNZWRpYUVsZW1lbnQoKTt0IGluc3RhbmNlb2YgZCYmKHQuZHVyYXRpb249YSl9aWYobil0aGlzLmRlY29kZWREYXRhPWkuY3JlYXRlQnVmZmVyKG4sYXx8MCk7ZWxzZSBpZihzKXtjb25zdCB0PXlpZWxkIHMuYXJyYXlCdWZmZXIoKTt0aGlzLmRlY29kZWREYXRhPXlpZWxkIGkuZGVjb2RlKHQsdGhpcy5vcHRpb25zLnNhbXBsZVJhdGUpfXRoaXMuZGVjb2RlZERhdGEmJih0aGlzLmVtaXQoXCJkZWNvZGVcIix0aGlzLmdldER1cmF0aW9uKCkpLHRoaXMucmVuZGVyZXIucmVuZGVyKHRoaXMuZGVjb2RlZERhdGEpKSx0aGlzLmVtaXQoXCJyZWFkeVwiLHRoaXMuZ2V0RHVyYXRpb24oKSl9KSl9bG9hZChlLGkscyl7cmV0dXJuIHQodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXt0cnl7cmV0dXJuIHlpZWxkIHRoaXMubG9hZEF1ZGlvKGUsdm9pZCAwLGkscyl9Y2F0Y2godCl7dGhyb3cgdGhpcy5lbWl0KFwiZXJyb3JcIix0KSx0fX0pKX1sb2FkQmxvYihlLGkscyl7cmV0dXJuIHQodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXt0cnl7cmV0dXJuIHlpZWxkIHRoaXMubG9hZEF1ZGlvKFwiXCIsZSxpLHMpfWNhdGNoKHQpe3Rocm93IHRoaXMuZW1pdChcImVycm9yXCIsdCksdH19KSl9em9vbSh0KXtpZighdGhpcy5kZWNvZGVkRGF0YSl0aHJvdyBuZXcgRXJyb3IoXCJObyBhdWRpbyBsb2FkZWRcIik7dGhpcy5yZW5kZXJlci56b29tKHQpLHRoaXMuZW1pdChcInpvb21cIix0KX1nZXREZWNvZGVkRGF0YSgpe3JldHVybiB0aGlzLmRlY29kZWREYXRhfWV4cG9ydFBlYWtzKHtjaGFubmVsczp0PTIsbWF4TGVuZ3RoOmU9OGUzLHByZWNpc2lvbjppPTFlNH09e30pe2lmKCF0aGlzLmRlY29kZWREYXRhKXRocm93IG5ldyBFcnJvcihcIlRoZSBhdWRpbyBoYXMgbm90IGJlZW4gZGVjb2RlZCB5ZXRcIik7Y29uc3Qgcz1NYXRoLm1pbih0LHRoaXMuZGVjb2RlZERhdGEubnVtYmVyT2ZDaGFubmVscyksbj1bXTtmb3IobGV0IHQ9MDt0PHM7dCsrKXtjb25zdCBzPXRoaXMuZGVjb2RlZERhdGEuZ2V0Q2hhbm5lbERhdGEodCkscj1bXSxvPXMubGVuZ3RoL2U7Zm9yKGxldCB0PTA7dDxlO3QrKyl7Y29uc3QgZT1zLnNsaWNlKE1hdGguZmxvb3IodCpvKSxNYXRoLmNlaWwoKHQrMSkqbykpO2xldCBuPTA7Zm9yKGxldCB0PTA7dDxlLmxlbmd0aDt0Kyspe2NvbnN0IGk9ZVt0XTtNYXRoLmFicyhpKT5NYXRoLmFicyhuKSYmKG49aSl9ci5wdXNoKE1hdGgucm91bmQobippKS9pKX1uLnB1c2gocil9cmV0dXJuIG59Z2V0RHVyYXRpb24oKXtsZXQgdD1zdXBlci5nZXREdXJhdGlvbigpfHwwO3JldHVybiAwIT09dCYmdCE9PTEvMHx8IXRoaXMuZGVjb2RlZERhdGF8fCh0PXRoaXMuZGVjb2RlZERhdGEuZHVyYXRpb24pLHR9dG9nZ2xlSW50ZXJhY3Rpb24odCl7dGhpcy5vcHRpb25zLmludGVyYWN0PXR9c2V0VGltZSh0KXtzdXBlci5zZXRUaW1lKHQpLHRoaXMudXBkYXRlUHJvZ3Jlc3ModCksdGhpcy5lbWl0KFwidGltZXVwZGF0ZVwiLHQpfXNlZWtUbyh0KXtjb25zdCBlPXRoaXMuZ2V0RHVyYXRpb24oKSp0O3RoaXMuc2V0VGltZShlKX1wbGF5UGF1c2UoKXtyZXR1cm4gdCh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3JldHVybiB0aGlzLmlzUGxheWluZygpP3RoaXMucGF1c2UoKTp0aGlzLnBsYXkoKX0pKX1zdG9wKCl7dGhpcy5wYXVzZSgpLHRoaXMuc2V0VGltZSgwKX1za2lwKHQpe3RoaXMuc2V0VGltZSh0aGlzLmdldEN1cnJlbnRUaW1lKCkrdCl9ZW1wdHkoKXt0aGlzLmxvYWQoXCJcIixbWzBdXSwuMDAxKX1zZXRNZWRpYUVsZW1lbnQodCl7dGhpcy51bnN1YnNjcmliZVBsYXllckV2ZW50cygpLHN1cGVyLnNldE1lZGlhRWxlbWVudCh0KSx0aGlzLmluaXRQbGF5ZXJFdmVudHMoKX1leHBvcnRJbWFnZSgpe3JldHVybiB0KHRoaXMsYXJndW1lbnRzLHZvaWQgMCwoZnVuY3Rpb24qKHQ9XCJpbWFnZS9wbmdcIixlPTEsaT1cImRhdGFVUkxcIil7cmV0dXJuIHRoaXMucmVuZGVyZXIuZXhwb3J0SW1hZ2UodCxlLGkpfSkpfWRlc3Ryb3koKXt2YXIgdDt0aGlzLmVtaXQoXCJkZXN0cm95XCIpLG51bGw9PT0odD10aGlzLmFib3J0Q29udHJvbGxlcil8fHZvaWQgMD09PXR8fHQuYWJvcnQoKSx0aGlzLnBsdWdpbnMuZm9yRWFjaCgodD0+dC5kZXN0cm95KCkpKSx0aGlzLnN1YnNjcmlwdGlvbnMuZm9yRWFjaCgodD0+dCgpKSksdGhpcy51bnN1YnNjcmliZVBsYXllckV2ZW50cygpLHRoaXMudGltZXIuZGVzdHJveSgpLHRoaXMucmVuZGVyZXIuZGVzdHJveSgpLHN1cGVyLmRlc3Ryb3koKX19dS5CYXNlUGx1Z2luPWNsYXNzIGV4dGVuZHMgZXtjb25zdHJ1Y3Rvcih0KXtzdXBlcigpLHRoaXMuc3Vic2NyaXB0aW9ucz1bXSx0aGlzLm9wdGlvbnM9dH1vbkluaXQoKXt9X2luaXQodCl7dGhpcy53YXZlc3VyZmVyPXQsdGhpcy5vbkluaXQoKX1kZXN0cm95KCl7dGhpcy5lbWl0KFwiZGVzdHJveVwiKSx0aGlzLnN1YnNjcmlwdGlvbnMuZm9yRWFjaCgodD0+dCgpKSl9fSx1LmRvbT1yO2V4cG9ydHt1IGFzIGRlZmF1bHR9O1xuIl0sIm5hbWVzIjpbInQiLCJlIiwiaSIsInMiLCJQcm9taXNlIiwibiIsInIiLCJvIiwiaCIsIm5leHQiLCJhIiwidGhyb3ciLCJkb25lIiwidmFsdWUiLCJ0aGVuIiwiYXBwbHkiLCJTdXBwcmVzc2VkRXJyb3IiLCJjb25zdHJ1Y3RvciIsImxpc3RlbmVycyIsIm9uIiwiU2V0IiwiYWRkIiwib25jZSIsInVuIiwiZGVsZXRlIiwidW5BbGwiLCJlbWl0IiwiZm9yRWFjaCIsImRlY29kZSIsIkF1ZGlvQ29udGV4dCIsInNhbXBsZVJhdGUiLCJkZWNvZGVBdWRpb0RhdGEiLCJmaW5hbGx5IiwiY2xvc2UiLCJjcmVhdGVCdWZmZXIiLCJzb21lIiwibGVuZ3RoIiwiTWF0aCIsImFicyIsImR1cmF0aW9uIiwibnVtYmVyT2ZDaGFubmVscyIsImdldENoYW5uZWxEYXRhIiwiY29weUZyb21DaGFubmVsIiwiQXVkaW9CdWZmZXIiLCJwcm90b3R5cGUiLCJjb3B5VG9DaGFubmVsIiwieG1sbnMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZUVsZW1lbnQiLCJPYmplY3QiLCJlbnRyaWVzIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsImFzc2lnbiIsInN0eWxlIiwidGV4dENvbnRlbnQiLCJzZXRBdHRyaWJ1dGUiLCJ0b1N0cmluZyIsImZyZWV6ZSIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJmZXRjaEJsb2IiLCJmZXRjaCIsInN0YXR1cyIsIkVycm9yIiwic3RhdHVzVGV4dCIsImJvZHkiLCJoZWFkZXJzIiwiZ2V0UmVhZGVyIiwiTnVtYmVyIiwiZ2V0Iiwicm91bmQiLCJyZWFkIiwiY2xvbmUiLCJibG9iIiwiaXNFeHRlcm5hbE1lZGlhIiwibWVkaWEiLCJtZWRpYUNvbnRyb2xzIiwiY29udHJvbHMiLCJhdXRvcGxheSIsInBsYXliYWNrUmF0ZSIsIm9uTWVkaWFFdmVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZ2V0U3JjIiwiY3VycmVudFNyYyIsInNyYyIsInJldm9rZVNyYyIsInN0YXJ0c1dpdGgiLCJVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJjYW5QbGF5VHlwZSIsInNldFNyYyIsIkJsb2IiLCJ0eXBlIiwiY3JlYXRlT2JqZWN0VVJMIiwiZGVzdHJveSIsInBhdXNlIiwicmVtb3ZlIiwibG9hZCIsInNldE1lZGlhRWxlbWVudCIsInBsYXkiLCJpc1BsYXlpbmciLCJwYXVzZWQiLCJlbmRlZCIsInNldFRpbWUiLCJjdXJyZW50VGltZSIsImdldER1cmF0aW9uIiwiZ2V0Q3VycmVudFRpbWUiLCJnZXRWb2x1bWUiLCJ2b2x1bWUiLCJzZXRWb2x1bWUiLCJnZXRNdXRlZCIsIm11dGVkIiwic2V0TXV0ZWQiLCJnZXRQbGF5YmFja1JhdGUiLCJpc1NlZWtpbmciLCJzZWVraW5nIiwic2V0UGxheWJhY2tSYXRlIiwicHJlc2VydmVzUGl0Y2giLCJnZXRNZWRpYUVsZW1lbnQiLCJzZXRTaW5rSWQiLCJ0aW1lb3V0cyIsImlzU2Nyb2xsYWJsZSIsImF1ZGlvRGF0YSIsInJlc2l6ZU9ic2VydmVyIiwibGFzdENvbnRhaW5lcldpZHRoIiwiaXNEcmFnZ2luZyIsInN1YnNjcmlwdGlvbnMiLCJvcHRpb25zIiwicGFyZW50RnJvbU9wdGlvbnNDb250YWluZXIiLCJjb250YWluZXIiLCJwYXJlbnQiLCJpbml0SHRtbCIsInNjcm9sbENvbnRhaW5lciIsInF1ZXJ5U2VsZWN0b3IiLCJ3cmFwcGVyIiwiY2FudmFzV3JhcHBlciIsInByb2dyZXNzV3JhcHBlciIsImN1cnNvciIsImluaXRFdmVudHMiLCJIVE1MRWxlbWVudCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNsaWVudFgiLCJsZWZ0IiwiY2xpZW50WSIsInRvcCIsIndpZHRoIiwiaGVpZ2h0IiwiZHJhZ1RvU2VlayIsImluaXREcmFnIiwic2Nyb2xsTGVmdCIsInNjcm9sbFdpZHRoIiwiY2xpZW50V2lkdGgiLCJSZXNpemVPYnNlcnZlciIsImNyZWF0ZURlbGF5Iiwib25Db250YWluZXJSZXNpemUiLCJjYXRjaCIsIm9ic2VydmUiLCJyZVJlbmRlciIsInB1c2giLCJtYXRjaE1lZGlhIiwibWF0Y2hlcyIsImwiLCJidXR0b24iLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImQiLCJjIiwidSIsInAiLCJEYXRlIiwibm93IiwibSIsImciLCJmIiwicmVsYXRlZFRhcmdldCIsImRvY3VtZW50RWxlbWVudCIsInYiLCJiIiwicGFzc2l2ZSIsImNhcHR1cmUiLCJzZXRUaW1lb3V0IiwibWF4IiwibWluIiwiZ2V0SGVpZ2h0IiwiaXNOYU4iLCJjbGllbnRIZWlnaHQiLCJldmVyeSIsIm92ZXJsYXkiLCJhdHRhY2hTaGFkb3ciLCJtb2RlIiwiY3NwTm9uY2UiLCJyZXBsYWNlIiwiaW5uZXJIVE1MIiwic3BsaXRDaGFubmVscyIsInNldE9wdGlvbnMiLCJnZXRXcmFwcGVyIiwiZ2V0V2lkdGgiLCJnZXRTY3JvbGwiLCJzZXRTY3JvbGwiLCJzZXRTY3JvbGxQZXJjZW50YWdlIiwiZGlzY29ubmVjdCIsInVuc3Vic2NyaWJlT25TY3JvbGwiLCJjYWxsIiwiY2xlYXJUaW1lb3V0IiwiY29udmVydENvbG9yVmFsdWVzIiwiQXJyYXkiLCJpc0FycmF5IiwiZ2V0Q29udGV4dCIsIndpbmRvdyIsImRldmljZVBpeGVsUmF0aW8iLCJjcmVhdGVMaW5lYXJHcmFkaWVudCIsImFkZENvbG9yU3RvcCIsImdldFBpeGVsUmF0aW8iLCJyZW5kZXJCYXJXYXZlZm9ybSIsImNhbnZhcyIsImJhcldpZHRoIiwiYmFyR2FwIiwiYmFyUmFkaXVzIiwiYmVnaW5QYXRoIiwiYmFyQWxpZ24iLCJmaWxsIiwiY2xvc2VQYXRoIiwicmVuZGVyTGluZVdhdmVmb3JtIiwibW92ZVRvIiwibGluZVRvIiwicmVuZGVyV2F2ZWZvcm0iLCJmaWxsU3R5bGUiLCJ3YXZlQ29sb3IiLCJyZW5kZXJGdW5jdGlvbiIsImJhckhlaWdodCIsIm5vcm1hbGl6ZSIsImZyb20iLCJyZWR1Y2UiLCJyZW5kZXJTaW5nbGVDYW52YXMiLCJjbG9uZU5vZGUiLCJkcmF3SW1hZ2UiLCJnbG9iYWxDb21wb3NpdGVPcGVyYXRpb24iLCJwcm9ncmVzc0NvbG9yIiwiZmlsbFJlY3QiLCJyZW5kZXJNdWx0aUNhbnZhcyIsIk1BWF9DQU5WQVNfV0lEVEgiLCJmbG9vciIsIm1hcCIsInNsaWNlIiwiY2VpbCIsImtleXMiLCJNQVhfTk9ERVMiLCJyZW5kZXJDaGFubmVsIiwiaGFzT3duUHJvcGVydHkiLCJpbmRleE9mIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJtYXJnaW5Ub3AiLCJtaW5IZWlnaHQiLCJyZW5kZXIiLCJtaW5QeFBlclNlYyIsImZpbGxQYXJlbnQiLCJvdmVyZmxvd1giLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJoaWRlU2Nyb2xsYmFyIiwiYmFja2dyb3VuZENvbG9yIiwiY3Vyc29yQ29sb3IiLCJjdXJzb3JXaWR0aCIsInJlc29sdmUiLCJyaWdodCIsInpvb20iLCJzY3JvbGxJbnRvVmlldyIsImF1dG9DZW50ZXIiLCJyZW5kZXJQcm9ncmVzcyIsImNsaXBQYXRoIiwidHJhbnNmb3JtIiwiYXV0b1Njcm9sbCIsImV4cG9ydEltYWdlIiwicXVlcnlTZWxlY3RvckFsbCIsInRvRGF0YVVSTCIsImFsbCIsInRvQmxvYiIsImFyZ3VtZW50cyIsInVuc3Vic2NyaWJlIiwic3RhcnQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzdG9wIiwiYnVmZmVyTm9kZSIsInBsYXlTdGFydFRpbWUiLCJwbGF5ZWREdXJhdGlvbiIsIl9tdXRlZCIsIl9wbGF5YmFja1JhdGUiLCJfZHVyYXRpb24iLCJidWZmZXIiLCJjcm9zc09yaWdpbiIsImF1ZGlvQ29udGV4dCIsImdhaW5Ob2RlIiwiY3JlYXRlR2FpbiIsImNvbm5lY3QiLCJkZXN0aW5hdGlvbiIsImFycmF5QnVmZmVyIiwiX3BsYXkiLCJjcmVhdGVCdWZmZXJTb3VyY2UiLCJvbmVuZGVkIiwiX3BhdXNlIiwic3RvcEF0IiwiZ2FpbiIsInRlc3QiLCJnZXRHYWluTm9kZSIsImludGVyYWN0IiwiY3JlYXRlIiwiYmFja2VuZCIsImF1ZGlvUmF0ZSIsInBsdWdpbnMiLCJkZWNvZGVkRGF0YSIsIm1lZGlhU3Vic2NyaXB0aW9ucyIsImFib3J0Q29udHJvbGxlciIsInRpbWVyIiwicmVuZGVyZXIiLCJpbml0UGxheWVyRXZlbnRzIiwiaW5pdFJlbmRlcmVyRXZlbnRzIiwiaW5pdFRpbWVyRXZlbnRzIiwiaW5pdFBsdWdpbnMiLCJ1cmwiLCJwZWFrcyIsInVwZGF0ZVByb2dyZXNzIiwiZXJyb3IiLCJzZWVrVG8iLCJkZWJvdW5jZVRpbWUiLCJyZWdpc3RlclBsdWdpbiIsInVuc3Vic2NyaWJlUGxheWVyRXZlbnRzIiwiX2luaXQiLCJmaWx0ZXIiLCJzZXRTY3JvbGxUaW1lIiwiZ2V0QWN0aXZlUGx1Z2lucyIsImxvYWRBdWRpbyIsImZldGNoUGFyYW1zIiwiQWJvcnRDb250cm9sbGVyIiwic2lnbmFsIiwibG9hZEJsb2IiLCJnZXREZWNvZGVkRGF0YSIsImV4cG9ydFBlYWtzIiwiY2hhbm5lbHMiLCJtYXhMZW5ndGgiLCJwcmVjaXNpb24iLCJ0b2dnbGVJbnRlcmFjdGlvbiIsInBsYXlQYXVzZSIsInNraXAiLCJlbXB0eSIsImFib3J0IiwiQmFzZVBsdWdpbiIsIm9uSW5pdCIsIndhdmVzdXJmZXIiLCJkb20iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/wavesurfer.js/dist/wavesurfer.esm.js\n");

/***/ })

};
;